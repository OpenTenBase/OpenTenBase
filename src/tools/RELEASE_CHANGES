对于所有版本发布（主要版本、次要版本、beta、RC）

* 发布版本号更改
    - 运行 src/tools/version_stamp.pl，然后运行 autoconf（由打包者执行）（beta）

* 发布说明
    - 运行 git log 并根据需要运行 src/tools/git_changelog
    - 更新 doc/src/sgml/release.sgml
    - 对结果运行拼写检查器
    - 添加 SGML 标记

* 更新时区数据以匹配最新的 IANA 时区数据库和新的 Windows 发布（如果有的话）（见 src/timezone/README）

* 翻译更新
    1. 检出正确分支的消息存储库（<http://git.postgresql.org/git/pgtranslation/messages.git>）。
    2. 从<http://git.postgresql.org/git/pgtranslation/admin.git>检出管理存储库。
    3. 从 babel.postgresql.org 下载相应分支的“qualified list”。
    4. 运行“.../admin/cp-po -L qualified-list-xxx.txt -g .../messages .../postgresql”。
       这将在 postgresql 存储库中创建一个提交。
    5. 推送所有内容。


对于主要版本发布
==================
（除了上述步骤）


* Release notes
	o use src/tools/git_changelog
	o retain the relevant commits
		o  new features and options
		o  major performance improvements
		o  bug fixes for serious or common bugs
		o  incompatibilities and significant user-visible changes
		o  major source code changes
	o update TODO list, http://wiki.postgresql.org/wiki/Todo
		o  verify items marked as completed are completed
		o  mark additional items as completed
		o  remove completed items
	o group items into categories
	o select incompatibilities
	o add documentation links for items
	o select major features

* Documentation
	o document all new features
	o update help output from inside the programs
	o doc/src/sgml/ref manual pages
	o update the sizes specified for installation requirements
	  (doc/src/sgml/installation.sgml, section "install-requirements")
	o update the shared memory size requirement table
	  (doc/src/sgml/runtime.sgml, section "shared-memory-parameters")

* Ports
	o update config.guess and config.sub at the start of beta
	  (from http://savannah.gnu.org/projects/config)
	o update ports list in doc/src/sgml/installation.sgml
	o update platform-specific FAQ's, if needed

* Update inet/cidr data types with newest Bind patches


Starting a New Development Cycle
================================

* Typically, we do pgindent and perltidy runs just before branching

* Create a branch in git for maintenance of the previous release
	o on master branch, do:
		git pull           # be sure you have the latest "master"
		git push origin master:refs/heads/"new-branch-name"
	  for example,
		git push origin master:refs/heads/REL_10_STABLE

* Add new branch's name to list in src/tools/git_changelog

* Increment the major version number in src/tools/version_stamp.pl

* Run "src/tools/version_stamp.pl devel", then run autoconf


Creating Back-Branch Release Notes
==================================

* Run src/tools/git_changelog to generate a list of relevant commits.
  You can also run 'git log' in each branch.  Be sure to use the --since
  branch tag and not the release date, as commits could have been done
  between branch stamping and the release date.

* On the git master branch, edit and create SGML markup for the most recent
  branch in that branch's release-N.N.sgml file.  Minor release notes
  should include more small change details because testing is limited.

* Copy this into older branches' release-N.N.sgml files, then remove
  items that do not apply based on commit logs for that branch.

* Add any older branch commits not in the newest branch.  This can be
  accomplished by diff'ing the newest and older branch commit logs and
  looking for lines that only appear in the older branch, e.g.:

       diff commit-N.N.log commit-O.O.log | grep '^>'

* Copy the appropriate release-N.N.sgml files into each back branch SGML
  directory.



---------------------------------------------------------------------------

                       Library Version Changes
                       =======================

Major Version
=============

The major version number should be updated whenever the source of the
library changes to make it binary incompatible. Such changes include,
but are not limited to:

1. Removing a public function or structure (or typedef, enum, ...)

2. Modifying a public functions arguments.

3. Removing a field from a public structure.

4. Adding a field to a public structure, unless steps have been
previously taken to shield users from such a change, for example by
such structures only ever being allocated/instantiated by a library
function which would give the new field a suitable default value.

Adding a new function should NOT force an increase in the major version
number. (Packagers will see the standard minor number update and install
the new library.)  When the major version is increased all applications
which link to the library MUST be recompiled - this is not desirable.

Minor Version
=============

The minor version number should be updated whenever the functionality of
the library has changed, typically a change in source code between releases
would mean an increase in the minor version number so long as it does not
require a major version increase.

Given that we make at least some changes to our libraries in every major
PostgreSQL version, we always bump all minor library version numbers in
each development cycle as a matter of policy.  This is currently mechanized
by referencing the MAJORVERSION make macro in the value of SO_MINOR_VERSION
for each shared library.  As of v10, SO_MINOR_VERSION is simply equal to
MAJORVERSION in all cases.  If we ever make an incompatible break in a
library's API, forcing a major version bump, we could continue to increase
SO_MINOR_VERSION (thus, perhaps, going from libpq.so.5.12 to libpq.so.6.13),
or we could reset SO_MINOR_VERSION to zero, using makefile code along the
lines of
	SO_MINOR_VERSION= $(shell expr $(MAJORVERSION) - 13)
so that the number continues to increase automatically in later branches.
For now, that complication is not necessary.

Minimizing Changes
==================

When modifying public functions arguments, steps should be taken to
maintain binary compatibility across minor PostgreSQL releases (e.g. the
7.2 series, the 7.3 series, the 7.4/8.0 series). Consider the following
function:

	void print_stuff(int arg1, int arg2)
	{
	    printf("stuff: %d %d\n", arg1, arg2);
	}

If we wanted to add a third argument:

	void print_stuff(int arg1, int arg2, int arg3)
	{
	    printf("stuff: %d %d %d\n", arg1, arg2, arg3);
	}

Then doing it like this:

	void print_stuff2(int arg1, int arg2, int arg3)
	{
	    printf("stuff: %d %d %d\n", arg1, arg2, arg3);
	}

	void print_stuff(int arg1, int arg2)
	{
	    print_stuff2(arg1, arg2, 0);
	}

would maintain binary compatibility. Obviously this would add a fair
bit of cruft if used extensively, but considering the changes between
minor versions would probably be worthwhile to avoid bumping library
major version. Naturally in the next major version print_stuff() would
assume the functionality and arguments of print_stuff2().


Lee Kindness
