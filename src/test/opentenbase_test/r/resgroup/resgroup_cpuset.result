CREATE LANGUAGE plpython3u;
CREATE LANGUAGE
create default node group default_group with ("dn1", "dn2");
CREATE NODE GROUP
create sharding group to group default_group;
CREATE SHARDING GROUP
clean sharding;
CLEAN SHARDING
-- added by opentenbase. there is no session info in the output of ps on opentenbase. so we changed check_cpuset and other related
-- functions. we use a special database name to distinguish the processes.
-- check whether the queries running on the specific core set
-- @param grp: the resource group name queries running in
-- @param cpuset: cpu cores which the queries should only be run on them, e.g. 0,1
-- @return bool: true/false indicating whether it corresponds to the rule
CREATE  OR REPLACE FUNCTION check_cpuset(cpuset TEXT) RETURNS BOOL AS $$
    import subprocess
    import time
    def check(expect_cpus):
        procs = subprocess.check_output(['ps', '-eLF']).decode().split('\n')
        head, proc_stats = procs[0], procs[1:]
        PSR = [id for id, attr in enumerate(head.split()) if attr.strip() == 'PSR'][0]
        cpus = [proc_stat.split()[PSR].strip() for proc_stat in proc_stats if 'postgres' in proc_stat and
                'cpuset_db' in proc_stat and 'idle' not in proc_stat and
                ('SELECT' in proc_stat or 'DProcess' in proc_stat)]
        ret = set(cpus).issubset(set(expect_cpus))
        if not ret:
            filtered = [proc_stat for proc_stat in proc_stats if 'postgres' in proc_stat and
                'cpuset_db' in proc_stat and 'idle' not in proc_stat]
            for p in filtered:
                plpy.warning(p)
        return ret
    conf = cpuset
    if conf == '':
        fd = open("/sys/fs/cgroup/cpuset/opentenbase/cpuset.cpus")
        line = fd.readline()
        fd.close()
        conf = line.strip('\n')
    tokens = conf.split(",")
    expect_cpu = []
    for token in tokens:
        if token.find('-') != -1:
            interval = token.split("-")
            num1 = interval[0]
            num2 = interval[1]
            for num in range(int(num1), int(num2) + 1):
                expect_cpu.append(str(num))
        else:
            expect_cpu.append(token)
    for i in range(1000):
        time.sleep(0.01)
        if not check(expect_cpu):
            return False
    return True
$$ LANGUAGE plpython3u;
CREATE FUNCTION
CREATE VIEW cancel_all AS
    SELECT pg_cancel_backend(pid)
    FROM pg_stat_activity
    WHERE query LIKE 'SELECT * FROM busy%';
CREATE VIEW
create database cpuset_db;
CREATE DATABASE
\c cpuset_db
--?You are now connected to database .*
DROP VIEW IF EXISTS busy;
DROP VIEW
NOTICE:  (00000) view "busy" does not exist, skipping
DROP TABLE IF EXISTS bigtable;
DROP TABLE
NOTICE:  (00000) table "bigtable" does not exist, skipping
CREATE TABLE bigtable AS
    SELECT i AS c1, 'abc' AS c2
    FROM generate_series(1,50000) i;
INSERT 0 50000
CREATE VIEW busy AS
    SELECT count(*)
    FROM
    bigtable t1,
    bigtable t2,
    bigtable t3,
    bigtable t4,
    bigtable t5
    WHERE 0 = (t1.c1 % 2 + 10000)!
      AND 0 = (t2.c1 % 2 + 10000)!
      AND 0 = (t3.c1 % 2 + 10000)!
      AND 0 = (t4.c1 % 2 + 10000)!
      AND 0 = (t5.c1 % 2 + 10000)!
    ;
CREATE VIEW
-- The test cases for the value of resource_group_cpu_limit equals 0.9, 
-- do not change it during the test.
show resource_group_cpu_limit;
 resource_group_cpu_limit 
--------------------------
 0.9
(1 row)

CREATE RESOURCE GROUP rg1_cpuset_test WITH cpuset '0';
CREATE RESOURCE GROUP
CREATE ROLE role1_cpuset_test RESOURCE GROUP rg1_cpuset_test;
CREATE ROLE
GRANT ALL ON busy TO role1_cpuset_test;
GRANT
\c postgres
--?You are now connected to database .*
\c cpuset_db
--?You are now connected to database .*
-- we suppose core 0 & 1 are available
SET ROLE TO role1_cpuset_test;
SET
 SELECT * FROM busy;
SELECT check_cpuset('0');
 check_cpuset 
--------------
 t
(1 row)

ALTER RESOURCE GROUP rg1_cpuset_test SET cpuset '1';
ALTER RESOURCE GROUP
select pg_sleep(2);
 pg_sleep 
----------
 
(1 row)

SELECT check_cpuset('1');
 check_cpuset 
--------------
 t
(1 row)

ALTER RESOURCE GROUP rg1_cpuset_test SET cpuset '0,1';
ALTER RESOURCE GROUP
select pg_sleep(2);
 pg_sleep 
----------
 
(1 row)

SELECT check_cpuset('0,1');
 check_cpuset 
--------------
 t
(1 row)

alter RESOURCE GROUP admin_group set cpu_rate_limit 1;
ALTER RESOURCE GROUP
alter RESOURCE GROUP default_group set cpu_rate_limit 1;
ALTER RESOURCE GROUP
-- change to cpu_rate_limit while the transaction is running
ALTER RESOURCE GROUP rg1_cpuset_test SET cpu_rate_limit 70;
ALTER RESOURCE GROUP
-- cancel the transaction
select * from cancel_all;
 pg_cancel_backend 
-------------------
 t
(1 row)

ERROR:  (57014) canceling statement due to user request
\c cpuset_db
--?You are now connected to database .*
-- test whether the cpu_rate_limit had taken effect
SET ROLE TO role1_cpuset_test;
SET
 SELECT * FROM busy;
SELECT check_cpuset('');
 check_cpuset 
--------------
 t
(1 row)

-- cancel the transaction
select * from cancel_all;
 pg_cancel_backend 
-------------------
 t
(1 row)

ERROR:  (57014) canceling statement due to user request
\c cpuset_db
--?You are now connected to database .*
-- test whether the cpu_rate_limit had taken effect
SET ROLE TO role1_cpuset_test;
SET
 SELECT * FROM busy;
select max(cpu_usage)::float >= 65 * 0.9 from (
     select groupname,(json_each(xx)).key as nodename, ((json_each(xx)).value)::text::float cpu_usage from (
        SELECT groupname,(json_array_elements(cpu_usage))  as xx FROM pg_resgroup_get_status(null)  ));
 ?column? 
----------
 t
(1 row)

-- cancel the transaction
select * from cancel_all;
 pg_cancel_backend 
-------------------
 t
(1 row)

ERROR:  (57014) canceling statement due to user request
-- check whether the cpuset value in cgroup is valid according to the rule
CREATE OR REPLACE FUNCTION check_cpuset_rules() RETURNS BOOL AS $$
    def get_all_group_which_cpuset_is_set():
        sql = "select groupname,cpuset from pg_resgroup_config where cpuset != '-1'"
        result = plpy.execute(sql)
        return result
    def parse_cpuset(line):
        line = line.strip('\n')
        if len(line) == 0:
            return set([])
        tokens = line.split(",")
        cpuset = []
        for token in tokens:
            if token.find('-') != -1:
                interval = token.split("-")
                num1 = interval[0]
                num2 = interval[1]
                for num in range(int(num1), int(num2) + 1):
                    cpuset.append(str(num))
            else:
                cpuset.append(token)
        return set(cpuset)
    def get_cgroup_cpuset(group):
        if group == '':
            file = "/sys/fs/cgroup/cpuset/opentenbase/cpuset.cpus"
        else:
            file = "/sys/fs/cgroup/cpuset/opentenbase/" + group + "/cpuset.cpus"
        fd = open(file)
        line = fd.readline()
        fd.close()
        return parse_cpuset(line)
    config_groups = get_all_group_which_cpuset_is_set()
    groups_cpuset = set([])
    for config_group in config_groups:
        groupname = config_group['groupname']
        cpuset_value = config_group['cpuset']
        config_cpuset = parse_cpuset(cpuset_value)
        cgroup_cpuset = get_cgroup_cpuset(groupname)
        if len(groups_cpuset & cgroup_cpuset) > 0:
            return False
        groups_cpuset |= cgroup_cpuset
        if not (config_cpuset.issubset(cgroup_cpuset) and cgroup_cpuset.issubset(config_cpuset)):
            return False
    default_cpuset = get_cgroup_cpuset('default_group')
    all_cpuset = get_cgroup_cpuset('')
    if not (default_cpuset | groups_cpuset).issubset(all_cpuset):
        return False
    if not all_cpuset.issubset(default_cpuset | groups_cpuset):
        return False
    return True
$$ LANGUAGE plpython3u;
CREATE FUNCTION
-- positive: cgroup cpuset must correspond to config cpuset
-- default group value must be valid
-- suppose the cores numbered 0 & 1 are available
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t
(1 row)

CREATE RESOURCE GROUP rg1_test_group WITH cpuset '0';
CREATE RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t
(1 row)

CREATE RESOURCE GROUP rg2_test_group WITH cpuset '1';
CREATE RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t
(1 row)

ALTER RESOURCE GROUP rg1_test_group SET cpu_rate_limit 1;
ALTER RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t
(1 row)

ALTER RESOURCE GROUP rg1_test_group SET cpuset '0';
ALTER RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t
(1 row)

ALTER RESOURCE GROUP rg1_test_group SET cpu_rate_limit 1;
ALTER RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t
(1 row)

DROP RESOURCE GROUP rg1_test_group;
DROP RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t
(1 row)

DROP RESOURCE GROUP rg2_test_group;
DROP RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t
(1 row)

-- positive: create a resource group contains all cpu core
-- the minimum numbered core left in default cpuset group
CREATE RESOURCE GROUP rg1_test_group WITH cpuset '0-15';
CREATE RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t
(1 row)

DROP RESOURCE GROUP rg1_test_group;
DROP RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t
(1 row)

select groupname, concurrency, cpu_rate_limit, memory_limit, cpuset  from pg_resgroup_config;
    groupname    | concurrency | cpu_rate_limit | memory_limit | cpuset 
-----------------+-------------+----------------+--------------+--------
 default_group   | 20          | 1              | -1           | -1
 admin_group     | 10          | 1              | -1           | -1
 rg1_cpuset_test | 20          | 70             | -1           | -1
(3 rows)

-- negative: simulate DDL fail
-- create fail
set opentenbase_test_flag = 'create_resource_group_fail';
SET
CREATE RESOURCE GROUP rg1_test_group WITH cpuset '0';
ERROR:  (XX000) hit stub on create_resource_group_fail
set opentenbase_test_flag = '-create_resource_group_fail';
SET
SELECT groupid, groupname, cpuset
	FROM pg_resgroup_config
	WHERE cpuset != '-1';
 groupid | groupname | cpuset 
---------+-----------+--------
(0 rows)

SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t
(1 row)

DROP RESOURCE GROUP rg1_test_group;
ERROR:  (42704) resource group "rg1_test_group" does not exist
