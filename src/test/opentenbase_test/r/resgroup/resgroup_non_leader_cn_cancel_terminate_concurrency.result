create default node group default_group with ("dn1", "dn2");
CREATE NODE GROUP
create sharding group to group default_group;
CREATE SHARDING GROUP
clean sharding;
CLEAN SHARDING
create table t(a int, b int);
CREATE TABLE
grant all on t to public;
GRANT
-- test1: cancel a query that is waiting for a slot
DROP ROLE IF EXISTS role_concurrency_test;
DROP ROLE
NOTICE:  (00000) role "role_concurrency_test" does not exist, skipping
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  (42704) resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE OR REPLACE VIEW rg_concurrency_view AS
  SELECT wait_event_type IS NOT NULL as waiting, wait_event_type, state, query, rsgname
  FROM pg_stat_activity
  WHERE rsgname='rg_concurrency_test'
  order by wait_event_type;
CREATE VIEW
CREATE RESOURCE GROUP rg_concurrency_test WITH concurrency 1 cpu_rate_limit 20;
CREATE RESOURCE GROUP
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE ROLE
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn1';
SET
 select count(*) from t;
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn2';
SET
 select count(*) from t;
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn3';
SET
 select count(*) from t;
SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state  |          query          |       rsgname       
---------+-----------------+--------+-------------------------+---------------------
 t       | ResourceGroup   | active | select count(*) from t; | rg_concurrency_test
 t       | ResourceGroup   | active | select count(*) from t; | rg_concurrency_test
 f       |                 | active | select count(*) from t; | rg_concurrency_test
(3 rows)

SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE wait_event_type='ResourceGroup' AND rsgname='rg_concurrency_test';
 pg_cancel_backend 
-------------------
 t
 t
(2 rows)

 count 
-------
     0
(1 row)

ERROR:  (57014) canceling statement due to user request
ERROR:  (57014) canceling statement due to user request
SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state | query | rsgname 
---------+-----------------+-------+-------+---------
(0 rows)

DROP ROLE role_concurrency_test;
DROP ROLE
DROP RESOURCE GROUP rg_concurrency_test;
DROP RESOURCE GROUP
-- test2: terminate a query that is waiting for a slot
DROP ROLE IF EXISTS role_concurrency_test;
DROP ROLE
NOTICE:  (00000) role "role_concurrency_test" does not exist, skipping
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  (42704) resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH concurrency 1 cpu_rate_limit 20;
CREATE RESOURCE GROUP
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE ROLE
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn1';
SET
 select count(*) from t;
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn2';
SET
 select count(*) from t;
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn3';
SET
 select count(*) from t;
SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state  |          query          |       rsgname       
---------+-----------------+--------+-------------------------+---------------------
 t       | ResourceGroup   | active | select count(*) from t; | rg_concurrency_test
 t       | ResourceGroup   | active | select count(*) from t; | rg_concurrency_test
 f       |                 | active | select count(*) from t; | rg_concurrency_test
(3 rows)

SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE wait_event_type='ResourceGroup' AND rsgname='rg_concurrency_test';
 pg_terminate_backend 
----------------------
 t
 t
(2 rows)

 count 
-------
     0
(1 row)

FATAL:  (57P01) terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
connection to server was lost
FATAL:  (57P01) terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
connection to server was lost
SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state | query | rsgname 
---------+-----------------+-------+-------+---------
(0 rows)

DROP ROLE role_concurrency_test;
DROP ROLE
DROP RESOURCE GROUP rg_concurrency_test;
DROP RESOURCE GROUP
-- test3: cancel a query that is running
DROP ROLE IF EXISTS role_concurrency_test;
DROP ROLE
NOTICE:  (00000) role "role_concurrency_test" does not exist, skipping
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  (42704) resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH concurrency 2 cpu_rate_limit 20;
CREATE RESOURCE GROUP
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE ROLE
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn1';
SET
 select count(*) from t;
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn2';
SET
 select count(*) from t;
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn6';
SET
 select count(*) from t;
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn7';
SET
 select count(*) from t;
SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state  |          query          |       rsgname       
---------+-----------------+--------+-------------------------+---------------------
 t       | ResourceGroup   | active | select count(*) from t; | rg_concurrency_test
 t       | ResourceGroup   | active | select count(*) from t; | rg_concurrency_test
 f       |                 | active | select count(*) from t; | rg_concurrency_test
 f       |                 | active | select count(*) from t; | rg_concurrency_test
(4 rows)

SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE wait_event_type is null AND rsgname='rg_concurrency_test';
 pg_cancel_backend 
-------------------
 t
 t
(2 rows)

ERROR:  (57014) canceling statement due to user request
ERROR:  (57014) canceling statement due to user request
SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state  |          query          |       rsgname       
---------+-----------------+--------+-------------------------+---------------------
 f       |                 | active | select count(*) from t; | rg_concurrency_test
 f       |                 | active | select count(*) from t; | rg_concurrency_test
(2 rows)

 count 
-------
     0
(1 row)

 count 
-------
     0
(1 row)

SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state | query | rsgname 
---------+-----------------+-------+-------+---------
(0 rows)

DROP ROLE role_concurrency_test;
DROP ROLE
DROP RESOURCE GROUP rg_concurrency_test;
DROP RESOURCE GROUP
-- test4: terminate a query that is running
DROP ROLE IF EXISTS role_concurrency_test;
DROP ROLE
NOTICE:  (00000) role "role_concurrency_test" does not exist, skipping
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  (42704) resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH concurrency 2 cpu_rate_limit 20;
CREATE RESOURCE GROUP
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE ROLE
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn1';
SET
 select count(*) from t;
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn2';
SET
 select count(*) from t;
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn6';
SET
 select count(*) from t;
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn7';
SET
 select count(*) from t;
SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state  |          query          |       rsgname       
---------+-----------------+--------+-------------------------+---------------------
 t       | ResourceGroup   | active | select count(*) from t; | rg_concurrency_test
 t       | ResourceGroup   | active | select count(*) from t; | rg_concurrency_test
 f       |                 | active | select count(*) from t; | rg_concurrency_test
 f       |                 | active | select count(*) from t; | rg_concurrency_test
(4 rows)

SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE wait_event_type is null AND rsgname='rg_concurrency_test';
 pg_terminate_backend 
----------------------
 t
 t
(2 rows)

FATAL:  (57P01) terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
connection to server was lost
FATAL:  (57P01) terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
connection to server was lost
SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state  |          query          |       rsgname       
---------+-----------------+--------+-------------------------+---------------------
 f       |                 | active | select count(*) from t; | rg_concurrency_test
 f       |                 | active | select count(*) from t; | rg_concurrency_test
(2 rows)

 count 
-------
     0
(1 row)

 count 
-------
     0
(1 row)

SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state | query | rsgname 
---------+-----------------+-------+-------+---------
(0 rows)

DROP ROLE role_concurrency_test;
DROP ROLE
DROP RESOURCE GROUP rg_concurrency_test;
DROP RESOURCE GROUP
-- test5: terminate a query waiting for a slot, that opens a transaction on exit callback
DROP ROLE IF EXISTS role_concurrency_test;
DROP ROLE
NOTICE:  (00000) role "role_concurrency_test" does not exist, skipping
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  (42704) resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH concurrency 1 cpu_rate_limit 20;
CREATE RESOURCE GROUP
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE ROLE
SET ROLE role_concurrency_test;
SET
CREATE TEMP TABLE tmp(a INT);
CREATE TABLE
SET ROLE role_concurrency_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn2';
SET
 select count(*) from t;
set opentenbase_test_flag='suspend_after_resgroup_assignedconn1';
SET
 select count(*) from t;
SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state  |          query          |       rsgname       
---------+-----------------+--------+-------------------------+---------------------
 t       | ResourceGroup   | active | select count(*) from t; | rg_concurrency_test
 f       |                 | active | select count(*) from t; | rg_concurrency_test
(2 rows)

-- Upon receiving the terminate request, session 1 should start a new transaction to cleanup temp table.
-- Note, that session 1 has already been waiting for resource group slot, its new transaction will bypass
-- resource group since it's exiting.
SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE wait_event_type='ResourceGroup' AND rsgname='rg_concurrency_test';
 pg_terminate_backend 
----------------------
 t
(1 row)

FATAL:  (57P01) terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
connection to server was lost
 count 
-------
     0
(1 row)

SELECT * FROM rg_concurrency_view;
 waiting | wait_event_type | state | query | rsgname 
---------+-----------------+-------+-------+---------
(0 rows)
