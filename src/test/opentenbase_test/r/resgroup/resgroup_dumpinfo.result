create default node group default_group with ("dn1", "dn2");
CREATE NODE GROUP
create sharding group to group default_group;
CREATE SHARDING GROUP
clean sharding;
CLEAN SHARDING
create table t(a int, b int);
CREATE TABLE
grant all on t to public;
GRANT
select node_name, node_id from pgxc_node order by node_name;
 node_name |   node_id   
-----------+-------------
 cn1       | -1178713634
 dn1       |  -560021589
 dn2       |   352366662
 gtm       |   428125959
(4 rows)

DROP ROLE IF EXISTS role_dumpinfo_test;
DROP ROLE
NOTICE:  (00000) role "role_dumpinfo_test" does not exist, skipping
DROP ROLE IF EXISTS role_permission;
DROP ROLE
NOTICE:  (00000) role "role_permission" does not exist, skipping
-- start_ignore
DROP RESOURCE GROUP rg_dumpinfo_test;
ERROR:  (42704) resource group "rg_dumpinfo_test" does not exist
CREATE LANGUAGE plpython3u;
CREATE LANGUAGE
-- end_ignore
CREATE FUNCTION dump_test_check() RETURNS bool
as $$
import json
import time
nodenum = 3
def validate(json_obj):
   array = json_obj.get("info")
   if len(array) != nodenum:
      return False
   cn_info = array[0]
   keys = ["nodename", "loaded", "groups"]
   for key in keys:
       if key not in cn_info:
           return False
   groups = [g for g in cn_info["groups"] if g["group_id"] > 16384]
   if len(groups) != 1:
      return False
   group = groups[0]
   keys = ["group_id", "nRunning", "locked_for_drop"]
   for key in keys:
      if key not in group:
         return False
   wait_queue = group["wait_queue"]
   if wait_queue["wait_queue_size"] != 1:
      return False
   nrunning = group["nRunning"]
   if nrunning != 2:
      return False
   return True
r = plpy.execute("select value from pg_resgroup_get_status_kv('dump');")
json_text =  r[0]['value']
json_obj = json.loads(json_text)
if not validate(json_obj):
   return False
return validate(json_obj)
$$ LANGUAGE plpython3u;
CREATE FUNCTION
CREATE RESOURCE GROUP rg_dumpinfo_test WITH concurrency 2 cpu_rate_limit 20;
CREATE RESOURCE GROUP
CREATE ROLE role_dumpinfo_test RESOURCE GROUP rg_dumpinfo_test;
CREATE ROLE
SET ROLE role_dumpinfo_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn2';
SET
 select count(*) from t;
SET ROLE role_dumpinfo_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn3';
SET
 select count(*) from t;
SET ROLE role_dumpinfo_test;
SET
set opentenbase_test_flag='suspend_after_resgroup_assignedconn4';
SET
 select count(*) from t;
SELECT dump_test_check();
 dump_test_check 
-----------------
 t
(1 row)

 count 
-------
     0
(1 row)

 count 
-------
     0
(1 row)

 count 
-------
     0
(1 row)

CREATE ROLE role_permission;
CREATE ROLE
NOTICE:  (00000) resource group not specified, using default resource group "default_group"
SET ROLE role_permission;
SET
select value from pg_resgroup_get_status_kv('dump');
ERROR:  (42501) only superusers can call this function
RESET ROLE;
RESET
-- Now 'dump' is the only value at which the function outputs tuples, but the
-- function must correctly handle any value
SELECT count(*) FROM pg_resgroup_get_status_kv('not_dump');
 count 
-------
     0
(1 row)

SELECT count(*) FROM pg_resgroup_get_status_kv(NULL);
 count 
-------
     0
(1 row)

DROP ROLE role_dumpinfo_test;
DROP ROLE
DROP ROLE role_permission;
DROP ROLE
DROP RESOURCE GROUP rg_dumpinfo_test;
DROP RESOURCE GROUP
DROP LANGUAGE plpython3u CASCADE;
DROP LANGUAGE
NOTICE:  (00000) drop cascades to function dump_test_check()
