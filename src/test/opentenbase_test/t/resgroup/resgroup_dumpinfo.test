%cn 1
%cn_slave 0
%dn 2
%dn_slave 0
%gtm 1
%gtm_slave 0

connect conn cn1
connection conn


create default node group default_group with ("dn1", "dn2");
create sharding group to group default_group;
clean sharding;
create table t(a int, b int);
grant all on t to public;


select node_name, node_id from pgxc_node order by node_name;

DROP ROLE IF EXISTS role_dumpinfo_test;
DROP ROLE IF EXISTS role_permission;
-- start_ignore
DROP RESOURCE GROUP rg_dumpinfo_test;
CREATE LANGUAGE plpython3u;
-- end_ignore

CREATE FUNCTION dump_test_check() RETURNS bool
as $$
import json
import time

# 1c 2d
nodenum = 3

def validate(json_obj):
   array = json_obj.get("info")
   if len(array) != nodenum:
      return False
   cn_info = array[0]
   #validate keys
   keys = ["nodename", "loaded", "groups"]
   for key in keys:
       if key not in cn_info:
           return False

   groups = [g for g in cn_info["groups"] if g["group_id"] > 16384]
   #validate user created group
   if len(groups) != 1:
      return False
   group = groups[0]
   #validate group keys
   keys = ["group_id", "nRunning", "locked_for_drop"]
   for key in keys:
      if key not in group:
         return False

   #validate waitqueue
   wait_queue = group["wait_queue"]
   if wait_queue["wait_queue_size"] != 1:
      return False
   #validate nrunning
   nrunning = group["nRunning"]
   if nrunning != 2:
      return False

   return True

# The pg_resgroup_get_status_kv() function must output valid result in CTAS
# and simple select queries

r = plpy.execute("select value from pg_resgroup_get_status_kv('dump');")
json_text =  r[0]['value']
json_obj = json.loads(json_text)
if not validate(json_obj):
   return False

#plpy.execute("""CREATE TEMPORARY TABLE t_pg_resgroup_get_status_kv AS
#              SELECT * FROM pg_resgroup_get_status_kv('dump');""")
#r = plpy.execute("SELECT value FROM t_pg_resgroup_get_status_kv;")
#json_text = r[0]['value']
#json_obj = json.loads(json_text)

return validate(json_obj)

$$ LANGUAGE plpython3u;

CREATE RESOURCE GROUP rg_dumpinfo_test WITH concurrency 2 cpu_rate_limit 20;
CREATE ROLE role_dumpinfo_test RESOURCE GROUP rg_dumpinfo_test;

connect conn2 cn1
connection conn2
SET ROLE role_dumpinfo_test;
set opentenbase_test_flag='suspend_after_resgroup_assignedconn2';
sendblock select count(*) from t;

connect conn3 cn1
connection conn3
SET ROLE role_dumpinfo_test;
set opentenbase_test_flag='suspend_after_resgroup_assignedconn3';
sendblock select count(*) from t;

connect conn4 cn1
connection conn4
SET ROLE role_dumpinfo_test;
set opentenbase_test_flag='suspend_after_resgroup_assignedconn4';
sendblock select count(*) from t;

connection conn
SELECT dump_test_check();

execute_shell_cmd rm /tmp/suspend_after_resgroup_assignedconn2
execute_shell_cmd rm /tmp/suspend_after_resgroup_assignedconn3
reap conn2
reap conn3

sleep 3

execute_shell_cmd rm /tmp/suspend_after_resgroup_assignedconn4
reap conn4

disconnect conn2
disconnect conn3
disconnect conn4

connection conn

CREATE ROLE role_permission;
SET ROLE role_permission;
select value from pg_resgroup_get_status_kv('dump');

RESET ROLE;

-- Now 'dump' is the only value at which the function outputs tuples, but the
-- function must correctly handle any value
SELECT count(*) FROM pg_resgroup_get_status_kv('not_dump');
SELECT count(*) FROM pg_resgroup_get_status_kv(NULL);

DROP ROLE role_dumpinfo_test;
DROP ROLE role_permission;
DROP RESOURCE GROUP rg_dumpinfo_test;
DROP LANGUAGE plpython3u CASCADE;
