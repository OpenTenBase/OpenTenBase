%cn 2
%cn_slave 0
%dn 2
%dn_slave 0
%gtm 1
%gtm_slave 0

connect conn cn2
connection conn

CREATE LANGUAGE plpython3u;

show resource_group_cpu_ceiling_enforcement;

create default node group default_group with ("dn1", "dn2");
create sharding group to group default_group;
clean sharding;


CREATE TABLE bigtable AS
    SELECT i AS c1, 'abc' AS c2
    FROM generate_series(1,50000) i;

CREATE OR REPLACE FUNCTION complex_compute(i int)
RETURNS int AS $$
    results = 1
    for j in range(1, 10000 + i):
        results = (results * j) % 35969
    return results
$$ LANGUAGE plpython3u;

CREATE VIEW busy AS
    WITH t1 as (select random(), complex_compute(c1) from bigtable),
    t2 as (select random(), complex_compute(c1) from bigtable),
    t3 as (select random(), complex_compute(c1) from bigtable),
    t4 as (select random(), complex_compute(c1) from bigtable),
    t5 as (select random(), complex_compute(c1) from bigtable)
    SELECT count(*)
    FROM
    t1, t2, t3, t4, t5;


CREATE VIEW cancel_all AS
    select distinct(ret) from (SELECT pg_cancel_backend(pid) ret
    FROM pg_stat_activity
    WHERE query LIKE 'SELECT * FROM busy%');

CREATE TABLE cpu_usage_samples (groupname varchar(64), nodename varchar(64), cpu_usage float);

CREATE OR REPLACE FUNCTION fetch_sample() RETURNS BOOL AS $$
    import json

    group_cpus = plpy.execute("select groupname,(json_each(xx)).key as nodename, ((json_each(xx)).value)::text::float  from (" +
            "SELECT groupname,(json_array_elements(cpu_usage))  as xx FROM pg_resgroup_get_status(null));")

    for r in group_cpus:
        sql = "insert into cpu_usage_samples values ('" + r['groupname'] + "', '" + r['nodename'] + "', " + str(r['value']) +")"
        plpy.execute(sql);

    return True
$$ LANGUAGE plpython3u;

CREATE OR REPLACE FUNCTION verify_cpu_usage(groupname TEXT, expect_cpu_usage INT, err_rate INT)
RETURNS BOOL AS $$
    sql = "select avg(cpu_usage) result from cpu_usage_samples where groupname ='" + groupname + "'";
    all_info = plpy.execute(sql)

    usage = float(all_info[0]['result'])

    return abs(usage - expect_cpu_usage) <= err_rate
$$ LANGUAGE plpython3u;

CREATE OR REPLACE FUNCTION check_cgroup_configuration() RETURNS BOOL AS $$
    import os

    root = '/sys/fs/cgroup/'

    def get_cgroup_prop(prop):
        fullpath = os.path.join(root, prop)
        return int(open(fullpath).readline())

    def show_guc(guc):
        return plpy.execute('SHOW {}'.format(guc))[0][guc]

    # get top-level cgroup props
    cfs_quota_us = get_cgroup_prop('cpu/opentenbase/cpu.cfs_quota_us')
    cfs_period_us = get_cgroup_prop('cpu/opentenbase/cpu.cfs_period_us')
    shares = get_cgroup_prop('cpu/opentenbase/cpu.shares')

    # plpy.warning('cfs_quota_us {}'.format(cfs_quota_us))
    plpy.warning('cfs_period_us {}'.format(cfs_period_us))
    plpy.warning('shares {}'.format(shares))

    # get system props
    ncores = os.cpu_count()

    # get global gucs
    resource_group_cpu_ceiling_enforcement = str(show_guc('resource_group_cpu_ceiling_enforcement'))
    resource_group_cpu_limit = float(show_guc('resource_group_cpu_limit'))
    resource_group_cpu_priority = int(show_guc('resource_group_cpu_priority'))

    plpy.warning('resource_group_cpu_ceiling_enforcement {}'.format(resource_group_cpu_ceiling_enforcement))
    plpy.warning('resource_group_cpu_limit {}'.format(resource_group_cpu_limit))
    plpy.warning('resource_group_cpu_priority {}'.format(resource_group_cpu_priority))

    if resource_group_cpu_ceiling_enforcement == 'on':
        plpy.warning('cfs_quota_us == cfs_period_us * ncores * resource_group_cpu_limit : {}'.format(cfs_quota_us == cfs_period_us * ncores * resource_group_cpu_limit))
        assert cfs_quota_us == cfs_period_us * ncores * resource_group_cpu_limit
    else:
        plpy.warning('shares == 1024 * resource_group_cpu_priority : {}'.format(shares == 1024 * resource_group_cpu_priority))
        assert shares == 1024 * resource_group_cpu_priority

    def check_group_shares(name):
        cpu_rate_limit = int(plpy.execute('''
                SELECT value
                  FROM pg_resgroupcapability c, pg_resgroup g
                 WHERE c.resgroupid=g.oid
                   AND reslimittype=2
                   AND g.rsgname='{}'
            '''.format(name))[0]['value'])

        sub_cfs_quota_us = get_cgroup_prop('cpu/opentenbase/{}/cpu.cfs_quota_us'.format(name))
        sub_shares = get_cgroup_prop('cpu/opentenbase/{}/cpu.shares'.format(name))

        if resource_group_cpu_ceiling_enforcement == 'on':
            if int(sub_cfs_quota_us) != -1:
                plpy.warning('sub_cfs_quota_us == cfs_period_us * ncores * cpu_rate_limit / 100 : {}'.format(sub_cfs_quota_us == cfs_period_us * ncores * cpu_rate_limit / 100))
                plpy.warning('sub_shares {}'.format(sub_shares))
                assert sub_cfs_quota_us == cfs_period_us * ncores * cpu_rate_limit / 100
        else:
            if int(sub_shares) != -1:
                plpy.warning('sub_shares == int(cpu_rate_limit * 1024 / 10) : {}'.format(sub_shares == int(cpu_rate_limit * 1024 / 10)))
                plpy.warning('sub_cfs_quota_us {}'.format(sub_cfs_quota_us))
                assert sub_shares == int(cpu_rate_limit * 1024 / 10)

    # check default groups
    check_group_shares('default_group')
    check_group_shares('admin_group')

    # check user groups
    check_group_shares('rg1_cpu_test')
    check_group_shares('rg2_cpu_test')

    return True
$$ LANGUAGE plpython3u;

-- The test cases for the value of resource_group_cpu_limit equals 0.9, 
-- do not change it during the test.
show resource_group_cpu_limit;

-- lower admin_group's cpu_rate_limit to minimize its side effect
ALTER RESOURCE GROUP admin_group SET cpu_rate_limit 1;

-- lower default_group's cpu_rate_limit to minimize its side effect
ALTER RESOURCE GROUP default_group SET cpu_rate_limit 1;

CREATE RESOURCE GROUP rg1_cpu_test WITH concurrency 20 cpu_rate_limit 10;
CREATE RESOURCE GROUP rg2_cpu_test WITH concurrency 20 cpu_rate_limit 20;

select check_cgroup_configuration();
select groupname, concurrency, cpu_rate_limit, memory_limit, cpuset  from pg_resgroup_config;

-- create two roles and assign them to above groups
CREATE ROLE role1_cpu_test RESOURCE GROUP rg1_cpu_test;
CREATE ROLE role2_cpu_test RESOURCE GROUP rg2_cpu_test;
GRANT ALL ON FUNCTION complex_compute(int) TO role1_cpu_test;
GRANT ALL ON FUNCTION complex_compute(int) TO role2_cpu_test;
GRANT ALL ON busy TO role1_cpu_test;
GRANT ALL ON busy TO role2_cpu_test;


connect conn11 cn2
connection conn11
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn12 cn2
connection conn12
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn13 cn2
connection conn13
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn14 cn2
connection conn14
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn15 cn2
connection conn15
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn16 cn2
connection conn16
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn17 cn2
connection conn17
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn18 cn2
connection conn18
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn19 cn2
connection conn19
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn110 cn2
connection conn110
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn111 cn1
connection conn111
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn112 cn1
connection conn112
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn113 cn1
connection conn113
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn114 cn1
connection conn114
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn115 cn1
connection conn115
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connect conn116 cn1
connection conn116
SET ROLE TO role1_cpu_test;
sendblock SELECT * FROM busy;

connection conn

TRUNCATE TABLE cpu_usage_samples;
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT verify_cpu_usage('rg1_cpu_test', 90, 10);

TRUNCATE TABLE cpu_usage_samples;
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT verify_cpu_usage('rg1_cpu_test', 90, 10);





connect conn21 cn2
connection conn21
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn22 cn2
connection conn22
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn23 cn2
connection conn23
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn24 cn2
connection conn24
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn25 cn2
connection conn25
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn26 cn2
connection conn26
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn27 cn2
connection conn27
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn28 cn2
connection conn28
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn29 cn2
connection conn29
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn210 cn2
connection conn210
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn211 cn2
connection conn211
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn212 cn2
connection conn212
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn213 cn2
connection conn213
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn214 cn2
connection conn214
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn215 cn2
connection conn215
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connect conn216 cn2
connection conn216
SET ROLE TO role2_cpu_test;
sendblock SELECT * FROM busy;

connection conn

TRUNCATE TABLE cpu_usage_samples;
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT verify_cpu_usage('rg1_cpu_test', 30, 10);
SELECT verify_cpu_usage('rg2_cpu_test', 60, 10);

TRUNCATE TABLE cpu_usage_samples;
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT pg_sleep(1.7);
SELECT fetch_sample();
SELECT verify_cpu_usage('rg1_cpu_test', 30, 10);
SELECT verify_cpu_usage('rg2_cpu_test', 60, 10);

connection conn
SELECT * FROM cancel_all;

disconnect conn11
disconnect conn12
disconnect conn13
disconnect conn14
disconnect conn15
disconnect conn16
disconnect conn17
disconnect conn18
disconnect conn19
disconnect conn110

disconnect conn21
disconnect conn22
disconnect conn23
disconnect conn24
disconnect conn25
disconnect conn26
disconnect conn27
disconnect conn28
disconnect conn29
disconnect conn210
