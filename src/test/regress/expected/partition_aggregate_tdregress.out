-- =====================================================================
-- Title     : Test partitionwise aggregation on partitioned tables
-- Author    : jameszhlin
-- Date      : 2022-07-14
-- Level     : P0
-- Version   : V5.06.2.1
-- Tag		 : 
-- Status	 : Ready
-- =====================================================================
-- Enable partitionwise join, which by default is disabled.
SET enable_partitionwise_join TO true;
-- Disable parallel plans.
SET max_parallel_workers_per_gather TO 0;
set default_locator_type=shard;
--
-- Tests for list partitioned tables.
--
drop table if exists pagg_tab_20220701 cascade;
NOTICE:  table "pagg_tab_20220701" does not exist, skipping
CREATE TABLE pagg_tab_20220701 (a int, b int, c text, d int) PARTITION BY LIST(c);
CREATE TABLE pagg_tab_20220701_p1 PARTITION OF pagg_tab_20220701 FOR VALUES IN ('0000', '0001', '0002', '0003', '0004');
CREATE TABLE pagg_tab_20220701_p2 PARTITION OF pagg_tab_20220701 FOR VALUES IN ('0005', '0006', '0007', '0008');
CREATE TABLE pagg_tab_20220701_p3 PARTITION OF pagg_tab_20220701 FOR VALUES IN ('0009', '0010', '0011');
INSERT INTO pagg_tab_20220701 SELECT i % 20, i % 30, to_char(i % 12, 'FM0000'), i % 30 FROM generate_series(0, 2999) i;
ANALYZE pagg_tab_20220701;
-- When GROUP BY clause matches; full aggregation is performed for each partition.
EXPLAIN (COSTS OFF, nodes off)
SELECT c, sum(a), avg(b), count(*), min(a), max(b) FROM pagg_tab_20220701 GROUP BY c HAVING avg(d) < 15 ORDER BY 1, 2, 3;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_p1.c, (sum(pagg_tab_20220701_p1.a)), (avg(pagg_tab_20220701_p1.b))
   ->  Sort
         Sort Key: pagg_tab_20220701_p1.c, (sum(pagg_tab_20220701_p1.a)), (avg(pagg_tab_20220701_p1.b))
         ->  Finalize HashAggregate
               Group Key: pagg_tab_20220701_p1.c
               Filter: (avg(pagg_tab_20220701_p1.d) < '15'::numeric)
               ->  Remote Subquery Scan on all (datanodes 2)
                     Distribute results by S: c
                     ->  Partial HashAggregate
                           Group Key: pagg_tab_20220701_p1.c
                           ->  Append
                                 ->  Seq Scan on pagg_tab_20220701_p1
                                 ->  Seq Scan on pagg_tab_20220701_p2
                                 ->  Seq Scan on pagg_tab_20220701_p3
(15 rows)

SELECT c, sum(a), avg(b), count(*), min(a), max(b) FROM pagg_tab_20220701 GROUP BY c HAVING avg(d) < 15 ORDER BY 1, 2, 3;
  c   | sum  |         avg         | count | min | max 
------+------+---------------------+-------+-----+-----
 0000 | 2000 | 12.0000000000000000 |   250 |   0 |  24
 0001 | 2250 | 13.0000000000000000 |   250 |   1 |  25
 0002 | 2500 | 14.0000000000000000 |   250 |   2 |  26
 0006 | 2500 | 12.0000000000000000 |   250 |   2 |  24
 0007 | 2750 | 13.0000000000000000 |   250 |   3 |  25
 0008 | 2000 | 14.0000000000000000 |   250 |   0 |  26
(6 rows)

-- When GROUP BY clause does not match; partial aggregation is performed for each partition.
EXPLAIN (COSTS OFF, nodes off)
SELECT a, sum(b), avg(b), count(*), min(a), max(b) FROM pagg_tab_20220701 GROUP BY a HAVING avg(d) < 15 ORDER BY 1, 2, 3;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_p1.a, (sum(pagg_tab_20220701_p1.b)), (avg(pagg_tab_20220701_p1.b))
   ->  Sort
         Sort Key: pagg_tab_20220701_p1.a, (sum(pagg_tab_20220701_p1.b)), (avg(pagg_tab_20220701_p1.b))
         ->  HashAggregate
               Group Key: pagg_tab_20220701_p1.a
               Filter: (avg(pagg_tab_20220701_p1.d) < '15'::numeric)
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_p1
                     ->  Seq Scan on pagg_tab_20220701_p2
                     ->  Seq Scan on pagg_tab_20220701_p3
(11 rows)

SELECT a, sum(b), avg(b), count(*), min(a), max(b) FROM pagg_tab_20220701 GROUP BY a HAVING avg(d) < 15 ORDER BY 1, 2, 3;
 a  | sum  |         avg         | count | min | max 
----+------+---------------------+-------+-----+-----
  0 | 1500 | 10.0000000000000000 |   150 |   0 |  20
  1 | 1650 | 11.0000000000000000 |   150 |   1 |  21
  2 | 1800 | 12.0000000000000000 |   150 |   2 |  22
  3 | 1950 | 13.0000000000000000 |   150 |   3 |  23
  4 | 2100 | 14.0000000000000000 |   150 |   4 |  24
 10 | 1500 | 10.0000000000000000 |   150 |  10 |  20
 11 | 1650 | 11.0000000000000000 |   150 |  11 |  21
 12 | 1800 | 12.0000000000000000 |   150 |  12 |  22
 13 | 1950 | 13.0000000000000000 |   150 |  13 |  23
 14 | 2100 | 14.0000000000000000 |   150 |  14 |  24
(10 rows)

-- Check with multiple columns in GROUP BY
EXPLAIN (COSTS OFF, nodes off)
SELECT a, c, count(*) FROM pagg_tab_20220701 GROUP BY a, c;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Remote Fast Query Execution
   ->  HashAggregate
         Group Key: pagg_tab_20220701_p1.a, pagg_tab_20220701_p1.c
         ->  Append
               ->  Seq Scan on pagg_tab_20220701_p1
               ->  Seq Scan on pagg_tab_20220701_p2
               ->  Seq Scan on pagg_tab_20220701_p3
(7 rows)

-- Check with multiple columns in GROUP BY, order in GROUP BY is reversed
EXPLAIN (COSTS OFF, nodes off)
SELECT a, c, count(*) FROM pagg_tab_20220701 GROUP BY c, a;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Remote Fast Query Execution
   ->  HashAggregate
         Group Key: pagg_tab_20220701_p1.c, pagg_tab_20220701_p1.a
         ->  Append
               ->  Seq Scan on pagg_tab_20220701_p1
               ->  Seq Scan on pagg_tab_20220701_p2
               ->  Seq Scan on pagg_tab_20220701_p3
(7 rows)

-- Check with multiple columns in GROUP BY, order in target-list is reversed
EXPLAIN (COSTS OFF, nodes off)
SELECT c, a, count(*) FROM pagg_tab_20220701 GROUP BY a, c;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Remote Fast Query Execution
   ->  HashAggregate
         Group Key: pagg_tab_20220701_p1.a, pagg_tab_20220701_p1.c
         ->  Append
               ->  Seq Scan on pagg_tab_20220701_p1
               ->  Seq Scan on pagg_tab_20220701_p2
               ->  Seq Scan on pagg_tab_20220701_p3
(7 rows)

-- Test when input relation for grouping is dummy
EXPLAIN (COSTS OFF, nodes off)
SELECT c, sum(a) FROM pagg_tab_20220701 WHERE 1 = 2 GROUP BY c;
                QUERY PLAN                 
-------------------------------------------
 Remote Subquery Scan on all (datanodes 1)
   ->  HashAggregate
         Group Key: c
         ->  Result
               One-Time Filter: false
(5 rows)

SELECT c, sum(a) FROM pagg_tab_20220701 WHERE 1 = 2 GROUP BY c;
 c | sum 
---+-----
(0 rows)

EXPLAIN (COSTS OFF, nodes off)
SELECT c, sum(a) FROM pagg_tab_20220701 WHERE c = 'x' GROUP BY c;
                QUERY PLAN                 
-------------------------------------------
 Remote Subquery Scan on all (datanodes 1)
   ->  GroupAggregate
         Group Key: c
         ->  Result
               One-Time Filter: false
(5 rows)

SELECT c, sum(a) FROM pagg_tab_20220701 WHERE c = 'x' GROUP BY c;
 c | sum 
---+-----
(0 rows)

-- Test GroupAggregate paths by disabling hash aggregates.
SET enable_hashagg TO false;
-- When GROUP BY clause matches full aggregation is performed for each partition.
EXPLAIN (COSTS OFF, nodes off)
SELECT c, sum(a), avg(b), count(*) FROM pagg_tab_20220701 GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_p1.c, (sum(pagg_tab_20220701_p1.a)), (avg(pagg_tab_20220701_p1.b))
   ->  Sort
         Sort Key: pagg_tab_20220701_p1.c, (sum(pagg_tab_20220701_p1.a)), (avg(pagg_tab_20220701_p1.b))
         ->  Finalize GroupAggregate
               Group Key: pagg_tab_20220701_p1.c
               Filter: (avg(pagg_tab_20220701_p1.d) < '15'::numeric)
               ->  Remote Subquery Scan on all (datanodes 2)
                     Sort Key: pagg_tab_20220701_p1.c
                     Distribute results by S: c
                     ->  Partial GroupAggregate
                           Group Key: pagg_tab_20220701_p1.c
                           ->  Sort
                                 Sort Key: pagg_tab_20220701_p1.c
                                 ->  Append
                                       ->  Seq Scan on pagg_tab_20220701_p1
                                       ->  Seq Scan on pagg_tab_20220701_p2
                                       ->  Seq Scan on pagg_tab_20220701_p3
(18 rows)

SELECT c, sum(a), avg(b), count(*) FROM pagg_tab_20220701 GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;
  c   | sum  |         avg         | count 
------+------+---------------------+-------
 0000 | 2000 | 12.0000000000000000 |   250
 0001 | 2250 | 13.0000000000000000 |   250
 0002 | 2500 | 14.0000000000000000 |   250
 0006 | 2500 | 12.0000000000000000 |   250
 0007 | 2750 | 13.0000000000000000 |   250
 0008 | 2000 | 14.0000000000000000 |   250
(6 rows)

-- When GROUP BY clause does not match; partial aggregation is performed for each partition.
EXPLAIN (COSTS OFF, nodes off)
SELECT a, sum(b), avg(b), count(*) FROM pagg_tab_20220701 GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_p1.a, (sum(pagg_tab_20220701_p1.b)), (avg(pagg_tab_20220701_p1.b))
   ->  Sort
         Sort Key: pagg_tab_20220701_p1.a, (sum(pagg_tab_20220701_p1.b)), (avg(pagg_tab_20220701_p1.b))
         ->  GroupAggregate
               Group Key: pagg_tab_20220701_p1.a
               Filter: (avg(pagg_tab_20220701_p1.d) < '15'::numeric)
               ->  Sort
                     Sort Key: pagg_tab_20220701_p1.a
                     ->  Append
                           ->  Seq Scan on pagg_tab_20220701_p1
                           ->  Seq Scan on pagg_tab_20220701_p2
                           ->  Seq Scan on pagg_tab_20220701_p3
(13 rows)

SELECT a, sum(b), avg(b), count(*) FROM pagg_tab_20220701 GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;
 a  | sum  |         avg         | count 
----+------+---------------------+-------
  0 | 1500 | 10.0000000000000000 |   150
  1 | 1650 | 11.0000000000000000 |   150
  2 | 1800 | 12.0000000000000000 |   150
  3 | 1950 | 13.0000000000000000 |   150
  4 | 2100 | 14.0000000000000000 |   150
 10 | 1500 | 10.0000000000000000 |   150
 11 | 1650 | 11.0000000000000000 |   150
 12 | 1800 | 12.0000000000000000 |   150
 13 | 1950 | 13.0000000000000000 |   150
 14 | 2100 | 14.0000000000000000 |   150
(10 rows)

-- Test partitionwise grouping without any aggregates
EXPLAIN (COSTS OFF, nodes off)
SELECT c FROM pagg_tab_20220701 GROUP BY c ORDER BY 1;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_p1.c
   ->  Group
         Group Key: pagg_tab_20220701_p1.c
         ->  Remote Subquery Scan on all (datanodes 2)
               Sort Key: pagg_tab_20220701_p1.c
               Distribute results by S: c
               ->  Group
                     Group Key: pagg_tab_20220701_p1.c
                     ->  Sort
                           Sort Key: pagg_tab_20220701_p1.c
                           ->  Append
                                 ->  Seq Scan on pagg_tab_20220701_p1
                                 ->  Seq Scan on pagg_tab_20220701_p2
                                 ->  Seq Scan on pagg_tab_20220701_p3
(15 rows)

SELECT c FROM pagg_tab_20220701 GROUP BY c ORDER BY 1;
  c   
------
 0000
 0001
 0002
 0003
 0004
 0005
 0006
 0007
 0008
 0009
 0010
 0011
(12 rows)

EXPLAIN (COSTS OFF, nodes off)
SELECT a FROM pagg_tab_20220701 WHERE a < 3 GROUP BY a ORDER BY 1;
                        QUERY PLAN                        
----------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_p1.a
   ->  Group
         Group Key: pagg_tab_20220701_p1.a
         ->  Sort
               Sort Key: pagg_tab_20220701_p1.a
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_p1
                           Filter: (a < 3)
                     ->  Seq Scan on pagg_tab_20220701_p2
                           Filter: (a < 3)
                     ->  Seq Scan on pagg_tab_20220701_p3
                           Filter: (a < 3)
(13 rows)

SELECT a FROM pagg_tab_20220701 WHERE a < 3 GROUP BY a ORDER BY 1;
 a 
---
 0
 1
 2
(3 rows)

RESET enable_hashagg;
-- ROLLUP, partitionwise aggregation does not apply
EXPLAIN (COSTS OFF, nodes off)
SELECT c, sum(a) FROM pagg_tab_20220701 GROUP BY rollup(c) ORDER BY 1, 2;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: c, (sum(a))
   CTE Grouping_1 (datanodes 2)
     ->  Append
           ->  Seq Scan on pagg_tab_20220701_p1
           ->  Seq Scan on pagg_tab_20220701_p2
           ->  Seq Scan on pagg_tab_20220701_p3
   ->  Sort
         Sort Key: c, (sum(a))
         ->  Append
               ->  Remote Subquery Scan on all (datanodes 2)
                     Distribute results by Local
                     ->  Finalize HashAggregate
                           Group Key: c
                           ->  Remote Subquery Scan on all (datanodes 2)
                                 Distribute results by S: c
                                 ->  Partial HashAggregate
                                       Group Key: c
                                       ->  Shared CTE Scan on "CTE Grouping_1"
               ->  Remote Subquery Scan on all (datanodes 1)
                     Distribute results by Local
                     ->  Finalize Aggregate
                           ->  Remote Subquery Scan on all (datanodes 2)
                                 ->  Partial Aggregate
                                       ->  Shared CTE Scan on "CTE Grouping_1"
(25 rows)

-- ORDERED SET within the aggregate.
-- Full aggregation; since all the rows that belong to the same group come
-- from the same partition, having an ORDER BY within the aggregate doesn't
-- make any difference.
EXPLAIN (COSTS OFF, nodes off)
SELECT c, sum(b order by a) FROM pagg_tab_20220701 GROUP BY c ORDER BY 1, 2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_p1.c, (sum(pagg_tab_20220701_p1.b ORDER BY pagg_tab_20220701_p1.a))
   ->  Sort
         Sort Key: pagg_tab_20220701_p1.c, (sum(pagg_tab_20220701_p1.b ORDER BY pagg_tab_20220701_p1.a))
         ->  GroupAggregate
               Group Key: pagg_tab_20220701_p1.c
               ->  Remote Subquery Scan on all (datanodes 2)
                     Sort Key: pagg_tab_20220701_p1.c
                     Distribute results by S: c
                     ->  Sort
                           Sort Key: pagg_tab_20220701_p1.c
                           ->  Append
                                 ->  Seq Scan on pagg_tab_20220701_p1
                                 ->  Seq Scan on pagg_tab_20220701_p2
                                 ->  Seq Scan on pagg_tab_20220701_p3
(15 rows)

-- Since GROUP BY clause does not match with PARTITION KEY; we need to do
-- partial aggregation. However, ORDERED SET are not partial safe and thus
-- partitionwise aggregation plan is not generated.
EXPLAIN (COSTS OFF, nodes off)
SELECT a, sum(b order by a) FROM pagg_tab_20220701 GROUP BY a ORDER BY 1, 2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_p1.a, (sum(pagg_tab_20220701_p1.b ORDER BY pagg_tab_20220701_p1.a))
   ->  Sort
         Sort Key: pagg_tab_20220701_p1.a, (sum(pagg_tab_20220701_p1.b ORDER BY pagg_tab_20220701_p1.a))
         ->  GroupAggregate
               Group Key: pagg_tab_20220701_p1.a
               ->  Sort
                     Sort Key: pagg_tab_20220701_p1.a
                     ->  Append
                           ->  Seq Scan on pagg_tab_20220701_p1
                           ->  Seq Scan on pagg_tab_20220701_p2
                           ->  Seq Scan on pagg_tab_20220701_p3
(12 rows)

-- JOIN query
drop table if exists pagg_tab_20220701_1 cascade;
NOTICE:  table "pagg_tab_20220701_1" does not exist, skipping
CREATE TABLE pagg_tab_20220701_1(x int, y int) PARTITION BY RANGE(x);
CREATE TABLE pagg_tab_20220701_1_p1 PARTITION OF pagg_tab_20220701_1 FOR VALUES FROM (0) TO (10);
CREATE TABLE pagg_tab_20220701_1_p2 PARTITION OF pagg_tab_20220701_1 FOR VALUES FROM (10) TO (20);
CREATE TABLE pagg_tab_20220701_1_p3 PARTITION OF pagg_tab_20220701_1 FOR VALUES FROM (20) TO (30);
drop table if exists pagg_tab_20220701_2 cascade;
NOTICE:  table "pagg_tab_20220701_2" does not exist, skipping
CREATE TABLE pagg_tab_20220701_2(x int, y int) PARTITION BY RANGE(y);
CREATE TABLE pagg_tab_20220701_2_p1 PARTITION OF pagg_tab_20220701_2 FOR VALUES FROM (0) TO (10);
CREATE TABLE pagg_tab_20220701_2_p2 PARTITION OF pagg_tab_20220701_2 FOR VALUES FROM (10) TO (20);
CREATE TABLE pagg_tab_20220701_2_p3 PARTITION OF pagg_tab_20220701_2 FOR VALUES FROM (20) TO (30);
INSERT INTO pagg_tab_20220701_1 SELECT i % 30, i % 20 FROM generate_series(0, 299, 2) i;
INSERT INTO pagg_tab_20220701_2 SELECT i % 20, i % 30 FROM generate_series(0, 299, 3) i;
ANALYZE pagg_tab_20220701_1;
ANALYZE pagg_tab_20220701_2;
-- When GROUP BY clause matches; full aggregation is performed for each partition.
EXPLAIN (COSTS OFF, nodes off)
SELECT t1.x, sum(t1.y), count(*) FROM pagg_tab_20220701_1 t1, pagg_tab_20220701_2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: t1.x, (sum(t1.y)), (count(*))
   ->  Sort
         Sort Key: t1.x, (sum(t1.y)), (count(*))
         ->  GroupAggregate
               Group Key: t1.x
               ->  Merge Join
                     Merge Cond: (t2.y = t1.x)
                     ->  Remote Subquery Scan on all (datanodes 2)
                           Sort Key: t2.y
                           Distribute results by S: y
                           ->  Sort
                                 Sort Key: t2.y
                                 ->  Append
                                       ->  Seq Scan on pagg_tab_20220701_2_p1 t2
                                       ->  Seq Scan on pagg_tab_20220701_2_p2 t2_1
                                       ->  Seq Scan on pagg_tab_20220701_2_p3 t2_2
                     ->  Sort
                           Sort Key: t1.x
                           ->  Append
                                 ->  Seq Scan on pagg_tab_20220701_1_p1 t1
                                 ->  Seq Scan on pagg_tab_20220701_1_p2 t1_1
                                 ->  Seq Scan on pagg_tab_20220701_1_p3 t1_2
(23 rows)

SELECT t1.x, sum(t1.y), count(*) FROM pagg_tab_20220701_1 t1, pagg_tab_20220701_2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;
 x  | sum  | count 
----+------+-------
  0 |  500 |   100
  6 | 1100 |   100
 12 |  700 |   100
 18 | 1300 |   100
 24 |  900 |   100
(5 rows)

-- Check with whole-row reference; partitionwise aggregation does not apply
EXPLAIN (COSTS OFF, nodes off)
SELECT t1.x, sum(t1.y), count(t1) FROM pagg_tab_20220701_1 t1, pagg_tab_20220701_2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: t1.x, (sum(t1.y)), (count(((t1.*)::pagg_tab_20220701_1)))
   ->  Sort
         Sort Key: t1.x, (sum(t1.y)), (count(((t1.*)::pagg_tab_20220701_1)))
         ->  GroupAggregate
               Group Key: t1.x
               ->  Merge Join
                     Merge Cond: (t2.y = t1.x)
                     ->  Remote Subquery Scan on all (datanodes 2)
                           Sort Key: t2.y
                           Distribute results by S: y
                           ->  Sort
                                 Sort Key: t2.y
                                 ->  Append
                                       ->  Seq Scan on pagg_tab_20220701_2_p1 t2
                                       ->  Seq Scan on pagg_tab_20220701_2_p2 t2_1
                                       ->  Seq Scan on pagg_tab_20220701_2_p3 t2_2
                     ->  Sort
                           Sort Key: t1.x
                           ->  Append
                                 ->  Seq Scan on pagg_tab_20220701_1_p1 t1
                                 ->  Seq Scan on pagg_tab_20220701_1_p2 t1_1
                                 ->  Seq Scan on pagg_tab_20220701_1_p3 t1_2
(23 rows)

SELECT t1.x, sum(t1.y), count(t1) FROM pagg_tab_20220701_1 t1, pagg_tab_20220701_2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;
 x  | sum  | count 
----+------+-------
  0 |  500 |   100
  6 | 1100 |   100
 12 |  700 |   100
 18 | 1300 |   100
 24 |  900 |   100
(5 rows)

-- GROUP BY having other matching key
EXPLAIN (COSTS OFF, nodes off)
SELECT t2.y, sum(t1.y), count(*) FROM pagg_tab_20220701_1 t1, pagg_tab_20220701_2 t2 WHERE t1.x = t2.y GROUP BY t2.y ORDER BY 1, 2, 3;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: t2.y, (sum(t1.y)), (count(*))
   ->  Sort
         Sort Key: t2.y, (sum(t1.y)), (count(*))
         ->  GroupAggregate
               Group Key: t2.y
               ->  Merge Join
                     Merge Cond: (t2.y = t1.x)
                     ->  Remote Subquery Scan on all (datanodes 2)
                           Sort Key: t2.y
                           Distribute results by S: y
                           ->  Sort
                                 Sort Key: t2.y
                                 ->  Append
                                       ->  Seq Scan on pagg_tab_20220701_2_p1 t2
                                       ->  Seq Scan on pagg_tab_20220701_2_p2 t2_1
                                       ->  Seq Scan on pagg_tab_20220701_2_p3 t2_2
                     ->  Sort
                           Sort Key: t1.x
                           ->  Append
                                 ->  Seq Scan on pagg_tab_20220701_1_p1 t1
                                 ->  Seq Scan on pagg_tab_20220701_1_p2 t1_1
                                 ->  Seq Scan on pagg_tab_20220701_1_p3 t1_2
(23 rows)

-- When GROUP BY clause does not match; partial aggregation is performed for each partition.
-- Also test GroupAggregate paths by disabling hash aggregates.
SET enable_hashagg TO false;
EXPLAIN (COSTS OFF, nodes off)
SELECT t1.y, sum(t1.x), count(*) FROM pagg_tab_20220701_1 t1, pagg_tab_20220701_2 t2 WHERE t1.x = t2.y GROUP BY t1.y HAVING avg(t1.x) > 10 ORDER BY 1, 2, 3;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: t1.y, (sum(t1.x)), (count(*))
   ->  Sort
         Sort Key: t1.y, (sum(t1.x)), (count(*))
         ->  Finalize GroupAggregate
               Group Key: t1.y
               Filter: (avg(t1.x) > '10'::numeric)
               ->  Remote Subquery Scan on all (datanodes 2)
                     Sort Key: t1.y
                     Distribute results by S: y
                     ->  Partial GroupAggregate
                           Group Key: t1.y
                           ->  Sort
                                 Sort Key: t1.y
                                 ->  Hash Join
                                       Hash Cond: (t2.y = t1.x)
                                       ->  Remote Subquery Scan on all (datanodes 2)
                                             Distribute results by S: y
                                             ->  Append
                                                   ->  Seq Scan on pagg_tab_20220701_2_p1 t2
                                                   ->  Seq Scan on pagg_tab_20220701_2_p2 t2_1
                                                   ->  Seq Scan on pagg_tab_20220701_2_p3 t2_2
                                       ->  Hash
                                             ->  Append
                                                   ->  Seq Scan on pagg_tab_20220701_1_p1 t1
                                                   ->  Seq Scan on pagg_tab_20220701_1_p2 t1_1
                                                   ->  Seq Scan on pagg_tab_20220701_1_p3 t1_2
(27 rows)

SELECT t1.y, sum(t1.x), count(*) FROM pagg_tab_20220701_1 t1, pagg_tab_20220701_2 t2 WHERE t1.x = t2.y GROUP BY t1.y HAVING avg(t1.x) > 10 ORDER BY 1, 2, 3;
 y  | sum  | count 
----+------+-------
  2 |  600 |    50
  4 | 1200 |    50
  8 |  900 |    50
 12 |  600 |    50
 14 | 1200 |    50
 18 |  900 |    50
(6 rows)

RESET enable_hashagg;
-- Check with LEFT/RIGHT/FULL OUTER JOINs which produces NULL values for
-- aggregation
-- LEFT JOIN, should produce partial partitionwise aggregation plan as
-- GROUP BY is on nullable column
EXPLAIN (COSTS OFF, nodes off)
SELECT b.y, sum(a.y) FROM pagg_tab_20220701_1 a LEFT JOIN pagg_tab_20220701_2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: b.y
   ->  Finalize GroupAggregate
         Group Key: b.y
         ->  Remote Subquery Scan on all (datanodes 2)
               Sort Key: b.y
               Distribute results by S: y
               ->  Partial GroupAggregate
                     Group Key: b.y
                     ->  Sort
                           Sort Key: b.y
                           ->  Hash Right Join
                                 Hash Cond: (b.y = a.x)
                                 ->  Remote Subquery Scan on all (datanodes 2)
                                       Distribute results by S: y
                                       ->  Append
                                             ->  Seq Scan on pagg_tab_20220701_2_p1 b
                                             ->  Seq Scan on pagg_tab_20220701_2_p2 b_1
                                             ->  Seq Scan on pagg_tab_20220701_2_p3 b_2
                                 ->  Hash
                                       ->  Append
                                             ->  Seq Scan on pagg_tab_20220701_1_p1 a
                                             ->  Seq Scan on pagg_tab_20220701_1_p2 a_1
                                             ->  Seq Scan on pagg_tab_20220701_1_p3 a_2
(24 rows)

SELECT b.y, sum(a.y) FROM pagg_tab_20220701_1 a LEFT JOIN pagg_tab_20220701_2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;
 y  | sum  
----+------
  0 |  500
  6 | 1100
 12 |  700
 18 | 1300
 24 |  900
    |  900
(6 rows)

-- RIGHT JOIN, should produce full partitionwise aggregation plan as
-- GROUP BY is on non-nullable column
EXPLAIN (COSTS OFF, nodes off)
SELECT b.y, sum(a.y) FROM pagg_tab_20220701_1 a RIGHT JOIN pagg_tab_20220701_2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: b.y
   ->  GroupAggregate
         Group Key: b.y
         ->  Merge Left Join
               Merge Cond: (b.y = a.x)
               ->  Remote Subquery Scan on all (datanodes 2)
                     Sort Key: b.y
                     Distribute results by S: y
                     ->  Sort
                           Sort Key: b.y
                           ->  Append
                                 ->  Seq Scan on pagg_tab_20220701_2_p1 b
                                 ->  Seq Scan on pagg_tab_20220701_2_p2 b_1
                                 ->  Seq Scan on pagg_tab_20220701_2_p3 b_2
               ->  Sort
                     Sort Key: a.x
                     ->  Append
                           ->  Seq Scan on pagg_tab_20220701_1_p1 a
                           ->  Seq Scan on pagg_tab_20220701_1_p2 a_1
                           ->  Seq Scan on pagg_tab_20220701_1_p3 a_2
(21 rows)

SELECT b.y, sum(a.y) FROM pagg_tab_20220701_1 a RIGHT JOIN pagg_tab_20220701_2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;
 y  | sum  
----+------
  0 |  500
  3 |     
  6 | 1100
  9 |     
 12 |  700
 15 |     
 18 | 1300
 21 |     
 24 |  900
 27 |     
(10 rows)

-- FULL JOIN, should produce partial partitionwise aggregation plan as
-- GROUP BY is on nullable column
EXPLAIN (COSTS OFF, nodes off)
SELECT a.x, sum(b.x) FROM pagg_tab_20220701_1 a FULL OUTER JOIN pagg_tab_20220701_2 b ON a.x = b.y GROUP BY a.x ORDER BY 1 NULLS LAST;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: a.x
   ->  Finalize GroupAggregate
         Group Key: a.x
         ->  Remote Subquery Scan on all (datanodes 2)
               Sort Key: a.x
               Distribute results by S: x
               ->  Partial GroupAggregate
                     Group Key: a.x
                     ->  Sort
                           Sort Key: a.x
                           ->  Hash Full Join
                                 Hash Cond: (b.y = a.x)
                                 ->  Remote Subquery Scan on all (datanodes 2)
                                       Distribute results by S: y
                                       ->  Append
                                             ->  Seq Scan on pagg_tab_20220701_2_p1 b
                                             ->  Seq Scan on pagg_tab_20220701_2_p2 b_1
                                             ->  Seq Scan on pagg_tab_20220701_2_p3 b_2
                                 ->  Hash
                                       ->  Append
                                             ->  Seq Scan on pagg_tab_20220701_1_p1 a
                                             ->  Seq Scan on pagg_tab_20220701_1_p2 a_1
                                             ->  Seq Scan on pagg_tab_20220701_1_p3 a_2
(24 rows)

SELECT a.x, sum(b.x) FROM pagg_tab_20220701_1 a FULL OUTER JOIN pagg_tab_20220701_2 b ON a.x = b.y GROUP BY a.x ORDER BY 1 NULLS LAST;
 x  | sum  
----+------
  0 |  500
  2 |     
  4 |     
  6 | 1100
  8 |     
 10 |     
 12 |  700
 14 |     
 16 |     
 18 | 1300
 20 |     
 22 |     
 24 |  900
 26 |     
 28 |     
    |  500
(16 rows)

-- LEFT JOIN, with dummy relation on right side, ideally
-- should produce full partitionwise aggregation plan as GROUP BY is on
-- non-nullable columns.
-- But right now we are unable to do partitionwise join in this case.
EXPLAIN (COSTS OFF, nodes off)
SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab_20220701_1 WHERE x < 20) a LEFT JOIN (SELECT * FROM pagg_tab_20220701_2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_1_p1.x, pagg_tab_20220701_2_p2.y
   ->  GroupAggregate
         Group Key: pagg_tab_20220701_1_p1.x, pagg_tab_20220701_2_p2.y
         ->  Sort
               Sort Key: pagg_tab_20220701_1_p1.x, pagg_tab_20220701_2_p2.y
               ->  Hash Left Join
                     Hash Cond: (pagg_tab_20220701_1_p1.x = pagg_tab_20220701_2_p2.y)
                     Filter: ((pagg_tab_20220701_1_p1.x > 5) OR (pagg_tab_20220701_2_p2.y < 20))
                     ->  Append
                           ->  Seq Scan on pagg_tab_20220701_1_p1
                                 Filter: (x < 20)
                           ->  Seq Scan on pagg_tab_20220701_1_p2
                                 Filter: (x < 20)
                     ->  Hash
                           ->  Remote Subquery Scan on all (datanodes 2)
                                 Distribute results by S: y
                                 ->  Append
                                       ->  Seq Scan on pagg_tab_20220701_2_p2
                                             Filter: (y > 10)
                                       ->  Seq Scan on pagg_tab_20220701_2_p3
                                             Filter: (y > 10)
(22 rows)

-- bug 打开这个参数：enable_partitionwise_join 之后，计算结果不正确
-- SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab_20220701_1 WHERE x < 20) a LEFT JOIN (SELECT * FROM pagg_tab_20220701_2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2;
-- FULL JOIN, with dummy relations on both sides, ideally
-- should produce partial partitionwise aggregation plan as GROUP BY is on
-- nullable columns.
-- But right now we are unable to do partitionwise join in this case.
EXPLAIN (COSTS OFF, nodes off)
SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab_20220701_1 WHERE x < 20) a FULL JOIN (SELECT * FROM pagg_tab_20220701_2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_1_p1.x, pagg_tab_20220701_2_p2.y
   ->  GroupAggregate
         Group Key: pagg_tab_20220701_1_p1.x, pagg_tab_20220701_2_p2.y
         ->  Remote Subquery Scan on all (datanodes 2)
               Sort Key: pagg_tab_20220701_1_p1.x, pagg_tab_20220701_2_p2.y
               Distribute results by S: x, y
               ->  Sort
                     Sort Key: pagg_tab_20220701_1_p1.x, pagg_tab_20220701_2_p2.y
                     ->  Hash Full Join
                           Hash Cond: (pagg_tab_20220701_1_p1.x = pagg_tab_20220701_2_p2.y)
                           Filter: ((pagg_tab_20220701_1_p1.x > 5) OR (pagg_tab_20220701_2_p2.y < 20))
                           ->  Append
                                 ->  Seq Scan on pagg_tab_20220701_1_p1
                                       Filter: (x < 20)
                                 ->  Seq Scan on pagg_tab_20220701_1_p2
                                       Filter: (x < 20)
                           ->  Hash
                                 ->  Remote Subquery Scan on all (datanodes 2)
                                       Distribute results by S: y
                                       ->  Append
                                             ->  Seq Scan on pagg_tab_20220701_2_p2
                                                   Filter: (y > 10)
                                             ->  Seq Scan on pagg_tab_20220701_2_p3
                                                   Filter: (y > 10)
(25 rows)

SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab_20220701_1 WHERE x < 20) a FULL JOIN (SELECT * FROM pagg_tab_20220701_2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20 GROUP BY a.x, b.y ORDER BY 1, 2;
 x  | y  | count 
----+----+-------
  6 |    |    10
  8 |    |    10
 10 |    |    10
 12 | 12 |   100
 14 |    |    10
 16 |    |    10
 18 | 18 |   100
    | 15 |    10
(8 rows)

-- Empty join relation because of empty outer side, no partitionwise agg plan
EXPLAIN (COSTS OFF, nodes off)
SELECT a.x, a.y, count(*) FROM (SELECT * FROM pagg_tab_20220701_1 WHERE x = 1 AND x = 2) a LEFT JOIN pagg_tab_20220701_2 b ON a.x = b.y GROUP BY a.x, a.y ORDER BY 1, 2;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 1)
   ->  GroupAggregate
         Group Key: pagg_tab_20220701_1.x, pagg_tab_20220701_1.y
         ->  Sort
               Sort Key: pagg_tab_20220701_1.y
               ->  Result
                     One-Time Filter: false
(7 rows)

SELECT a.x, a.y, count(*) FROM (SELECT * FROM pagg_tab_20220701_1 WHERE x = 1 AND x = 2) a LEFT JOIN pagg_tab_20220701_2 b ON a.x = b.y GROUP BY a.x, a.y ORDER BY 1, 2;
 x | y | count 
---+---+-------
(0 rows)

-- Partition by multiple columns
drop table if exists pagg_tab_20220701_m cascade;
NOTICE:  table "pagg_tab_20220701_m" does not exist, skipping
CREATE TABLE pagg_tab_20220701_m (a int, b int, c int) PARTITION BY RANGE(a, ((a+b)/2));
CREATE TABLE pagg_tab_20220701_m_p1 PARTITION OF pagg_tab_20220701_m FOR VALUES FROM (0, 0) TO (12, 12);
CREATE TABLE pagg_tab_20220701_m_p2 PARTITION OF pagg_tab_20220701_m FOR VALUES FROM (12, 12) TO (22, 22);
CREATE TABLE pagg_tab_20220701_m_p3 PARTITION OF pagg_tab_20220701_m FOR VALUES FROM (22, 22) TO (30, 30);
INSERT INTO pagg_tab_20220701_m SELECT i % 30, i % 40, i % 50 FROM generate_series(0, 2999) i;
ANALYZE pagg_tab_20220701_m;
-- Partial aggregation as GROUP BY clause does not match with PARTITION KEY
EXPLAIN (COSTS OFF, nodes off)
SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_20220701_m GROUP BY a HAVING avg(c) < 22 ORDER BY 1, 2, 3;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_m_p1.a, (sum(pagg_tab_20220701_m_p1.b)), (avg(pagg_tab_20220701_m_p1.c))
   ->  Sort
         Sort Key: pagg_tab_20220701_m_p1.a, (sum(pagg_tab_20220701_m_p1.b)), (avg(pagg_tab_20220701_m_p1.c))
         ->  HashAggregate
               Group Key: pagg_tab_20220701_m_p1.a
               Filter: (avg(pagg_tab_20220701_m_p1.c) < '22'::numeric)
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_m_p1
                     ->  Seq Scan on pagg_tab_20220701_m_p2
                     ->  Seq Scan on pagg_tab_20220701_m_p3
(11 rows)

SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_20220701_m GROUP BY a HAVING avg(c) < 22 ORDER BY 1, 2, 3;
 a  | sum  |         avg         | count 
----+------+---------------------+-------
  0 | 1500 | 20.0000000000000000 |   100
  1 | 1600 | 21.0000000000000000 |   100
 10 | 1500 | 20.0000000000000000 |   100
 11 | 1600 | 21.0000000000000000 |   100
 20 | 1500 | 20.0000000000000000 |   100
 21 | 1600 | 21.0000000000000000 |   100
(6 rows)

-- Full aggregation as GROUP BY clause matches with PARTITION KEY
EXPLAIN (COSTS OFF, nodes off)
SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_20220701_m GROUP BY a, (a+b)/2 HAVING sum(b) < 50 ORDER BY 1, 2, 3;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_m_p1.a, (sum(pagg_tab_20220701_m_p1.b)), (avg(pagg_tab_20220701_m_p1.c))
   ->  Sort
         Sort Key: pagg_tab_20220701_m_p1.a, (sum(pagg_tab_20220701_m_p1.b)), (avg(pagg_tab_20220701_m_p1.c))
         ->  HashAggregate
               Group Key: pagg_tab_20220701_m_p1.a, (((pagg_tab_20220701_m_p1.a + pagg_tab_20220701_m_p1.b) / 2))
               Filter: (sum(pagg_tab_20220701_m_p1.b) < 50)
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_m_p1
                     ->  Seq Scan on pagg_tab_20220701_m_p2
                     ->  Seq Scan on pagg_tab_20220701_m_p3
(11 rows)

SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_20220701_m GROUP BY a, (a+b)/2 HAVING sum(b) < 50 ORDER BY 1, 2, 3;
 a  | sum |         avg         | count 
----+-----+---------------------+-------
  0 |   0 | 20.0000000000000000 |    25
  1 |  25 | 21.0000000000000000 |    25
 10 |   0 | 20.0000000000000000 |    25
 11 |  25 | 21.0000000000000000 |    25
 20 |   0 | 20.0000000000000000 |    25
 21 |  25 | 21.0000000000000000 |    25
(6 rows)

-- Full aggregation as PARTITION KEY is part of GROUP BY clause
EXPLAIN (COSTS OFF, nodes off)
SELECT a, c, sum(b), avg(c), count(*) FROM pagg_tab_20220701_m GROUP BY (a+b)/2, 2, 1 HAVING sum(b) = 50 AND avg(c) > 25 ORDER BY 1, 2, 3;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_m_p1.a, pagg_tab_20220701_m_p1.c, (sum(pagg_tab_20220701_m_p1.b))
   ->  Sort
         Sort Key: pagg_tab_20220701_m_p1.a, pagg_tab_20220701_m_p1.c, (sum(pagg_tab_20220701_m_p1.b))
         ->  HashAggregate
               Group Key: (((pagg_tab_20220701_m_p1.a + pagg_tab_20220701_m_p1.b) / 2)), pagg_tab_20220701_m_p1.c, pagg_tab_20220701_m_p1.a
               Filter: ((sum(pagg_tab_20220701_m_p1.b) = 50) AND (avg(pagg_tab_20220701_m_p1.c) > '25'::numeric))
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_m_p1
                     ->  Seq Scan on pagg_tab_20220701_m_p2
                     ->  Seq Scan on pagg_tab_20220701_m_p3
(11 rows)

SELECT a, c, sum(b), avg(c), count(*) FROM pagg_tab_20220701_m GROUP BY (a+b)/2, 2, 1 HAVING sum(b) = 50 AND avg(c) > 25 ORDER BY 1, 2, 3;
 a  | c  | sum |         avg         | count 
----+----+-----+---------------------+-------
  0 | 30 |  50 | 30.0000000000000000 |     5
  0 | 40 |  50 | 40.0000000000000000 |     5
 10 | 30 |  50 | 30.0000000000000000 |     5
 10 | 40 |  50 | 40.0000000000000000 |     5
 20 | 30 |  50 | 30.0000000000000000 |     5
 20 | 40 |  50 | 40.0000000000000000 |     5
(6 rows)

-- Test with multi-level partitioning scheme
drop table if exists pagg_tab_20220701_ml cascade;
NOTICE:  table "pagg_tab_20220701_ml" does not exist, skipping
CREATE TABLE pagg_tab_20220701_ml (a int, b int, c text) PARTITION BY RANGE(a);
CREATE TABLE pagg_tab_20220701_ml_p1 PARTITION OF pagg_tab_20220701_ml FOR VALUES FROM (0) TO (12);
CREATE TABLE pagg_tab_20220701_ml_p2 PARTITION OF pagg_tab_20220701_ml FOR VALUES FROM (12) TO (20) PARTITION BY LIST (c);
CREATE TABLE pagg_tab_20220701_ml_p2_s1 PARTITION OF pagg_tab_20220701_ml_p2 FOR VALUES IN ('0000', '0001', '0002');
CREATE TABLE pagg_tab_20220701_ml_p2_s2 PARTITION OF pagg_tab_20220701_ml_p2 FOR VALUES IN ('0003');
-- This level of partitioning has different column positions than the parent
CREATE TABLE pagg_tab_20220701_ml_p3(b int, c text, a int) PARTITION BY RANGE (b);
CREATE TABLE pagg_tab_20220701_ml_p3_s1(c text, a int, b int);
CREATE TABLE pagg_tab_20220701_ml_p3_s2 PARTITION OF pagg_tab_20220701_ml_p3 FOR VALUES FROM (7) TO (10);
ALTER TABLE pagg_tab_20220701_ml_p3 ATTACH PARTITION pagg_tab_20220701_ml_p3_s1 FOR VALUES FROM (0) TO (7);
ERROR:  table "pagg_tab_20220701_ml_p3_s1" contains column "b" at position 3, but parent "pagg_tab_20220701_ml_p3" has it at position 1
DETAIL:  Postgres-XL requires attribute positions to match
HINT:  Check for column ordering and dropped columns, if any
ALTER TABLE pagg_tab_20220701_ml ATTACH PARTITION pagg_tab_20220701_ml_p3 FOR VALUES FROM (20) TO (30);
ERROR:  table "pagg_tab_20220701_ml_p3" contains column "a" at position 3, but parent "pagg_tab_20220701_ml" has it at position 1
DETAIL:  Postgres-XL requires attribute positions to match
HINT:  Check for column ordering and dropped columns, if any
INSERT INTO pagg_tab_20220701_ml SELECT i % 20, i % 10, to_char(i % 4, 'FM0000') FROM generate_series(0, 29999) i;
ANALYZE pagg_tab_20220701_ml;
-- For Parallel Append
-- bug
SET max_parallel_workers_per_gather TO 0;
-- Full aggregation at level 1 as GROUP BY clause matches with PARTITION KEY
-- for level 1 only. For subpartitions, GROUP BY clause does not match with
-- PARTITION KEY, but still we do not see a partial aggregation as array_agg()
-- is not partial agg safe.
EXPLAIN (COSTS OFF, nodes off)
SELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_20220701_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_ml_p1.a, (sum(pagg_tab_20220701_ml_p1.b)), (array_agg(DISTINCT pagg_tab_20220701_ml_p1.c))
   ->  Sort
         Sort Key: pagg_tab_20220701_ml_p1.a, (sum(pagg_tab_20220701_ml_p1.b)), (array_agg(DISTINCT pagg_tab_20220701_ml_p1.c))
         ->  GroupAggregate
               Group Key: pagg_tab_20220701_ml_p1.a
               Filter: (avg(pagg_tab_20220701_ml_p1.b) < '3'::numeric)
               ->  Sort
                     Sort Key: pagg_tab_20220701_ml_p1.a
                     ->  Append
                           ->  Seq Scan on pagg_tab_20220701_ml_p1
                           ->  Seq Scan on pagg_tab_20220701_ml_p2_s1
                           ->  Seq Scan on pagg_tab_20220701_ml_p2_s2
(13 rows)

SELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_20220701_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;
 a  | sum  | array_agg | count 
----+------+-----------+-------
  0 |    0 | {0000}    |  1500
  1 | 1500 | {0001}    |  1500
  2 | 3000 | {0002}    |  1500
 10 |    0 | {0002}    |  1500
 11 | 1500 | {0003}    |  1500
 12 | 3000 | {0000}    |  1500
(6 rows)

-- Without ORDER BY clause, to test Gather at top-most path
EXPLAIN (COSTS OFF, nodes off)
SELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_20220701_ml GROUP BY a HAVING avg(b) < 3;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_ml_p1.a
   ->  GroupAggregate
         Group Key: pagg_tab_20220701_ml_p1.a
         Filter: (avg(pagg_tab_20220701_ml_p1.b) < '3'::numeric)
         ->  Sort
               Sort Key: pagg_tab_20220701_ml_p1.a
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_ml_p1
                     ->  Seq Scan on pagg_tab_20220701_ml_p2_s1
                     ->  Seq Scan on pagg_tab_20220701_ml_p2_s2
(11 rows)

-- Full aggregation at level 1 as GROUP BY clause matches with PARTITION KEY
-- for level 1 only. For subpartitions, GROUP BY clause does not match with
-- PARTITION KEY, thus we will have a partial aggregation for them.
EXPLAIN (COSTS OFF, nodes off)
SELECT a, sum(b), count(*) FROM pagg_tab_20220701_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_ml_p1.a, (sum(pagg_tab_20220701_ml_p1.b)), (count(*))
   ->  Sort
         Sort Key: pagg_tab_20220701_ml_p1.a, (sum(pagg_tab_20220701_ml_p1.b)), (count(*))
         ->  HashAggregate
               Group Key: pagg_tab_20220701_ml_p1.a
               Filter: (avg(pagg_tab_20220701_ml_p1.b) < '3'::numeric)
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_ml_p1
                     ->  Seq Scan on pagg_tab_20220701_ml_p2_s1
                     ->  Seq Scan on pagg_tab_20220701_ml_p2_s2
(11 rows)

SELECT a, sum(b), count(*) FROM pagg_tab_20220701_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;
 a  | sum  | count 
----+------+-------
  0 |    0 |  1500
  1 | 1500 |  1500
  2 | 3000 |  1500
 10 |    0 |  1500
 11 | 1500 |  1500
 12 | 3000 |  1500
(6 rows)

-- Partial aggregation at all levels as GROUP BY clause does not match with
-- PARTITION KEY
EXPLAIN (COSTS OFF, nodes off)
SELECT b, sum(a), count(*) FROM pagg_tab_20220701_ml GROUP BY b ORDER BY 1, 2, 3;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_ml_p1.b, (sum(pagg_tab_20220701_ml_p1.a)), (count(*))
   ->  Sort
         Sort Key: pagg_tab_20220701_ml_p1.b, (sum(pagg_tab_20220701_ml_p1.a)), (count(*))
         ->  Finalize HashAggregate
               Group Key: pagg_tab_20220701_ml_p1.b
               ->  Remote Subquery Scan on all (datanodes 2)
                     Distribute results by S: b
                     ->  Partial HashAggregate
                           Group Key: pagg_tab_20220701_ml_p1.b
                           ->  Append
                                 ->  Seq Scan on pagg_tab_20220701_ml_p1
                                 ->  Seq Scan on pagg_tab_20220701_ml_p2_s1
                                 ->  Seq Scan on pagg_tab_20220701_ml_p2_s2
(14 rows)

SELECT b, sum(a), count(*) FROM pagg_tab_20220701_ml GROUP BY b HAVING avg(a) < 15 ORDER BY 1, 2, 3;
 b |  sum  | count 
---+-------+-------
 0 | 15000 |  3000
 1 | 18000 |  3000
 2 | 21000 |  3000
 3 | 24000 |  3000
 4 | 27000 |  3000
 5 | 30000 |  3000
 6 | 33000 |  3000
 7 | 36000 |  3000
 8 | 39000 |  3000
 9 | 42000 |  3000
(10 rows)

-- Full aggregation at all levels as GROUP BY clause matches with PARTITION KEY
EXPLAIN (COSTS OFF, nodes off)
SELECT a, sum(b), count(*) FROM pagg_tab_20220701_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_ml_p1.a, (sum(pagg_tab_20220701_ml_p1.b)), (count(*))
   ->  Sort
         Sort Key: pagg_tab_20220701_ml_p1.a, (sum(pagg_tab_20220701_ml_p1.b)), (count(*))
         ->  HashAggregate
               Group Key: pagg_tab_20220701_ml_p1.a, pagg_tab_20220701_ml_p1.b, pagg_tab_20220701_ml_p1.c
               Filter: (avg(pagg_tab_20220701_ml_p1.b) > '7'::numeric)
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_ml_p1
                     ->  Seq Scan on pagg_tab_20220701_ml_p2_s1
                     ->  Seq Scan on pagg_tab_20220701_ml_p2_s2
(11 rows)

SELECT a, sum(b), count(*) FROM pagg_tab_20220701_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;
 a  |  sum  | count 
----+-------+-------
  8 | 12000 |  1500
  9 | 13500 |  1500
 18 | 12000 |  1500
 19 | 13500 |  1500
(4 rows)

-- Parallelism within partitionwise aggregates
SET min_parallel_table_scan_size TO '8kB';
SET parallel_setup_cost TO 0;
-- Full aggregation at level 1 as GROUP BY clause matches with PARTITION KEY
-- for level 1 only. For subpartitions, GROUP BY clause does not match with
-- PARTITION KEY, thus we will have a partial aggregation for them.
EXPLAIN (COSTS OFF, nodes off)
SELECT a, sum(b), count(*) FROM pagg_tab_20220701_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_ml_p1.a, (sum(pagg_tab_20220701_ml_p1.b)), (count(*))
   ->  Sort
         Sort Key: pagg_tab_20220701_ml_p1.a, (sum(pagg_tab_20220701_ml_p1.b)), (count(*))
         ->  HashAggregate
               Group Key: pagg_tab_20220701_ml_p1.a
               Filter: (avg(pagg_tab_20220701_ml_p1.b) < '3'::numeric)
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_ml_p1
                     ->  Seq Scan on pagg_tab_20220701_ml_p2_s1
                     ->  Seq Scan on pagg_tab_20220701_ml_p2_s2
(11 rows)

SELECT a, sum(b), count(*) FROM pagg_tab_20220701_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;
 a  | sum  | count 
----+------+-------
  0 |    0 |  1500
  1 | 1500 |  1500
  2 | 3000 |  1500
 10 |    0 |  1500
 11 | 1500 |  1500
 12 | 3000 |  1500
(6 rows)

-- Partial aggregation at all levels as GROUP BY clause does not match with
-- PARTITION KEY
EXPLAIN (COSTS OFF, nodes off)
SELECT b, sum(a), count(*) FROM pagg_tab_20220701_ml GROUP BY b ORDER BY 1, 2, 3;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_ml_p1.b, (sum(pagg_tab_20220701_ml_p1.a)), (count(*))
   ->  Sort
         Sort Key: pagg_tab_20220701_ml_p1.b, (sum(pagg_tab_20220701_ml_p1.a)), (count(*))
         ->  Finalize HashAggregate
               Group Key: pagg_tab_20220701_ml_p1.b
               ->  Remote Subquery Scan on all (datanodes 2)
                     Distribute results by S: b
                     ->  Partial HashAggregate
                           Group Key: pagg_tab_20220701_ml_p1.b
                           ->  Append
                                 ->  Seq Scan on pagg_tab_20220701_ml_p1
                                 ->  Seq Scan on pagg_tab_20220701_ml_p2_s1
                                 ->  Seq Scan on pagg_tab_20220701_ml_p2_s2
(14 rows)

SELECT b, sum(a), count(*) FROM pagg_tab_20220701_ml GROUP BY b HAVING avg(a) < 15 ORDER BY 1, 2, 3;
 b |  sum  | count 
---+-------+-------
 0 | 15000 |  3000
 1 | 18000 |  3000
 2 | 21000 |  3000
 3 | 24000 |  3000
 4 | 27000 |  3000
 5 | 30000 |  3000
 6 | 33000 |  3000
 7 | 36000 |  3000
 8 | 39000 |  3000
 9 | 42000 |  3000
(10 rows)

-- Full aggregation at all levels as GROUP BY clause matches with PARTITION KEY
EXPLAIN (COSTS OFF, nodes off)
SELECT a, sum(b), count(*) FROM pagg_tab_20220701_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_ml_p1.a, (sum(pagg_tab_20220701_ml_p1.b)), (count(*))
   ->  Sort
         Sort Key: pagg_tab_20220701_ml_p1.a, (sum(pagg_tab_20220701_ml_p1.b)), (count(*))
         ->  HashAggregate
               Group Key: pagg_tab_20220701_ml_p1.a, pagg_tab_20220701_ml_p1.b, pagg_tab_20220701_ml_p1.c
               Filter: (avg(pagg_tab_20220701_ml_p1.b) > '7'::numeric)
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_ml_p1
                     ->  Seq Scan on pagg_tab_20220701_ml_p2_s1
                     ->  Seq Scan on pagg_tab_20220701_ml_p2_s2
(11 rows)

SELECT a, sum(b), count(*) FROM pagg_tab_20220701_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;
 a  |  sum  | count 
----+-------+-------
  8 | 12000 |  1500
  9 | 13500 |  1500
 18 | 12000 |  1500
 19 | 13500 |  1500
(4 rows)

-- Parallelism within partitionwise aggregates (single level)
-- Add few parallel setup cost, so that we will see a plan which gathers
-- partially created paths even for full aggregation and sticks a single Gather
-- followed by finalization step.
-- Without this, the cost of doing partial aggregation + Gather + finalization
-- for each partition and then Append over it turns out to be same and this
-- wins as we add it first. This parallel_setup_cost plays a vital role in
-- costing such plans.
SET parallel_setup_cost TO 10;
drop table if exists pagg_tab_20220701_para_20220714 cascade;
NOTICE:  table "pagg_tab_20220701_para_20220714" does not exist, skipping
CREATE TABLE pagg_tab_20220701_para_20220714(x int, y int) PARTITION BY RANGE(x);
CREATE TABLE pagg_tab_20220701_para_20220714_p1 PARTITION OF pagg_tab_20220701_para_20220714 FOR VALUES FROM (0) TO (12);
CREATE TABLE pagg_tab_20220701_para_20220714_p2 PARTITION OF pagg_tab_20220701_para_20220714 FOR VALUES FROM (12) TO (22);
CREATE TABLE pagg_tab_20220701_para_20220714_p3 PARTITION OF pagg_tab_20220701_para_20220714 FOR VALUES FROM (22) TO (30);
INSERT INTO pagg_tab_20220701_para_20220714 SELECT i % 30, i % 20 FROM generate_series(0, 29999) i;
ANALYZE pagg_tab_20220701_para_20220714;
-- When GROUP BY clause matches; full aggregation is performed for each partition.
EXPLAIN (COSTS OFF, nodes off)
SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_20220701_para_20220714 GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_para_20220714_p1.x, (sum(pagg_tab_20220701_para_20220714_p1.y)), (avg(pagg_tab_20220701_para_20220714_p1.y))
   ->  Sort
         Sort Key: pagg_tab_20220701_para_20220714_p1.x, (sum(pagg_tab_20220701_para_20220714_p1.y)), (avg(pagg_tab_20220701_para_20220714_p1.y))
         ->  HashAggregate
               Group Key: pagg_tab_20220701_para_20220714_p1.x
               Filter: (avg(pagg_tab_20220701_para_20220714_p1.y) < '7'::numeric)
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p1
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p2
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p3
(11 rows)

SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_20220701_para_20220714 GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
 x  | sum  |        avg         | count 
----+------+--------------------+-------
  0 | 5000 | 5.0000000000000000 |  1000
  1 | 6000 | 6.0000000000000000 |  1000
 10 | 5000 | 5.0000000000000000 |  1000
 11 | 6000 | 6.0000000000000000 |  1000
 20 | 5000 | 5.0000000000000000 |  1000
 21 | 6000 | 6.0000000000000000 |  1000
(6 rows)

-- When GROUP BY clause does not match; partial aggregation is performed for each partition.
EXPLAIN (COSTS OFF, nodes off)
SELECT y, sum(x), avg(x), count(*) FROM pagg_tab_20220701_para_20220714 GROUP BY y HAVING avg(x) < 12 ORDER BY 1, 2, 3;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_para_20220714_p1.y, (sum(pagg_tab_20220701_para_20220714_p1.x)), (avg(pagg_tab_20220701_para_20220714_p1.x))
   ->  Sort
         Sort Key: pagg_tab_20220701_para_20220714_p1.y, (sum(pagg_tab_20220701_para_20220714_p1.x)), (avg(pagg_tab_20220701_para_20220714_p1.x))
         ->  Finalize HashAggregate
               Group Key: pagg_tab_20220701_para_20220714_p1.y
               Filter: (avg(pagg_tab_20220701_para_20220714_p1.x) < '12'::numeric)
               ->  Remote Subquery Scan on all (datanodes 2)
                     Distribute results by S: y
                     ->  Partial HashAggregate
                           Group Key: pagg_tab_20220701_para_20220714_p1.y
                           ->  Append
                                 ->  Seq Scan on pagg_tab_20220701_para_20220714_p1
                                 ->  Seq Scan on pagg_tab_20220701_para_20220714_p2
                                 ->  Seq Scan on pagg_tab_20220701_para_20220714_p3
(15 rows)

SELECT y, sum(x), avg(x), count(*) FROM pagg_tab_20220701_para_20220714 GROUP BY y HAVING avg(x) < 12 ORDER BY 1, 2, 3;
 y  |  sum  |         avg         | count 
----+-------+---------------------+-------
  0 | 15000 | 10.0000000000000000 |  1500
  1 | 16500 | 11.0000000000000000 |  1500
 10 | 15000 | 10.0000000000000000 |  1500
 11 | 16500 | 11.0000000000000000 |  1500
(4 rows)

-- Test when parent can produce parallel paths but not any (or some) of its children
ALTER TABLE pagg_tab_20220701_para_20220714_p1 SET (parallel_workers = 0);
ALTER TABLE pagg_tab_20220701_para_20220714_p3 SET (parallel_workers = 0);
ANALYZE pagg_tab_20220701_para_20220714;
EXPLAIN (COSTS OFF, nodes off)
SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_20220701_para_20220714 GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_para_20220714_p1.x, (sum(pagg_tab_20220701_para_20220714_p1.y)), (avg(pagg_tab_20220701_para_20220714_p1.y))
   ->  Sort
         Sort Key: pagg_tab_20220701_para_20220714_p1.x, (sum(pagg_tab_20220701_para_20220714_p1.y)), (avg(pagg_tab_20220701_para_20220714_p1.y))
         ->  HashAggregate
               Group Key: pagg_tab_20220701_para_20220714_p1.x
               Filter: (avg(pagg_tab_20220701_para_20220714_p1.y) < '7'::numeric)
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p1
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p2
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p3
(11 rows)

SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_20220701_para_20220714 GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
 x  | sum  |        avg         | count 
----+------+--------------------+-------
  0 | 5000 | 5.0000000000000000 |  1000
  1 | 6000 | 6.0000000000000000 |  1000
 10 | 5000 | 5.0000000000000000 |  1000
 11 | 6000 | 6.0000000000000000 |  1000
 20 | 5000 | 5.0000000000000000 |  1000
 21 | 6000 | 6.0000000000000000 |  1000
(6 rows)

ALTER TABLE pagg_tab_20220701_para_20220714_p2 SET (parallel_workers = 0);
ANALYZE pagg_tab_20220701_para_20220714;
EXPLAIN (COSTS OFF, nodes off)
SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_20220701_para_20220714 GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_para_20220714_p1.x, (sum(pagg_tab_20220701_para_20220714_p1.y)), (avg(pagg_tab_20220701_para_20220714_p1.y))
   ->  Sort
         Sort Key: pagg_tab_20220701_para_20220714_p1.x, (sum(pagg_tab_20220701_para_20220714_p1.y)), (avg(pagg_tab_20220701_para_20220714_p1.y))
         ->  HashAggregate
               Group Key: pagg_tab_20220701_para_20220714_p1.x
               Filter: (avg(pagg_tab_20220701_para_20220714_p1.y) < '7'::numeric)
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p1
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p2
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p3
(11 rows)

SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_20220701_para_20220714 GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
 x  | sum  |        avg         | count 
----+------+--------------------+-------
  0 | 5000 | 5.0000000000000000 |  1000
  1 | 6000 | 6.0000000000000000 |  1000
 10 | 5000 | 5.0000000000000000 |  1000
 11 | 6000 | 6.0000000000000000 |  1000
 20 | 5000 | 5.0000000000000000 |  1000
 21 | 6000 | 6.0000000000000000 |  1000
(6 rows)

-- Reset parallelism parameters to get partitionwise aggregation plan.
RESET min_parallel_table_scan_size;
RESET parallel_setup_cost;
EXPLAIN (COSTS OFF, nodes off)
SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_20220701_para_20220714 GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: pagg_tab_20220701_para_20220714_p1.x, (sum(pagg_tab_20220701_para_20220714_p1.y)), (avg(pagg_tab_20220701_para_20220714_p1.y))
   ->  Sort
         Sort Key: pagg_tab_20220701_para_20220714_p1.x, (sum(pagg_tab_20220701_para_20220714_p1.y)), (avg(pagg_tab_20220701_para_20220714_p1.y))
         ->  HashAggregate
               Group Key: pagg_tab_20220701_para_20220714_p1.x
               Filter: (avg(pagg_tab_20220701_para_20220714_p1.y) < '7'::numeric)
               ->  Append
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p1
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p2
                     ->  Seq Scan on pagg_tab_20220701_para_20220714_p3
(11 rows)

SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_20220701_para_20220714 GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
 x  | sum  |        avg         | count 
----+------+--------------------+-------
  0 | 5000 | 5.0000000000000000 |  1000
  1 | 6000 | 6.0000000000000000 |  1000
 10 | 5000 | 5.0000000000000000 |  1000
 11 | 6000 | 6.0000000000000000 |  1000
 20 | 5000 | 5.0000000000000000 |  1000
 21 | 6000 | 6.0000000000000000 |  1000
(6 rows)

drop table if exists pagg_tab_20220701 cascade;
drop table if exists pagg_tab_20220701_1 cascade;
drop table if exists pagg_tab_20220701_2 cascade;
drop table if exists pagg_tab_20220701_m cascade;
drop table if exists pagg_tab_20220701_ml cascade;
drop table if exists pagg_tab_20220701_para_20220714 cascade;
drop table if exists pagg_tab_20220701_ml_p3 cascade;
drop table if exists pagg_tab_20220701_ml_p3_s1 cascade;
drop table if exists pagg_tab_20220701_ml_p3_s2 cascade;
NOTICE:  table "pagg_tab_20220701_ml_p3_s2" does not exist, skipping
reset default_locator_type ;
