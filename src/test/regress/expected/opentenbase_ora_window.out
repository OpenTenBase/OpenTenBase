--
-- WINDOW FUNCTIONS
--
--Test Cases for opentenbase_ora Compatible Window Functions
--test cases for function ratio_to_report
\c regression_ora
CREATE TEMPORARY TABLE empsalary (
    depname varchar,
    empno bigint,
    salary int,
    enroll_date date
);
INSERT INTO empsalary VALUES
('develop', 10, 5200, '2007-08-01'),
('sales', 1, 5000, '2006-10-01'),
('personnel', 5, 3500, '2007-12-10'),
('sales', 4, 4800, '2007-08-08'),
('personnel', 2, 3900, '2006-12-23'),
('develop', 7, 4200, '2008-01-01'),
('develop', 9, 4500, '2008-01-01'),
('sales', 3, 4800, '2007-08-01'),
('develop', 8, 6000, '2006-10-01'),
('develop', 11, 5200, '2007-08-15');
select depname,ratio_to_report(null) over() from empsalary order by 1;
  DEPNAME  | RATIO_TO_REPORT 
-----------+-----------------
 develop   |                
 develop   |                
 develop   |                
 develop   |                
 develop   |                
 personnel |                
 personnel |                
 sales     |                
 sales     |                
 sales     |                
(10 rows)

select depname,empno,salary,ratio_to_report(null) over(partition by depname order by salary) from empsalary order by 1;
  DEPNAME  | EMPNO | SALARY | RATIO_TO_REPORT 
-----------+-------+--------+-----------------
 develop   |     7 |   4200 |                
 develop   |     9 |   4500 |                
 develop   |    10 |   5200 |                
 develop   |    11 |   5200 |                
 develop   |     8 |   6000 |                
 personnel |     5 |   3500 |                
 personnel |     2 |   3900 |                
 sales     |     4 |   4800 |                
 sales     |     3 |   4800 |                
 sales     |     1 |   5000 |                
(10 rows)

select depname,ratio_to_report(100) over() from empsalary order by 1;
  DEPNAME  | RATIO_TO_REPORT 
-----------+-----------------
 develop   |              .1
 develop   |              .1
 develop   |              .1
 develop   |              .1
 develop   |              .1
 personnel |              .1
 personnel |              .1
 sales     |              .1
 sales     |              .1
 sales     |              .1
(10 rows)

select depname,empno,salary,ratio_to_report(100) over(partition by depname order by salary) from empsalary order by 1;
  DEPNAME  | EMPNO | SALARY |              RATIO_TO_REPORT              
-----------+-------+--------+-------------------------------------------
 develop   |     7 |   4200 |                                        .2
 develop   |     9 |   4500 |                                        .2
 develop   |    10 |   5200 |                                        .2
 develop   |    11 |   5200 |                                        .2
 develop   |     8 |   6000 |                                        .2
 personnel |     5 |   3500 |                                        .5
 personnel |     2 |   3900 |                                        .5
 sales     |     4 |   4800 | .3333333333333333333333333333333333333333
 sales     |     3 |   4800 | .3333333333333333333333333333333333333333
 sales     |     1 |   5000 | .3333333333333333333333333333333333333333
(10 rows)

select depname,ratio_to_report('100') over() from empsalary order by 1;
  DEPNAME  | RATIO_TO_REPORT 
-----------+-----------------
 develop   |              .1
 develop   |              .1
 develop   |              .1
 develop   |              .1
 develop   |              .1
 personnel |              .1
 personnel |              .1
 sales     |              .1
 sales     |              .1
 sales     |              .1
(10 rows)

select depname,empno,salary,ratio_to_report('100') over(partition by depname order by salary) from empsalary order by 1;
  DEPNAME  | EMPNO | SALARY |              RATIO_TO_REPORT              
-----------+-------+--------+-------------------------------------------
 develop   |     7 |   4200 |                                        .2
 develop   |     9 |   4500 |                                        .2
 develop   |    10 |   5200 |                                        .2
 develop   |    11 |   5200 |                                        .2
 develop   |     8 |   6000 |                                        .2
 personnel |     5 |   3500 |                                        .5
 personnel |     2 |   3900 |                                        .5
 sales     |     4 |   4800 | .3333333333333333333333333333333333333333
 sales     |     3 |   4800 | .3333333333333333333333333333333333333333
 sales     |     1 |   5000 | .3333333333333333333333333333333333333333
(10 rows)

select depname,salary,sum(salary) over(), ratio_to_report(salary) over() from empsalary order by 1;
  DEPNAME  | SALARY |  SUM  |              RATIO_TO_REPORT              
-----------+--------+-------+-------------------------------------------
 develop   |   5200 | 47100 | .1104033970276008492569002123142250530786
 develop   |   4200 | 47100 | .0891719745222929936305732484076433121019
 develop   |   4500 | 47100 | .0955414012738853503184713375796178343949
 develop   |   6000 | 47100 | .1273885350318471337579617834394904458599
 develop   |   5200 | 47100 | .1104033970276008492569002123142250530786
 personnel |   3500 | 47100 | .0743099787685774946921443736730360934183
 personnel |   3900 | 47100 | .0828025477707006369426751592356687898089
 sales     |   5000 | 47100 | .1061571125265392781316348195329087048832
 sales     |   4800 | 47100 | .1019108280254777070063694267515923566879
 sales     |   4800 | 47100 | .1019108280254777070063694267515923566879
(10 rows)

select depname,empno,salary,sum(salary) over(partition by depname), ratio_to_report(salary) over(partition by depname order by salary) from empsalary order by 1;
  DEPNAME  | EMPNO | SALARY |  SUM  |              RATIO_TO_REPORT              
-----------+-------+--------+-------+-------------------------------------------
 develop   |     7 |   4200 | 25100 | .1673306772908366533864541832669322709163
 develop   |     9 |   4500 | 25100 | .1792828685258964143426294820717131474104
 develop   |    10 |   5200 | 25100 | .2071713147410358565737051792828685258964
 develop   |    11 |   5200 | 25100 | .2071713147410358565737051792828685258964
 develop   |     8 |   6000 | 25100 | .2390438247011952191235059760956175298805
 personnel |     5 |   3500 |  7400 |  .472972972972972972972972972972972972973
 personnel |     2 |   3900 |  7400 |  .527027027027027027027027027027027027027
 sales     |     4 |   4800 | 14600 | .3287671232876712328767123287671232876712
 sales     |     3 |   4800 | 14600 | .3287671232876712328767123287671232876712
 sales     |     1 |   5000 | 14600 | .3424657534246575342465753424657534246575
(10 rows)

select depname,salary,empno,ratio_to_report(salary) over(), sum(salary) over(), ratio_to_report(empno) over(), sum(empno) over() from empsalary order by 1;
  DEPNAME  | SALARY | EMPNO |              RATIO_TO_REPORT              |  SUM  |              RATIO_TO_REPORT              | SUM 
-----------+--------+-------+-------------------------------------------+-------+-------------------------------------------+-----
 develop   |   5200 |    10 | .1104033970276008492569002123142250530786 | 47100 | .1666666666666666666666666666666666666667 |  60
 develop   |   4200 |     7 | .0891719745222929936305732484076433121019 | 47100 | .1166666666666666666666666666666666666667 |  60
 develop   |   4500 |     9 | .0955414012738853503184713375796178343949 | 47100 |                                       .15 |  60
 develop   |   6000 |     8 | .1273885350318471337579617834394904458599 | 47100 | .1333333333333333333333333333333333333333 |  60
 develop   |   5200 |    11 | .1104033970276008492569002123142250530786 | 47100 | .1833333333333333333333333333333333333333 |  60
 personnel |   3500 |     5 | .0743099787685774946921443736730360934183 | 47100 | .0833333333333333333333333333333333333333 |  60
 personnel |   3900 |     2 | .0828025477707006369426751592356687898089 | 47100 | .0333333333333333333333333333333333333333 |  60
 sales     |   5000 |     1 | .1061571125265392781316348195329087048832 | 47100 | .0166666666666666666666666666666666666667 |  60
 sales     |   4800 |     4 | .1019108280254777070063694267515923566879 | 47100 | .0666666666666666666666666666666666666667 |  60
 sales     |   4800 |     3 | .1019108280254777070063694267515923566879 | 47100 |                                       .05 |  60
(10 rows)

select depname,empno,salary,ratio_to_report(salary) over(partition by depname order by salary), sum(salary) over(partition by depname), ratio_to_report(salary) over(), sum(salary) over() from empsalary order by 1;
  DEPNAME  | EMPNO | SALARY |              RATIO_TO_REPORT              |  SUM  |              RATIO_TO_REPORT              |  SUM  
-----------+-------+--------+-------------------------------------------+-------+-------------------------------------------+-------
 develop   |     7 |   4200 | .1673306772908366533864541832669322709163 | 25100 | .0891719745222929936305732484076433121019 | 47100
 develop   |     9 |   4500 | .1792828685258964143426294820717131474104 | 25100 | .0955414012738853503184713375796178343949 | 47100
 develop   |    10 |   5200 | .2071713147410358565737051792828685258964 | 25100 | .1104033970276008492569002123142250530786 | 47100
 develop   |    11 |   5200 | .2071713147410358565737051792828685258964 | 25100 | .1104033970276008492569002123142250530786 | 47100
 develop   |     8 |   6000 | .2390438247011952191235059760956175298805 | 25100 | .1273885350318471337579617834394904458599 | 47100
 personnel |     5 |   3500 |  .472972972972972972972972972972972972973 |  7400 | .0743099787685774946921443736730360934183 | 47100
 personnel |     2 |   3900 |  .527027027027027027027027027027027027027 |  7400 | .0828025477707006369426751592356687898089 | 47100
 sales     |     4 |   4800 | .3287671232876712328767123287671232876712 | 14600 | .1019108280254777070063694267515923566879 | 47100
 sales     |     3 |   4800 | .3287671232876712328767123287671232876712 | 14600 | .1019108280254777070063694267515923566879 | 47100
 sales     |     1 |   5000 | .3424657534246575342465753424657534246575 | 14600 | .1061571125265392781316348195329087048832 | 47100
(10 rows)

DROP VIEW v_window;
ERROR:  view "V_WINDOW" does not exist
CREATE TEMP VIEW v_window AS
	SELECT i, min(i) over (order by i range between '1 day' preceding and '10 days' following) as min_i
  FROM generate_series(now(), now()+'100 days'::interval, '1 hour') i;
SELECT pg_get_viewdef('v_window');
                                                      PG_GET_VIEWDEF                                                       
---------------------------------------------------------------------------------------------------------------------------
  SELECT I.I,                                                                                                             +
     MIN(I.I) OVER (ORDER BY I.I RANGE BETWEEN '@ 1 day'::INTERVAL PRECEDING AND '@ 10 days'::INTERVAL FOLLOWING) AS MIN_I+
    FROM GENERATE_SERIES(NOW(), (NOW() + '@ 100 days'::INTERVAL), '@ 1 hour'::INTERVAL) I(I);
(1 row)

-- RANGE offset PRECEDING/FOLLOWING tests
SELECT sum(unique1) over (order by four range between 2::int8 preceding and 1::int2 preceding),
	unique1, four
FROM tenk1 WHERE unique1 < 10;
 SUM | UNIQUE1 | FOUR 
-----+---------+------
(0 rows)

SELECT sum(unique1) over (order by four desc range between 2::int8 preceding and 1::int2 preceding),
	unique1, four
FROM tenk1 WHERE unique1 < 10;
 SUM | UNIQUE1 | FOUR 
-----+---------+------
(0 rows)

SELECT sum(unique1) over (partition by four order by unique1 range between 5::int8 preceding and 6::int2 following),
	unique1, four
FROM tenk1 WHERE unique1 < 10;
 SUM | UNIQUE1 | FOUR 
-----+---------+------
(0 rows)

select sum(salary) over (order by enroll_date range between '1 year'::interval preceding and '1 year'::interval following),
	salary, enroll_date from empsalary order by 1, 2, 3;
  SUM  | SALARY | ENROLL_DATE 
-------+--------+-------------
 32200 |   4200 | 01-01-2008
 32200 |   4500 | 01-01-2008
 34900 |   5000 | 10-01-2006
 34900 |   6000 | 10-01-2006
 36100 |   3500 | 12-10-2007
 38400 |   3900 | 12-23-2006
 47100 |   4800 | 08-01-2007
 47100 |   4800 | 08-08-2007
 47100 |   5200 | 08-01-2007
 47100 |   5200 | 08-15-2007
(10 rows)

select sum(salary) over (order by enroll_date desc range between '1 year'::interval preceding and '1 year'::interval following),
	salary, enroll_date from empsalary order by 1, 2, 3;
  SUM  | SALARY | ENROLL_DATE 
-------+--------+-------------
 32200 |   4200 | 01-01-2008
 32200 |   4500 | 01-01-2008
 34900 |   5000 | 10-01-2006
 34900 |   6000 | 10-01-2006
 36100 |   3500 | 12-10-2007
 38400 |   3900 | 12-23-2006
 47100 |   4800 | 08-01-2007
 47100 |   4800 | 08-08-2007
 47100 |   5200 | 08-01-2007
 47100 |   5200 | 08-15-2007
(10 rows)

select sum(salary) over (order by enroll_date desc range between '1 year'::interval following and '1 year'::interval following),
	salary, enroll_date from empsalary order by 1, 2 ,3;
 SUM | SALARY | ENROLL_DATE 
-----+--------+-------------
     |   3500 | 12-10-2007
     |   3900 | 12-23-2006
     |   4200 | 01-01-2008
     |   4500 | 01-01-2008
     |   4800 | 08-01-2007
     |   4800 | 08-08-2007
     |   5000 | 10-01-2006
     |   5200 | 08-01-2007
     |   5200 | 08-15-2007
     |   6000 | 10-01-2006
(10 rows)

select first_value(salary) over(order by salary range between 1000 preceding and 1000 following),
	lead(salary) over(order by salary range between 1000 preceding and 1000 following),
	nth_value(salary, 1) over(order by salary range between 1000 preceding and 1000 following),
	salary from empsalary order by 1, 2, 3, 4;
 FIRST_VALUE | LEAD | NTH_VALUE | SALARY 
-------------+------+-----------+--------
        3500 | 3900 |      3500 |   3500
        3500 | 4200 |      3500 |   3900
        3500 | 4500 |      3500 |   4200
        3500 | 4800 |      3500 |   4500
        3900 | 4800 |      3900 |   4800
        3900 | 5000 |      3900 |   4800
        4200 | 5200 |      4200 |   5000
        4200 | 5200 |      4200 |   5200
        4200 | 6000 |      4200 |   5200
        5000 |      |      5000 |   6000
(10 rows)

select last_value(salary) over(order by salary range between 1000 preceding and 1000 following),
	lag(salary) over(order by salary range between 1000 preceding and 1000 following),
	salary from empsalary order by 1, 2, 3;
 LAST_VALUE | LAG  | SALARY 
------------+------+--------
       4500 |      |   3500
       4800 | 3500 |   3900
       5200 | 3900 |   4200
       5200 | 4200 |   4500
       5200 | 4500 |   4800
       5200 | 4800 |   4800
       6000 | 4800 |   5000
       6000 | 5000 |   5200
       6000 | 5200 |   5200
       6000 | 5200 |   6000
(10 rows)

-- RANGE offset PRECEDING/FOLLOWING with null values
select x, y,
       first_value(y) over w,
       last_value(y) over w
from
  (select x, x as y from generate_series(1,5) as x
   union all select null, 42
   union all select null, 43) ss
window w as
  (order by x asc nulls first range between 2 preceding and 2 following);
 X | Y  | FIRST_VALUE | LAST_VALUE 
---+----+-------------+------------
   | 42 |          42 |         43
   | 43 |          42 |         43
 1 |  1 |           1 |          3
 2 |  2 |           1 |          4
 3 |  3 |           1 |          5
 4 |  4 |           2 |          5
 5 |  5 |           3 |          5
(7 rows)

select x, y,
       first_value(y) over w,
       last_value(y) over w
from
  (select x, x as y from generate_series(1,5) as x
   union all select null, 42
   union all select null, 43) ss
window w as
  (order by x asc nulls last range between 2 preceding and 2 following);
 X | Y  | FIRST_VALUE | LAST_VALUE 
---+----+-------------+------------
 1 |  1 |           1 |          3
 2 |  2 |           1 |          4
 3 |  3 |           1 |          5
 4 |  4 |           2 |          5
 5 |  5 |           3 |          5
   | 42 |          42 |         43
   | 43 |          42 |         43
(7 rows)

select x, y,
       first_value(y) over w,
       last_value(y) over w
from
  (select x, x as y from generate_series(1,5) as x
   union all select null, 42
   union all select null, 43) ss
window w as
  (order by x desc nulls first range between 2 preceding and 2 following);
 X | Y  | FIRST_VALUE | LAST_VALUE 
---+----+-------------+------------
   | 42 |          42 |         43
   | 43 |          42 |         43
 5 |  5 |           5 |          3
 4 |  4 |           5 |          2
 3 |  3 |           5 |          1
 2 |  2 |           4 |          1
 1 |  1 |           3 |          1
(7 rows)

select x, y,
       first_value(y) over w,
       last_value(y) over w
from
  (select x, x as y from generate_series(1,5) as x
   union all select null, 42
   union all select null, 43) ss
window w as
  (order by x desc nulls last range between 2 preceding and 2 following);
 X | Y  | FIRST_VALUE | LAST_VALUE 
---+----+-------------+------------
 5 |  5 |           5 |          3
 4 |  4 |           5 |          2
 3 |  3 |           5 |          1
 2 |  2 |           4 |          1
 1 |  1 |           3 |          1
   | 42 |          42 |         43
   | 43 |          42 |         43
(7 rows)

-- Check overflow behavior for various integer sizes
select x, last_value(x) over (order by x::smallint range between current row and 2147450884 following)
from generate_series(32764, 32766) x;
   X   | LAST_VALUE 
-------+------------
 32764 |      32766
 32765 |      32766
 32766 |      32766
(3 rows)

select x, last_value(x) over (order by x::smallint desc range between current row and 2147450885 following)
from generate_series(-32766, -32764) x;
   X    | LAST_VALUE 
--------+------------
 -32764 |     -32766
 -32765 |     -32766
 -32766 |     -32766
(3 rows)

select x, last_value(x) over (order by x range between current row and 4 following)
from generate_series(2147483644, 2147483646) x;
     X      | LAST_VALUE 
------------+------------
 2147483644 | 2147483646
 2147483645 | 2147483646
 2147483646 | 2147483646
(3 rows)

select x, last_value(x) over (order by x desc range between current row and 5 following)
from generate_series(-2147483646, -2147483644) x;
      X      | LAST_VALUE  
-------------+-------------
 -2147483644 | -2147483646
 -2147483645 | -2147483646
 -2147483646 | -2147483646
(3 rows)

select x, last_value(x) over (order by x range between current row and 4 following)
from generate_series(9223372036854775804, 9223372036854775806) x;
          X          |     LAST_VALUE      
---------------------+---------------------
 9223372036854775804 | 9223372036854775806
 9223372036854775805 | 9223372036854775806
 9223372036854775806 | 9223372036854775806
(3 rows)

select x, last_value(x) over (order by x desc range between current row and 5 following)
from generate_series(-9223372036854775806, -9223372036854775804) x;
          X           |      LAST_VALUE      
----------------------+----------------------
 -9223372036854775804 | -9223372036854775806
 -9223372036854775805 | -9223372036854775806
 -9223372036854775806 | -9223372036854775806
(3 rows)

-- Test in_range for other numeric datatypes
create temp table numerics(
    id int,
    f_float4 float4,
    f_float8 float8,
    f_numeric numeric
);
insert into numerics values
(0, '-infinity', '-infinity', '-1000'),  -- numeric type lacks infinities
(1, -3, -3, -3),
(2, -1, -1, -1),
(3, 0, 0, 0),
(4, 1.1, 1.1, 1.1),
(5, 1.12, 1.12, 1.12),
(6, 2, 2, 2),
(7, 100, 100, 100),
(8, 'infinity', 'infinity', '1000'),
(9, 'NaN', 'NaN', 'NaN');
select id, f_float4, first_value(id) over w, last_value(id) over w
from numerics
window w as (order by f_float4 range between
             1 preceding and 1 following);
 ID | F_FLOAT4  | FIRST_VALUE | LAST_VALUE 
----+-----------+-------------+------------
  0 | -Infinity |           0 |          0
  1 |        -3 |           1 |          1
  2 |        -1 |           2 |          3
  3 |         0 |           2 |          3
  4 |       1.1 |           4 |          6
  5 |      1.12 |           4 |          6
  6 |         2 |           4 |          6
  7 |       100 |           7 |          7
  8 |  Infinity |           8 |          8
  9 |       NaN |           9 |          9
(10 rows)

select id, f_float4, first_value(id) over w, last_value(id) over w
from numerics
window w as (order by f_float4 range between
             1 preceding and 1.1::float4 following);
 ID | F_FLOAT4  | FIRST_VALUE | LAST_VALUE 
----+-----------+-------------+------------
  0 | -Infinity |           0 |          0
  1 |        -3 |           1 |          1
  2 |        -1 |           2 |          3
  3 |         0 |           2 |          4
  4 |       1.1 |           4 |          6
  5 |      1.12 |           4 |          6
  6 |         2 |           4 |          6
  7 |       100 |           7 |          7
  8 |  Infinity |           8 |          8
  9 |       NaN |           9 |          9
(10 rows)

select id, f_float4, first_value(id) over w, last_value(id) over w
from numerics
window w as (order by f_float4 range between
             'inf' preceding and 'inf' following);
 ID | F_FLOAT4  | FIRST_VALUE | LAST_VALUE 
----+-----------+-------------+------------
  0 | -Infinity |           0 |          8
  1 |        -3 |           0 |          8
  2 |        -1 |           0 |          8
  3 |         0 |           0 |          8
  4 |       1.1 |           0 |          8
  5 |      1.12 |           0 |          8
  6 |         2 |           0 |          8
  7 |       100 |           0 |          8
  8 |  Infinity |           0 |          8
  9 |       NaN |           9 |          9
(10 rows)

select id, f_float4, first_value(id) over w, last_value(id) over w
from numerics
window w as (order by f_float4 range between
             1.1 preceding and 'NaN' following);  -- error, NaN disallowed
ERROR:  invalid preceding or following size in window function
select id, f_float8, first_value(id) over w, last_value(id) over w
from numerics
window w as (order by f_float8 range between
             1 preceding and 1 following);
 ID | F_FLOAT8  | FIRST_VALUE | LAST_VALUE 
----+-----------+-------------+------------
  0 | -Infinity |           0 |          0
  1 |        -3 |           1 |          1
  2 |        -1 |           2 |          3
  3 |         0 |           2 |          3
  4 |       1.1 |           4 |          6
  5 |      1.12 |           4 |          6
  6 |         2 |           4 |          6
  7 |       100 |           7 |          7
  8 |  Infinity |           8 |          8
  9 |       NaN |           9 |          9
(10 rows)

select id, f_float8, first_value(id) over w, last_value(id) over w
from numerics
window w as (order by f_float8 range between
             1 preceding and 1.1::float8 following);
 ID | F_FLOAT8  | FIRST_VALUE | LAST_VALUE 
----+-----------+-------------+------------
  0 | -Infinity |           0 |          0
  1 |        -3 |           1 |          1
  2 |        -1 |           2 |          3
  3 |         0 |           2 |          4
  4 |       1.1 |           4 |          6
  5 |      1.12 |           4 |          6
  6 |         2 |           4 |          6
  7 |       100 |           7 |          7
  8 |  Infinity |           8 |          8
  9 |       NaN |           9 |          9
(10 rows)

select id, f_float8, first_value(id) over w, last_value(id) over w
from numerics
window w as (order by f_float8 range between
             'inf' preceding and 'inf' following);
 ID | F_FLOAT8  | FIRST_VALUE | LAST_VALUE 
----+-----------+-------------+------------
  0 | -Infinity |           0 |          8
  1 |        -3 |           0 |          8
  2 |        -1 |           0 |          8
  3 |         0 |           0 |          8
  4 |       1.1 |           0 |          8
  5 |      1.12 |           0 |          8
  6 |         2 |           0 |          8
  7 |       100 |           0 |          8
  8 |  Infinity |           0 |          8
  9 |       NaN |           9 |          9
(10 rows)

select id, f_float8, first_value(id) over w, last_value(id) over w
from numerics
window w as (order by f_float8 range between
             1.1 preceding and 'NaN' following);  -- error, NaN disallowed
ERROR:  invalid preceding or following size in window function
select id, f_numeric, first_value(id) over w, last_value(id) over w
from numerics
window w as (order by f_numeric range between
             1 preceding and 1 following);
 ID | F_NUMERIC | FIRST_VALUE | LAST_VALUE 
----+-----------+-------------+------------
  0 |     -1000 |           0 |          0
  1 |        -3 |           1 |          1
  2 |        -1 |           2 |          3
  3 |         0 |           2 |          3
  4 |       1.1 |           4 |          6
  5 |      1.12 |           4 |          6
  6 |         2 |           4 |          6
  7 |       100 |           7 |          7
  8 |      1000 |           8 |          8
  9 |       NaN |           9 |          9
(10 rows)

select id, f_numeric, first_value(id) over w, last_value(id) over w
from numerics
window w as (order by f_numeric range between
             1 preceding and 1.1::numeric following);
 ID | F_NUMERIC | FIRST_VALUE | LAST_VALUE 
----+-----------+-------------+------------
  0 |     -1000 |           0 |          0
  1 |        -3 |           1 |          1
  2 |        -1 |           2 |          3
  3 |         0 |           2 |          4
  4 |       1.1 |           4 |          6
  5 |      1.12 |           4 |          6
  6 |         2 |           4 |          6
  7 |       100 |           7 |          7
  8 |      1000 |           8 |          8
  9 |       NaN |           9 |          9
(10 rows)

select id, f_numeric, first_value(id) over w, last_value(id) over w
from numerics
window w as (order by f_numeric range between
             1.1 preceding and 'NaN' following);  -- error, NaN disallowed
ERROR:  invalid preceding or following size in window function
-- Test in_range for other datetime datatypes
create temp table datetimes(
    id int,
    f_time time,
    f_timetz timetz,
    f_interval interval,
    f_timestamptz timestamptz,
    f_timestamp timestamp
);
insert into datetimes values
(1, '11:00', '11:00 BST', '1 year', '2000-10-19 10:23:54+01', '2000-10-19 10:23:54'),
(2, '12:00', '12:00 BST', '2 years', '2001-10-19 10:23:54+01', '2001-10-19 10:23:54'),
(3, '13:00', '13:00 BST', '3 years', '2001-10-19 10:23:54+01', '2001-10-19 10:23:54'),
(4, '14:00', '14:00 BST', '4 years', '2002-10-19 10:23:54+01', '2002-10-19 10:23:54'),
(5, '15:00', '15:00 BST', '5 years', '2003-10-19 10:23:54+01', '2003-10-19 10:23:54'),
(6, '15:00', '15:00 BST', '5 years', '2004-10-19 10:23:54+01', '2004-10-19 10:23:54'),
(7, '17:00', '17:00 BST', '7 years', '2005-10-19 10:23:54+01', '2005-10-19 10:23:54'),
(8, '18:00', '18:00 BST', '8 years', '2006-10-19 10:23:54+01', '2006-10-19 10:23:54'),
(9, '19:00', '19:00 BST', '9 years', '2007-10-19 10:23:54+01', '2007-10-19 10:23:54'),
(10, '20:00', '20:00 BST', '10 years', '2008-10-19 10:23:54+01', '2008-10-19 10:23:54');
select id, f_time, first_value(id) over w, last_value(id) over w
from datetimes
window w as (order by f_time range between
             '70 min'::interval preceding and '2 hours'::interval following);
 ID |  F_TIME  | FIRST_VALUE | LAST_VALUE 
----+----------+-------------+------------
  1 | 11:00:00 |           1 |          3
  2 | 12:00:00 |           1 |          4
  3 | 13:00:00 |           2 |          6
  4 | 14:00:00 |           3 |          6
  5 | 15:00:00 |           4 |          7
  6 | 15:00:00 |           4 |          7
  7 | 17:00:00 |           7 |          9
  8 | 18:00:00 |           7 |         10
  9 | 19:00:00 |           8 |         10
 10 | 20:00:00 |           9 |         10
(10 rows)

select id, f_time, first_value(id) over w, last_value(id) over w
from datetimes
window w as (order by f_time desc range between
             '70 min' preceding and '2 hours' following);
 ID |  F_TIME  | FIRST_VALUE | LAST_VALUE 
----+----------+-------------+------------
 10 | 20:00:00 |          10 |          8
  9 | 19:00:00 |          10 |          7
  8 | 18:00:00 |           9 |          7
  7 | 17:00:00 |           8 |          6
  5 | 15:00:00 |           5 |          3
  6 | 15:00:00 |           5 |          3
  4 | 14:00:00 |           5 |          2
  3 | 13:00:00 |           4 |          1
  2 | 12:00:00 |           3 |          1
  1 | 11:00:00 |           2 |          1
(10 rows)

select id, f_timetz, first_value(id) over w, last_value(id) over w
from datetimes
window w as (order by f_timetz range between
             '70 min'::interval preceding and '2 hours'::interval following);
 ID |  F_TIMETZ   | FIRST_VALUE | LAST_VALUE 
----+-------------+-------------+------------
  1 | 11:00:00+01 |           1 |          3
  2 | 12:00:00+01 |           1 |          4
  3 | 13:00:00+01 |           2 |          6
  4 | 14:00:00+01 |           3 |          6
  5 | 15:00:00+01 |           4 |          7
  6 | 15:00:00+01 |           4 |          7
  7 | 17:00:00+01 |           7 |          9
  8 | 18:00:00+01 |           7 |         10
  9 | 19:00:00+01 |           8 |         10
 10 | 20:00:00+01 |           9 |         10
(10 rows)

select id, f_timetz, first_value(id) over w, last_value(id) over w
from datetimes
window w as (order by f_timetz desc range between
             '70 min' preceding and '2 hours' following);
 ID |  F_TIMETZ   | FIRST_VALUE | LAST_VALUE 
----+-------------+-------------+------------
 10 | 20:00:00+01 |          10 |          8
  9 | 19:00:00+01 |          10 |          7
  8 | 18:00:00+01 |           9 |          7
  7 | 17:00:00+01 |           8 |          6
  5 | 15:00:00+01 |           5 |          3
  6 | 15:00:00+01 |           5 |          3
  4 | 14:00:00+01 |           5 |          2
  3 | 13:00:00+01 |           4 |          1
  2 | 12:00:00+01 |           3 |          1
  1 | 11:00:00+01 |           2 |          1
(10 rows)

select id, f_interval, first_value(id) over w, last_value(id) over w
from datetimes
window w as (order by f_interval range between
             '1 year'::interval preceding and '1 year'::interval following);
 ID | F_INTERVAL | FIRST_VALUE | LAST_VALUE 
----+------------+-------------+------------
  1 | @ 1 year   |           1 |          2
  2 | @ 2 years  |           1 |          3
  3 | @ 3 years  |           2 |          4
  4 | @ 4 years  |           3 |          6
  5 | @ 5 years  |           4 |          6
  6 | @ 5 years  |           4 |          6
  7 | @ 7 years  |           7 |          8
  8 | @ 8 years  |           7 |          9
  9 | @ 9 years  |           8 |         10
 10 | @ 10 years |           9 |         10
(10 rows)

select id, f_interval, first_value(id) over w, last_value(id) over w
from datetimes
window w as (order by f_interval desc range between
             '1 year' preceding and '1 year' following);
 ID | F_INTERVAL | FIRST_VALUE | LAST_VALUE 
----+------------+-------------+------------
 10 | @ 10 years |          10 |          9
  9 | @ 9 years  |          10 |          8
  8 | @ 8 years  |           9 |          7
  7 | @ 7 years  |           8 |          7
  5 | @ 5 years  |           5 |          4
  6 | @ 5 years  |           5 |          4
  4 | @ 4 years  |           5 |          3
  3 | @ 3 years  |           4 |          2
  2 | @ 2 years  |           3 |          1
  1 | @ 1 year   |           2 |          1
(10 rows)

select id, f_timestamptz, first_value(id) over w, last_value(id) over w
from datetimes
window w as (order by f_timestamptz range between
             '1 year'::interval preceding and '1 year'::interval following);
 ID |        F_TIMESTAMPTZ         | FIRST_VALUE | LAST_VALUE 
----+------------------------------+-------------+------------
  1 | Thu Oct 19 02:23:54 2000 PDT |           1 |          3
  2 | Fri Oct 19 02:23:54 2001 PDT |           1 |          4
  3 | Fri Oct 19 02:23:54 2001 PDT |           1 |          4
  4 | Sat Oct 19 02:23:54 2002 PDT |           2 |          5
  5 | Sun Oct 19 02:23:54 2003 PDT |           4 |          6
  6 | Tue Oct 19 02:23:54 2004 PDT |           5 |          7
  7 | Wed Oct 19 02:23:54 2005 PDT |           6 |          8
  8 | Thu Oct 19 02:23:54 2006 PDT |           7 |          9
  9 | Fri Oct 19 02:23:54 2007 PDT |           8 |         10
 10 | Sun Oct 19 02:23:54 2008 PDT |           9 |         10
(10 rows)

select id, f_timestamptz, first_value(id) over w, last_value(id) over w
from datetimes
window w as (order by f_timestamptz desc range between
             '1 year' preceding and '1 year' following);
 ID |        F_TIMESTAMPTZ         | FIRST_VALUE | LAST_VALUE 
----+------------------------------+-------------+------------
 10 | Sun Oct 19 02:23:54 2008 PDT |          10 |          9
  9 | Fri Oct 19 02:23:54 2007 PDT |          10 |          8
  8 | Thu Oct 19 02:23:54 2006 PDT |           9 |          7
  7 | Wed Oct 19 02:23:54 2005 PDT |           8 |          6
  6 | Tue Oct 19 02:23:54 2004 PDT |           7 |          5
  5 | Sun Oct 19 02:23:54 2003 PDT |           6 |          4
  4 | Sat Oct 19 02:23:54 2002 PDT |           5 |          2
  3 | Fri Oct 19 02:23:54 2001 PDT |           4 |          1
  2 | Fri Oct 19 02:23:54 2001 PDT |           4 |          1
  1 | Thu Oct 19 02:23:54 2000 PDT |           3 |          1
(10 rows)

select id, f_timestamp, first_value(id) over w, last_value(id) over w
from datetimes
window w as (order by f_timestamp range between
             '1 year'::interval preceding and '1 year'::interval following);
 ID |       F_TIMESTAMP        | FIRST_VALUE | LAST_VALUE 
----+--------------------------+-------------+------------
  1 | Thu Oct 19 10:23:54 2000 |           1 |          3
  2 | Fri Oct 19 10:23:54 2001 |           1 |          4
  3 | Fri Oct 19 10:23:54 2001 |           1 |          4
  4 | Sat Oct 19 10:23:54 2002 |           2 |          5
  5 | Sun Oct 19 10:23:54 2003 |           4 |          6
  6 | Tue Oct 19 10:23:54 2004 |           5 |          7
  7 | Wed Oct 19 10:23:54 2005 |           6 |          8
  8 | Thu Oct 19 10:23:54 2006 |           7 |          9
  9 | Fri Oct 19 10:23:54 2007 |           8 |         10
 10 | Sun Oct 19 10:23:54 2008 |           9 |         10
(10 rows)

select id, f_timestamp, first_value(id) over w, last_value(id) over w
from datetimes
window w as (order by f_timestamp desc range between
             '1 year' preceding and '1 year' following);
 ID |       F_TIMESTAMP        | FIRST_VALUE | LAST_VALUE 
----+--------------------------+-------------+------------
 10 | Sun Oct 19 10:23:54 2008 |          10 |          9
  9 | Fri Oct 19 10:23:54 2007 |          10 |          8
  8 | Thu Oct 19 10:23:54 2006 |           9 |          7
  7 | Wed Oct 19 10:23:54 2005 |           8 |          6
  6 | Tue Oct 19 10:23:54 2004 |           7 |          5
  5 | Sun Oct 19 10:23:54 2003 |           6 |          4
  4 | Sat Oct 19 10:23:54 2002 |           5 |          2
  3 | Fri Oct 19 10:23:54 2001 |           4 |          1
  2 | Fri Oct 19 10:23:54 2001 |           4 |          1
  1 | Thu Oct 19 10:23:54 2000 |           3 |          1
(10 rows)

-- Show differences in offset interpretation between ROWS, RANGE, and GROUPS
WITH cte (x) AS (
        SELECT * FROM generate_series(1, 35, 2)
)
SELECT x, (sum(x) over w)
FROM cte
WINDOW w AS (ORDER BY x rows between 1 preceding and 1 following);
 X  | SUM 
----+-----
  1 |   4
  3 |   9
  5 |  15
  7 |  21
  9 |  27
 11 |  33
 13 |  39
 15 |  45
 17 |  51
 19 |  57
 21 |  63
 23 |  69
 25 |  75
 27 |  81
 29 |  87
 31 |  93
 33 |  99
 35 |  68
(18 rows)

WITH cte (x) AS (
        SELECT * FROM generate_series(1, 35, 2)
)
SELECT x, (sum(x) over w)
FROM cte
WINDOW w AS (ORDER BY x range between 1 preceding and 1 following);
 X  | SUM 
----+-----
  1 |   1
  3 |   3
  5 |   5
  7 |   7
  9 |   9
 11 |  11
 13 |  13
 15 |  15
 17 |  17
 19 |  19
 21 |  21
 23 |  23
 25 |  25
 27 |  27
 29 |  29
 31 |  31
 33 |  33
 35 |  35
(18 rows)

WITH cte (x) AS (
        select 1 union all select 1 union all select 1 union all
        SELECT * FROM generate_series(5, 49, 2)
)
SELECT x, (sum(x) over w)
FROM cte
WINDOW w AS (ORDER BY x rows between 1 preceding and 1 following);
 X  | SUM 
----+-----
  1 |   2
  1 |   3
  1 |   7
  5 |  13
  7 |  21
  9 |  27
 11 |  33
 13 |  39
 15 |  45
 17 |  51
 19 |  57
 21 |  63
 23 |  69
 25 |  75
 27 |  81
 29 |  87
 31 |  93
 33 |  99
 35 | 105
 37 | 111
 39 | 117
 41 | 123
 43 | 129
 45 | 135
 47 | 141
 49 |  96
(26 rows)

WITH cte (x) AS (
        select 1 union all select 1 union all select 1 union all
        SELECT * FROM generate_series(5, 49, 2)
)
SELECT x, (sum(x) over w)
FROM cte
WINDOW w AS (ORDER BY x range between 1 preceding and 1 following);
 X  | SUM 
----+-----
  1 |   3
  1 |   3
  1 |   3
  5 |   5
  7 |   7
  9 |   9
 11 |  11
 13 |  13
 15 |  15
 17 |  17
 19 |  19
 21 |  21
 23 |  23
 25 |  25
 27 |  27
 29 |  29
 31 |  31
 33 |  33
 35 |  35
 37 |  37
 39 |  39
 41 |  41
 43 |  43
 45 |  45
 47 |  47
 49 |  49
(26 rows)

-- check some degenerate cases
create temp table t1 (f1 int, f2 int8);
insert into t1 values (1,1),(1,2),(2,2);
select f1, sum(f1) over (partition by f1
                         range between 1 preceding and 1 following)
from t1 where f1 = f2;  -- error, must have order by
ERROR:  RANGE with offset PRECEDING/FOLLOWING requires exactly one ORDER BY column
LINE 1: select f1, sum(f1) over (partition by f1
                                ^
explain (costs off)
select f1, sum(f1) over (partition by f1 order by f2
                         range between 1 preceding and 1 following)
from t1 where f1 = f2;
                QUERY PLAN                 
-------------------------------------------
 Remote Subquery Scan on all (datanodes 2)
   Sort Key: F1
   ->  WindowAgg
         ->  Sort
               Sort Key: F1
               ->  Seq Scan on T1
                     Filter: (F1 = F2)
(7 rows)

select f1, sum(f1) over (partition by f1 order by f2
                         range between 1 preceding and 1 following)
from t1 where f1 = f2;
 F1 | SUM 
----+-----
  1 |   1
  2 |   2
(2 rows)

select f1, sum(f1) over (partition by f1, f1 order by f2
                         range between 2 preceding and 1 preceding)
from t1 where f1 = f2;
 F1 | SUM 
----+-----
  1 |    
  2 |    
(2 rows)

select f1, sum(f1) over (partition by f1, f2 order by f2
                         range between 1 following and 2 following)
from t1 where f1 = f2;
 F1 | SUM 
----+-----
  1 |    
  2 |    
(2 rows)

select f1, sum(f1) over (partition by f1
                         groups between 1 preceding and 1 following)
from t1 where f1 = f2;  -- error, must have order by
ERROR:  syntax error at or near "groups"
LINE 2:                          groups between 1 preceding and 1 fo...
                                 ^
explain (costs off)
select f1, sum(f1) over (partition by f1 order by f2
                         groups between 1 preceding and 1 following)
from t1 where f1 = f2;
ERROR:  syntax error at or near "groups"
LINE 3:                          groups between 1 preceding and 1 fo...
                                 ^
select f1, sum(f1) over (partition by f1 order by f2
                         groups between 1 preceding and 1 following)
from t1 where f1 = f2;
ERROR:  syntax error at or near "groups"
LINE 2:                          groups between 1 preceding and 1 fo...
                                 ^
select f1, sum(f1) over (partition by f1, f1 order by f2
                         groups between 2 preceding and 1 preceding)
from t1 where f1 = f2;
ERROR:  syntax error at or near "groups"
LINE 2:                          groups between 2 preceding and 1 pr...
                                 ^
select f1, sum(f1) over (partition by f1, f2 order by f2
                         groups between 1 following and 2 following)
from t1 where f1 = f2;
ERROR:  syntax error at or near "groups"
LINE 2:                          groups between 1 following and 2 fo...
                                 ^
DROP  table sales;
ERROR:  table "SALES" does not exist
CREATE TABLE sales (
    sale_id NUMBER PRIMARY KEY,
    sale_date DATE NOT NULL,
    product_id NUMBER NOT NULL,
    sub_product_id NUMBER NOT NULL,
    quantity NUMBER NOT NULL
);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (1, TO_DATE('2022-01-01 02:34:01', 'YYYY-MM-DD HH24:MI:SS'), 101, 1011, 10);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (2, TO_DATE('2022-01-02 07:19:05', 'YYYY-MM-DD HH24:MI:SS'), 102, 1021, 5);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (3, TO_DATE('2022-01-03 13:24:06', 'YYYY-MM-DD HH24:MI:SS'), 101, 1011, 15);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (4, TO_DATE('2022-01-04 19:08:10', 'YYYY-MM-DD HH24:MI:SS'), 103, 1031, 20);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (5, TO_DATE('2022-01-05 21:08:12', 'YYYY-MM-DD HH24:MI:SS'), 102, 1021, 10);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (6, TO_DATE('2022-01-06 12:24:16', 'YYYY-MM-DD HH24:MI:SS'), 101, 1012, 25);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (7, TO_DATE('2022-01-07 00:14:18', 'YYYY-MM-DD HH24:MI:SS'), 103, 1031, 30);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (8, TO_DATE('2022-01-08 16:21:22', 'YYYY-MM-DD HH24:MI:SS'), 102, 1021, 15);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (9, TO_DATE('2022-01-09 04:59:25', 'YYYY-MM-DD HH24:MI:SS'), 101, 1011, 30);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (10, TO_DATE('2022-01-10 12:00:49', 'YYYY-MM-DD HH24:MI:SS'), 103, 1031, 35);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (11, TO_DATE('2022-01-11 13:13:37', 'YYYY-MM-DD HH24:MI:SS'), 102, 1021, 20);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (12, TO_DATE('2022-01-12 05:24:32', 'YYYY-MM-DD HH24:MI:SS'), 101, 1012, 35);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (13, TO_DATE('2022-01-13 12:00:55', 'YYYY-MM-DD HH24:MI:SS'), 103, 1031, 40);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (14, TO_DATE('2022-01-14 08:50:56', 'YYYY-MM-DD HH24:MI:SS'), 102, 1022, 25);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (15, TO_DATE('2022-01-15 08:16:00', 'YYYY-MM-DD HH24:MI:SS'), 101, 1011, 40);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (16, TO_DATE('2022-01-16 19:10:49', 'YYYY-MM-DD HH24:MI:SS'), 103, 1031, 45);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (17, TO_DATE('2022-01-17 22:07:37', 'YYYY-MM-DD HH24:MI:SS'), 102, 1022, 30);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (18, TO_DATE('2022-01-18 23:11:55', 'YYYY-MM-DD HH24:MI:SS'), 101, 1012, 45);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (19, TO_DATE('2022-01-19 11:48:56', 'YYYY-MM-DD HH24:MI:SS'), 103, 1031, 50);
INSERT INTO sales (sale_id, sale_date, product_id, sub_product_id, quantity) VALUES (20, TO_DATE('2022-01-20 18:32:11', 'YYYY-MM-DD HH24:MI:SS'), 102, 1022, 35);
