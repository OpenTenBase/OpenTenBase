-- this file contains tests for GROUP BY with combinations of following
-- 1. enable_hashagg = on/off (to force the grouping by sorting)
-- 2. distributed or replicated tables across the datanodes
-- If a testcase is added to any of the combinations, please check if it's
-- applicable in other combinations as well.
-- Since we want to test the plan reduction of GROUP and AGG nodes, disable fast
-- query shipping
set enable_fast_query_shipping to off;
-- Combination 1: enable_hashagg on and distributed tables
set enable_hashagg to on;
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int);
create table xc_groupby_tab2 (val int, val2 int);
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2 order by 1, 2;
 count | sum |        avg         |      ?column?      | val2 
-------+-----+--------------------+--------------------+------
     2 |   8 | 4.0000000000000000 |                  4 |    2
     3 |   6 | 2.0000000000000000 |                  2 |    1
     3 |  11 | 3.6666666666666667 | 3.6666666666666665 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2 order by 1, 2;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), (sum(val)), (avg(val)), (((sum(val))::double precision / (count(*))::double precision)), val2
   Sort Key: (count(*)), (sum(xc_groupby_tab1.val))
   ->  HashAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2, val
(5 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2 order by count(*), 6;
 count | sum |         avg         |     ?column?      | val2 | val2 
-------+-----+---------------------+-------------------+------+------
     3 |     |                     |                   |      |    4
     3 |     |                     |                   |    3 |     
     6 |  96 | 16.0000000000000000 |                16 |    2 |    2
     9 |  78 |  8.6666666666666667 | 8.666666666666666 |    1 |    1
(4 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Merge Full Join
         Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
         Merge Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
         ->  Sort
               Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               Sort Key: xc_groupby_tab1.val2
               ->  Seq Scan on public.xc_groupby_tab1
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Sort
               Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
               Sort Key: xc_groupby_tab2.val2
               ->  Seq Scan on public.xc_groupby_tab2
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(16 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x order by 1;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x order by 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(q1.y)), q1.x
   Sort Key: (sum(q1.y))
   ->  HashAggregate
         Output: sum(q1.y), q1.x
         Group Key: q1.x
         ->  Subquery Scan on q1
               Output: q1.x, q1.y
               ->  HashAggregate
                     Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                     Group Key: xc_groupby_tab1.val2
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
(13 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 HashAggregate
   Output: sum(q1.y), q1.x
   Group Key: q1.x
   ->  Subquery Scan on q1
         Output: q1.x, q1.y
         ->  HashAggregate
               Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
               Group Key: xc_groupby_tab1.val2
               ->  Seq Scan on public.xc_groupby_tab1
                     Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
(10 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2 order by val2;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2 order by val2;
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Output: val2
   Sort Key: xc_groupby_tab1.val2
   ->  HashAggregate
         Output: val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2
(8 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                QUERY PLAN                
------------------------------------------
 HashAggregate
   Output: val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2
(5 rows)

select val + val2 from xc_groupby_tab1 group by val + val2 order by 1;
 ?column? 
----------
        2
        3
        4
        7
        8
        9
(6 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2 order by 1;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Sort
   Output: ((val + val2))
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  HashAggregate
         Output: ((val + val2))
         Group Key: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (val + val2)
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2;
                        QUERY PLAN                         
-----------------------------------------------------------
 HashAggregate
   Output: ((val + val2))
   Group Key: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
   ->  Seq Scan on public.xc_groupby_tab1
         Output: (val + val2)
(5 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2 order by 1, 2, 3;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        3 |   2 |    1
        4 |   1 |    3
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2 order by 1, 2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: ((val + val2)), val, val2
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val
   ->  HashAggregate
         Output: (val + val2), val, val2
         Group Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val, val2
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                       QUERY PLAN                       
--------------------------------------------------------
 HashAggregate
   Output: (val + val2), val, val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val, val2
(5 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2 order by 1, 2, 3;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        5 |   3 |    2
        5 |   4 |    1
        6 |   2 |    4
        6 |   4 |    2
        7 |   3 |    4
(6 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2 order by 1, 2, 3;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  HashAggregate
         Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
         Group Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Merge Join
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 HashAggregate
   Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Merge Join
         Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
         Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
         ->  Sort
               Output: xc_groupby_tab1.val
               Sort Key: xc_groupby_tab1.val
               ->  Seq Scan on public.xc_groupby_tab1
                     Output: xc_groupby_tab1.val
         ->  Sort
               Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
               Sort Key: xc_groupby_tab2.val
               ->  Seq Scan on public.xc_groupby_tab2
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(16 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2 order by 1;
 ?column? 
----------
        2
        5
        6
        7
(4 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2 order by 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  HashAggregate
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         Group Key: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
         ->  Merge Join
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 HashAggregate
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   Group Key: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
   ->  Merge Join
         Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
         Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
         ->  Sort
               Output: xc_groupby_tab1.val
               Sort Key: xc_groupby_tab1.val
               ->  Seq Scan on public.xc_groupby_tab1
                     Output: xc_groupby_tab1.val
         ->  Sort
               Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
               Sort Key: xc_groupby_tab2.val
               ->  Seq Scan on public.xc_groupby_tab2
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(16 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by 1;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by 1;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort
   Output: ((((count(*) + sum(val)))::numeric + avg(val))), val2
   Sort Key: ((((count(*) + sum(xc_groupby_tab1.val)))::numeric + avg(xc_groupby_tab1.val)))
   ->  HashAggregate
         Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashAggregate
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2, val
(5 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 1;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 1;
                    QUERY PLAN                    
--------------------------------------------------
 Sort
   Output: (sum(val)), (avg(val)), ((2 * val2))
   Sort Key: (sum(xc_groupby_tab1.val))
   ->  HashAggregate
         Output: sum(val), avg(val), ((2 * val2))
         Group Key: (2 * xc_groupby_tab1.val2)
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (2 * val2), val
(8 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                 QUERY PLAN                 
--------------------------------------------
 HashAggregate
   Output: sum(val), avg(val), ((2 * val2))
   Group Key: (2 * xc_groupby_tab1.val2)
   ->  Seq Scan on public.xc_groupby_tab1
         Output: (2 * val2), val
(5 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)); 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: a, (count(a))
   Sort Key: xc_groupby_def.a
   ->  HashAggregate
         Output: a, count(a)
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by a order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (avg(a)), a
   Sort Key: (avg(xc_groupby_def.a))
   ->  HashAggregate
         Output: avg(a), a
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: avg(a), a
   Group Key: xc_groupby_def.a
   ->  Seq Scan on public.xc_groupby_def
         Output: a
(5 rows)

select avg(a) from xc_groupby_def group by b order by 1;
        avg         
--------------------
 4.0000000000000000
 4.5000000000000000
 6.2000000000000000
                   
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (avg(a)), b
   Sort Key: (avg(xc_groupby_def.a))
   ->  HashAggregate
         Output: avg(a), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: avg(a), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b, a
(5 rows)

select sum(a) from xc_groupby_def group by b order by 1;
 sum 
-----
   8
  18
  31
    
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (sum(a)), b
   Sort Key: (sum(xc_groupby_def.a))
   ->  HashAggregate
         Output: sum(a), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: sum(a), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b, a
(5 rows)

select count(*) from xc_groupby_def group by b order by 1;
 count 
-------
     1
     3
     4
     5
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (count(*)), b
   Sort Key: (count(*))
   ->  HashAggregate
         Output: count(*), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b
(5 rows)

select count(*) from xc_groupby_def where a is not null group by a order by 1;
 count 
-------
     1
     1
     1
     1
     1
     1
     1
     1
     1
     2
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a order by 1;
                      QUERY PLAN                      
------------------------------------------------------
 Sort
   Output: (count(*)), a
   Sort Key: (count(*))
   ->  HashAggregate
         Output: count(*), a
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
               Filter: (xc_groupby_def.a IS NOT NULL)
(9 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                   QUERY PLAN                   
------------------------------------------------
 HashAggregate
   Output: count(*), a
   Group Key: xc_groupby_def.a
   ->  Seq Scan on public.xc_groupby_def
         Output: a
         Filter: (xc_groupby_def.a IS NOT NULL)
(6 rows)

select * from (select b from xc_groupby_def group by b) q order by q.b;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select b from xc_groupby_def group by b) q order by q.b;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: xc_groupby_def.b
   Sort Key: xc_groupby_def.b
   ->  HashAggregate
         Output: xc_groupby_def.b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: xc_groupby_def.b
(8 rows)

select * from (select b,count(b) from xc_groupby_def group by b) q order by q.b;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select b,count(b) from xc_groupby_def group by b) q order by q.b;
                        QUERY PLAN                         
-----------------------------------------------------------
 Sort
   Output: xc_groupby_def.b, (count(xc_groupby_def.b))
   Sort Key: xc_groupby_def.b
   ->  HashAggregate
         Output: xc_groupby_def.b, count(xc_groupby_def.b)
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: xc_groupby_def.b
(8 rows)

select count(*) from xc_groupby_def where b is null group by b order by 1;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                    QUERY PLAN                    
--------------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
               Filter: (xc_groupby_def.b IS NULL)
(9 rows)

create table xc_groupby_g(a int, b float, c numeric);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(a), a
   Group Key: xc_groupby_g.a
   ->  Seq Scan on public.xc_groupby_g
         Output: a
(5 rows)

select sum(b) from xc_groupby_g group by b order by 1;
 sum 
-----
 2.3
 4.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (sum(b)), b
   Sort Key: (sum(xc_groupby_g.b))
   ->  HashAggregate
         Output: sum(b), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b
(8 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(b), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b
(5 rows)

select sum(c) from xc_groupby_g group by b order by 1;
 sum 
-----
 5.2
 6.4
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (sum(c)), b
   Sort Key: (sum(xc_groupby_g.c))
   ->  HashAggregate
         Output: sum(c), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, c
(8 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(c), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b, c
(5 rows)

select avg(a) from xc_groupby_g group by b order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(a)), b
   Sort Key: (avg(xc_groupby_g.a))
   ->  HashAggregate
         Output: avg(a), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: avg(a), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b, a
(5 rows)

select avg(b) from xc_groupby_g group by c order by 1;
 avg 
-----
 2.1
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(b)), c
   Sort Key: (avg(xc_groupby_g.b))
   ->  HashAggregate
         Output: avg(b), c
         Group Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c, b
(8 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: avg(b), c
   Group Key: xc_groupby_g.c
   ->  Seq Scan on public.xc_groupby_g
         Output: c, b
(5 rows)

select avg(c) from xc_groupby_g group by c order by 1;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(c)), c
   Sort Key: (avg(xc_groupby_g.c))
   ->  HashAggregate
         Output: avg(c), c
         Group Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c
(8 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
-- Combination 2, enable_hashagg on and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int) distribute by replication;
create table xc_groupby_tab2 (val int, val2 int) distribute by replication;
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2 order by 1, 2, 3;
 count | sum |        avg         |      ?column?      | val2 
-------+-----+--------------------+--------------------+------
     2 |   8 | 4.0000000000000000 |                  4 |    2
     3 |   6 | 2.0000000000000000 |                  2 |    1
     3 |  11 | 3.6666666666666667 | 3.6666666666666665 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2 order by 1, 2, 3;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), (sum(val)), (avg(val)), (((sum(val))::double precision / (count(*))::double precision)), val2
   Sort Key: (count(*)), (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val))
   ->  HashAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2, val
(5 rows)

-- joins and group by
select * from (select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2 c1, xc_groupby_tab2.val2 c2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2) q order by q.c1, q.c2;
 count | sum |         avg         |     ?column?      | c1 | c2 
-------+-----+---------------------+-------------------+----+----
     9 |  78 |  8.6666666666666667 | 8.666666666666666 |  1 |  1
     6 |  96 | 16.0000000000000000 |                16 |  2 |  2
     3 |     |                     |                   |  3 |   
     3 |     |                     |                   |    |  4
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2 c1, xc_groupby_tab2.val2 c2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2) q order by q.c1, q.c2;
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), (sum((xc_groupby_tab1.val * xc_groupby_tab2.val))), (avg((xc_groupby_tab1.val * xc_groupby_tab2.val))), (((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision)), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   Sort Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  HashAggregate
         Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
         Group Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
         ->  Merge Full Join
               Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
               Merge Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
               ->  Sort
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
                     Sort Key: xc_groupby_tab1.val2
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               ->  Sort
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     Sort Key: xc_groupby_tab2.val2
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(19 rows)

-- aggregates over aggregates
select * from (select sum(y) sum from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x) q order by q.sum;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select * from (select sum(y) sum from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x) q order by q.sum;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort
   Output: q.sum
   Sort Key: q.sum
   ->  Subquery Scan on q
         Output: q.sum
         ->  HashAggregate
               Output: sum(q1.y), q1.x
               Group Key: q1.x
               ->  Subquery Scan on q1
                     Output: q1.x, q1.y
                     ->  HashAggregate
                           Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                           Group Key: xc_groupby_tab1.val2
                           ->  Seq Scan on public.xc_groupby_tab1
                                 Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
(15 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2 order by 1;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2 order by 1;
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Output: val2
   Sort Key: xc_groupby_tab1.val2
   ->  HashAggregate
         Output: val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2
(8 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                QUERY PLAN                
------------------------------------------
 HashAggregate
   Output: val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2
(5 rows)

select * from (select val + val2 sum from xc_groupby_tab1 group by val + val2) q order by q.sum;
 sum 
-----
   2
   3
   4
   7
   8
   9
(6 rows)

explain (verbose true, costs false, nodes false) select * from (select val + val2 sum from xc_groupby_tab1 group by val + val2) q order by q.sum;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  HashAggregate
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         Group Key: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
(8 rows)

select * from (select val + val2, val, val2 from xc_groupby_tab1 group by val, val2) q order by q.val, q.val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        4 |   1 |    3
        3 |   2 |    1
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select * from (select val + val2, val, val2 from xc_groupby_tab1 group by val, val2) q order by q.val, q.val2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
   Sort Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  HashAggregate
         Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2), xc_groupby_tab1.val, xc_groupby_tab1.val2
         Group Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
(8 rows)

select * from (select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2) q order by q.val, q.val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        6 |   2 |    4
        5 |   3 |    2
        7 |   3 |    4
        5 |   4 |    1
        6 |   4 |    2
(6 rows)

explain (verbose true, costs false, nodes false) select * from (select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2) q order by q.val, q.val2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   Sort Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  HashAggregate
         Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
         Group Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Merge Join
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

select * from (select xc_groupby_tab1.val + xc_groupby_tab2.val2 sum from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2) q order by q.sum;
 sum 
-----
   2
   5
   6
   7
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select xc_groupby_tab1.val + xc_groupby_tab2.val2 sum from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2) q order by q.sum;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  HashAggregate
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         Group Key: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
         ->  Merge Join
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by val2;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by val2;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Sort
   Output: ((((count(*) + sum(val)))::numeric + avg(val))), val2
   Sort Key: xc_groupby_tab1.val2
   ->  HashAggregate
         Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashAggregate
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2, val
(5 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 2 * val2;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 2 * val2;
                    QUERY PLAN                    
--------------------------------------------------
 Sort
   Output: (sum(val)), (avg(val)), ((2 * val2))
   Sort Key: ((2 * xc_groupby_tab1.val2))
   ->  HashAggregate
         Output: sum(val), avg(val), ((2 * val2))
         Group Key: (2 * xc_groupby_tab1.val2)
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (2 * val2), val
(8 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                 QUERY PLAN                 
--------------------------------------------
 HashAggregate
   Output: sum(val), avg(val), ((2 * val2))
   Group Key: (2 * xc_groupby_tab1.val2)
   ->  Seq Scan on public.xc_groupby_tab1
         Output: (2 * val2), val
(5 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)) distribute by replication; 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: a, (count(a))
   Sort Key: xc_groupby_def.a
   ->  HashAggregate
         Output: a, count(a)
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by a order by 1; 
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (avg(a)), a
   Sort Key: (avg(xc_groupby_def.a))
   ->  HashAggregate
         Output: avg(a), a
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: avg(a), a
   Group Key: xc_groupby_def.a
   ->  Seq Scan on public.xc_groupby_def
         Output: a
(5 rows)

select avg(a) from xc_groupby_def group by a order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (avg(a)), a
   Sort Key: (avg(xc_groupby_def.a))
   ->  HashAggregate
         Output: avg(a), a
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: avg(a), a
   Group Key: xc_groupby_def.a
   ->  Seq Scan on public.xc_groupby_def
         Output: a
(5 rows)

select avg(a) from xc_groupby_def group by b order by 1;
        avg         
--------------------
 4.0000000000000000
 4.5000000000000000
 6.2000000000000000
                   
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (avg(a)), b
   Sort Key: (avg(xc_groupby_def.a))
   ->  HashAggregate
         Output: avg(a), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: avg(a), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b, a
(5 rows)

select sum(a) from xc_groupby_def group by b order by 1;
 sum 
-----
   8
  18
  31
    
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (sum(a)), b
   Sort Key: (sum(xc_groupby_def.a))
   ->  HashAggregate
         Output: sum(a), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: sum(a), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b, a
(5 rows)

select count(*) from xc_groupby_def group by b order by 1;
 count 
-------
     1
     3
     4
     5
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (count(*)), b
   Sort Key: (count(*))
   ->  HashAggregate
         Output: count(*), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b
(5 rows)

select count(*) from xc_groupby_def where a is not null group by a order by 1;
 count 
-------
     1
     1
     1
     1
     1
     1
     1
     1
     1
     2
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a order by 1;
                      QUERY PLAN                      
------------------------------------------------------
 Sort
   Output: (count(*)), a
   Sort Key: (count(*))
   ->  HashAggregate
         Output: count(*), a
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
               Filter: (xc_groupby_def.a IS NOT NULL)
(9 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                   QUERY PLAN                   
------------------------------------------------
 HashAggregate
   Output: count(*), a
   Group Key: xc_groupby_def.a
   ->  Seq Scan on public.xc_groupby_def
         Output: a
         Filter: (xc_groupby_def.a IS NOT NULL)
(6 rows)

select * from (select b from xc_groupby_def group by b) q order by q.b;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select b from xc_groupby_def group by b) q order by q.b;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: xc_groupby_def.b
   Sort Key: xc_groupby_def.b
   ->  HashAggregate
         Output: xc_groupby_def.b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: xc_groupby_def.b
(8 rows)

select * from (select b,count(b) from xc_groupby_def group by b) q order by q.b;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select b,count(b) from xc_groupby_def group by b) q order by q.b;
                        QUERY PLAN                         
-----------------------------------------------------------
 Sort
   Output: xc_groupby_def.b, (count(xc_groupby_def.b))
   Sort Key: xc_groupby_def.b
   ->  HashAggregate
         Output: xc_groupby_def.b, count(xc_groupby_def.b)
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: xc_groupby_def.b
(8 rows)

select count(*) from xc_groupby_def where b is null group by b order by 1;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                    QUERY PLAN                    
--------------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
               Filter: (xc_groupby_def.b IS NULL)
(9 rows)

create table xc_groupby_g(a int, b float, c numeric) distribute by replication;
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(a), a
   Group Key: xc_groupby_g.a
   ->  Seq Scan on public.xc_groupby_g
         Output: a
(5 rows)

select sum(b) from xc_groupby_g group by b order by 1;
 sum 
-----
 2.3
 4.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (sum(b)), b
   Sort Key: (sum(xc_groupby_g.b))
   ->  HashAggregate
         Output: sum(b), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b
(8 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(b), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b
(5 rows)

select sum(c) from xc_groupby_g group by b order by 1;
 sum 
-----
 5.2
 6.4
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (sum(c)), b
   Sort Key: (sum(xc_groupby_g.c))
   ->  HashAggregate
         Output: sum(c), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, c
(8 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(c), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b, c
(5 rows)

select avg(a) from xc_groupby_g group by b order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(a)), b
   Sort Key: (avg(xc_groupby_g.a))
   ->  HashAggregate
         Output: avg(a), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: avg(a), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b, a
(5 rows)

select avg(b) from xc_groupby_g group by c order by 1;
 avg 
-----
 2.1
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(b)), c
   Sort Key: (avg(xc_groupby_g.b))
   ->  HashAggregate
         Output: avg(b), c
         Group Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c, b
(8 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: avg(b), c
   Group Key: xc_groupby_g.c
   ->  Seq Scan on public.xc_groupby_g
         Output: c, b
(5 rows)

select avg(c) from xc_groupby_g group by c order by 1;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(c)), c
   Sort Key: (avg(xc_groupby_g.c))
   ->  HashAggregate
         Output: avg(c), c
         Group Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c
(8 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: avg(c), c
   Group Key: xc_groupby_g.c
   ->  Seq Scan on public.xc_groupby_g
         Output: c
(5 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
reset enable_hashagg;
-- Combination 3 enable_hashagg off and distributed tables
set enable_hashagg to off;
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int);
create table xc_groupby_tab2 (val int, val2 int);
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2 order by 1;
 count | sum |        avg         |      ?column?      | val2 
-------+-----+--------------------+--------------------+------
     2 |   8 | 4.0000000000000000 |                  4 |    2
     3 |   6 | 2.0000000000000000 |                  2 |    1
     3 |  11 | 3.6666666666666667 | 3.6666666666666665 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2, val
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2 order by count(*), 6;
 count | sum |         avg         |     ?column?      | val2 | val2 
-------+-----+---------------------+-------------------+------+------
     3 |     |                     |                   |      |    4
     3 |     |                     |                   |    3 |     
     6 |  96 | 16.0000000000000000 |                16 |    2 |    2
     9 |  78 |  8.6666666666666667 | 8.666666666666666 |    1 |    1
(4 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Sort
         Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
         Sort Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
         ->  Merge Full Join
               Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
               Merge Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
               ->  Sort
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
                     Sort Key: xc_groupby_tab1.val2
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               ->  Sort
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     Sort Key: xc_groupby_tab2.val2
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(19 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x order by 1;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum(q1.y), q1.x
   Group Key: q1.x
   ->  Sort
         Output: q1.x, q1.y
         Sort Key: q1.x
         ->  Subquery Scan on q1
               Output: q1.x, q1.y
               ->  GroupAggregate
                     Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                     Group Key: xc_groupby_tab1.val2
                     ->  Sort
                           Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
                           Sort Key: xc_groupby_tab1.val2
                           ->  Seq Scan on public.xc_groupby_tab1
                                 Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
(16 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2 order by 1;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                   QUERY PLAN                   
------------------------------------------------
 Group
   Output: val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2
(8 rows)

select val + val2 from xc_groupby_tab1 group by val + val2 order by 1;
 ?column? 
----------
        2
        3
        4
        7
        8
        9
(6 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Group
   Output: ((val + val2))
   Group Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Sort
         Output: ((val + val2))
         Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (val + val2)
(8 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2 order by val, val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        4 |   1 |    3
        3 |   2 |    1
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2 order by val, val2;
                         QUERY PLAN                          
-------------------------------------------------------------
 Group
   Output: (val + val2), val, val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Sort
         Output: val, val2
         Sort Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val, val2
(8 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2 order by 1;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        5 |   3 |    2
        5 |   4 |    1
        6 |   2 |    4
        6 |   4 |    2
        7 |   3 |    4
(6 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Group
   Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Sort
         Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
         Sort Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Merge Join
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2 order by 1;
 ?column? 
----------
        2
        5
        6
        7
(4 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   Group Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Sort
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Merge Join
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by 1;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                          QUERY PLAN                           
---------------------------------------------------------------
 GroupAggregate
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2, val
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 1;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                   QUERY PLAN                   
------------------------------------------------
 GroupAggregate
   Output: sum(val), avg(val), ((2 * val2))
   Group Key: ((2 * xc_groupby_tab1.val2))
   ->  Sort
         Output: ((2 * val2)), val
         Sort Key: ((2 * xc_groupby_tab1.val2))
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (2 * val2), val
(8 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)); 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: a, count(a)
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by a order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a order by 1;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Output: (avg(a)), a
   Sort Key: (avg(xc_groupby_def.a))
   ->  GroupAggregate
         Output: avg(a), a
         Group Key: xc_groupby_def.a
         ->  Sort
               Output: a
               Sort Key: xc_groupby_def.a
               ->  Seq Scan on public.xc_groupby_def
                     Output: a
(11 rows)

select avg(a) from xc_groupby_def group by b order by 1;
        avg         
--------------------
 4.0000000000000000
 4.5000000000000000
 6.2000000000000000
                   
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: avg(a), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

select sum(a) from xc_groupby_def group by b order by 1;
 sum 
-----
   8
  18
  31
    
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: sum(a), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

select count(*) from xc_groupby_def group by b order by 1;
 count 
-------
     1
     3
     4
     5
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select count(*) from xc_groupby_def where a is not null group by a order by 1;
 count 
-------
     1
     1
     1
     1
     1
     1
     1
     1
     1
     2
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                      QUERY PLAN                      
------------------------------------------------------
 GroupAggregate
   Output: count(*), a
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
               Filter: (xc_groupby_def.a IS NOT NULL)
(9 rows)

select b from xc_groupby_def group by b order by 1;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain (verbose true, costs false, nodes false) select b from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 Group
   Output: b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select b,count(b) from xc_groupby_def group by b order by 1;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain (verbose true, costs false, nodes false) select b,count(b) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: b, count(b)
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select count(*) from xc_groupby_def where b is null group by b order by 1;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                    QUERY PLAN                    
--------------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
               Filter: (xc_groupby_def.b IS NULL)
(9 rows)

create table xc_groupby_g(a int, b float, c numeric);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(a), a
   Group Key: xc_groupby_g.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_g.a
         ->  Seq Scan on public.xc_groupby_g
               Output: a
(8 rows)

select sum(b) from xc_groupby_g group by b order by 1;
 sum 
-----
 2.3
 4.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(b), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b
(8 rows)

select sum(c) from xc_groupby_g group by b order by 1;
 sum 
-----
 5.2
 6.4
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(c), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b, c
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, c
(8 rows)

select avg(a) from xc_groupby_g group by b order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(a), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, a
(8 rows)

select avg(b) from xc_groupby_g group by c order by 1;
 avg 
-----
 2.1
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(b), c
   Group Key: xc_groupby_g.c
   ->  Sort
         Output: c, b
         Sort Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c, b
(8 rows)

select avg(c) from xc_groupby_g group by c order by 1;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(c), c
   Group Key: xc_groupby_g.c
   ->  Sort
         Output: c
         Sort Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c
(8 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
-- Combination 4 enable_hashagg off and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int) distribute by replication;
create table xc_groupby_tab2 (val int, val2 int) distribute by replication;
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
 count | sum |        avg         |      ?column?      | val2 
-------+-----+--------------------+--------------------+------
     3 |   6 | 2.0000000000000000 |                  2 |    1
     2 |   8 | 4.0000000000000000 |                  4 |    2
     3 |  11 | 3.6666666666666667 | 3.6666666666666665 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2, val
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2 order by count(*), 6;
 count | sum |         avg         |     ?column?      | val2 | val2 
-------+-----+---------------------+-------------------+------+------
     3 |     |                     |                   |      |    4
     3 |     |                     |                   |    3 |     
     6 |  96 | 16.0000000000000000 |                16 |    2 |    2
     9 |  78 |  8.6666666666666667 | 8.666666666666666 |    1 |    1
(4 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Sort
         Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
         Sort Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
         ->  Merge Full Join
               Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
               Merge Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
               ->  Sort
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
                     Sort Key: xc_groupby_tab1.val2
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               ->  Sort
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     Sort Key: xc_groupby_tab2.val2
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(19 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x order by 1;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum(q1.y), q1.x
   Group Key: q1.x
   ->  Sort
         Output: q1.x, q1.y
         Sort Key: q1.x
         ->  Subquery Scan on q1
               Output: q1.x, q1.y
               ->  GroupAggregate
                     Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                     Group Key: xc_groupby_tab1.val2
                     ->  Sort
                           Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
                           Sort Key: xc_groupby_tab1.val2
                           ->  Seq Scan on public.xc_groupby_tab1
                                 Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
(16 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2 order by 1;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                   QUERY PLAN                   
------------------------------------------------
 Group
   Output: val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2
(8 rows)

select val + val2 from xc_groupby_tab1 group by val + val2 order by 1;
 ?column? 
----------
        2
        3
        4
        7
        8
        9
(6 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Group
   Output: ((val + val2))
   Group Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Sort
         Output: ((val + val2))
         Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (val + val2)
(8 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        4 |   1 |    3
        3 |   2 |    1
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                         QUERY PLAN                          
-------------------------------------------------------------
 Group
   Output: (val + val2), val, val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Sort
         Output: val, val2
         Sort Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val, val2
(8 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2 order by 1;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        5 |   3 |    2
        5 |   4 |    1
        6 |   2 |    4
        6 |   4 |    2
        7 |   3 |    4
(6 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Group
   Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Sort
         Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
         Sort Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Merge Join
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2 order by 1;
 ?column? 
----------
        2
        5
        6
        7
(4 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   Group Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Sort
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Merge Join
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by 1;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                          QUERY PLAN                           
---------------------------------------------------------------
 GroupAggregate
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2, val
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 1;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                   QUERY PLAN                   
------------------------------------------------
 GroupAggregate
   Output: sum(val), avg(val), ((2 * val2))
   Group Key: ((2 * xc_groupby_tab1.val2))
   ->  Sort
         Output: ((2 * val2)), val
         Sort Key: ((2 * xc_groupby_tab1.val2))
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (2 * val2), val
(8 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)) distribute by replication; 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: a, count(a)
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by a; 
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a; 
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: avg(a), a
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by a;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: avg(a), a
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by b order by 1;
        avg         
--------------------
 4.0000000000000000
 4.5000000000000000
 6.2000000000000000
                   
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: avg(a), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

select sum(a) from xc_groupby_def group by b order by 1;
 sum 
-----
   8
  18
  31
    
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: sum(a), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

select count(*) from xc_groupby_def group by b order by 1;
 count 
-------
     1
     3
     4
     5
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select count(*) from xc_groupby_def where a is not null group by a;
 count 
-------
     1
     2
     1
     1
     1
     1
     1
     1
     1
     1
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                      QUERY PLAN                      
------------------------------------------------------
 GroupAggregate
   Output: count(*), a
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
               Filter: (xc_groupby_def.a IS NOT NULL)
(9 rows)

select b from xc_groupby_def group by b order by 1;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain (verbose true, costs false, nodes false) select b from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 Group
   Output: b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select b,count(b) from xc_groupby_def group by b order by 1;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain (verbose true, costs false, nodes false) select b,count(b) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: b, count(b)
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select count(*) from xc_groupby_def where b is null group by b;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                    QUERY PLAN                    
--------------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
               Filter: (xc_groupby_def.b IS NULL)
(9 rows)

create table xc_groupby_g(a int, b float, c numeric) distribute by replication;
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(a), a
   Group Key: xc_groupby_g.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_g.a
         ->  Seq Scan on public.xc_groupby_g
               Output: a
(8 rows)

select sum(b) from xc_groupby_g group by b;
 sum 
-----
 4.2
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(b), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b
(8 rows)

select sum(c) from xc_groupby_g group by b;
 sum 
-----
 6.4
 5.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(c), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b, c
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, c
(8 rows)

select avg(a) from xc_groupby_g group by b;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(a), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, a
(8 rows)

select avg(b) from xc_groupby_g group by c;
 avg 
-----
 2.1
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(b), c
   Group Key: xc_groupby_g.c
   ->  Sort
         Output: c, b
         Sort Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c, b
(8 rows)

select avg(c) from xc_groupby_g group by c;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(c), c
   Group Key: xc_groupby_g.c
   ->  Sort
         Output: c
         Sort Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c
(8 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
reset enable_hashagg;
reset enable_fast_query_shipping;
-- Now repeat all the tests with FQS turned on
set enable_fast_query_shipping to on;
-- Combination 1: enable_hashagg on and distributed tables
set enable_hashagg to on;
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int);
create table xc_groupby_tab2 (val int, val2 int);
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2 order by 1, 2;
 count | sum |        avg         |      ?column?      | val2 
-------+-----+--------------------+--------------------+------
     2 |   8 | 4.0000000000000000 |                  4 |    2
     3 |   6 | 2.0000000000000000 |                  2 |    1
     3 |  11 | 3.6666666666666667 | 3.6666666666666665 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2 order by 1, 2;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), (sum(val)), (avg(val)), (((sum(val))::double precision / (count(*))::double precision)), val2
   Sort Key: (count(*)), (sum(xc_groupby_tab1.val))
   ->  HashAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2, val
(5 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2 order by count(*), 6;
 count | sum |         avg         |     ?column?      | val2 | val2 
-------+-----+---------------------+-------------------+------+------
     3 |     |                     |                   |      |    4
     3 |     |                     |                   |    3 |     
     6 |  96 | 16.0000000000000000 |                16 |    2 |    2
     9 |  78 |  8.6666666666666667 | 8.666666666666666 |    1 |    1
(4 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Merge Full Join
         Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
         Merge Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
         ->  Sort
               Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               Sort Key: xc_groupby_tab1.val2
               ->  Seq Scan on public.xc_groupby_tab1
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Sort
               Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
               Sort Key: xc_groupby_tab2.val2
               ->  Seq Scan on public.xc_groupby_tab2
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(16 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x order by 1;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x order by 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(q1.y)), q1.x
   Sort Key: (sum(q1.y))
   ->  HashAggregate
         Output: sum(q1.y), q1.x
         Group Key: q1.x
         ->  Subquery Scan on q1
               Output: q1.x, q1.y
               ->  HashAggregate
                     Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                     Group Key: xc_groupby_tab1.val2
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
(13 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 HashAggregate
   Output: sum(q1.y), q1.x
   Group Key: q1.x
   ->  Subquery Scan on q1
         Output: q1.x, q1.y
         ->  HashAggregate
               Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
               Group Key: xc_groupby_tab1.val2
               ->  Seq Scan on public.xc_groupby_tab1
                     Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
(10 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2 order by 1;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2 order by 1;
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Output: val2
   Sort Key: xc_groupby_tab1.val2
   ->  HashAggregate
         Output: val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2
(8 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                QUERY PLAN                
------------------------------------------
 HashAggregate
   Output: val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2
(5 rows)

select val + val2 from xc_groupby_tab1 group by val + val2 order by 1;
 ?column? 
----------
        2
        3
        4
        7
        8
        9
(6 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2 order by 1;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Sort
   Output: ((val + val2))
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  HashAggregate
         Output: ((val + val2))
         Group Key: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (val + val2)
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2;
                        QUERY PLAN                         
-----------------------------------------------------------
 HashAggregate
   Output: ((val + val2))
   Group Key: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
   ->  Seq Scan on public.xc_groupby_tab1
         Output: (val + val2)
(5 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2 order by 1, 2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        3 |   2 |    1
        4 |   1 |    3
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2 order by 1, 2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: ((val + val2)), val, val2
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val
   ->  HashAggregate
         Output: (val + val2), val, val2
         Group Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val, val2
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                       QUERY PLAN                       
--------------------------------------------------------
 HashAggregate
   Output: (val + val2), val, val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val, val2
(5 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2 order by val, val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        6 |   2 |    4
        5 |   3 |    2
        7 |   3 |    4
        5 |   4 |    1
        6 |   4 |    2
(6 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2 order by val, val2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   Sort Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  HashAggregate
         Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
         Group Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Merge Join
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 HashAggregate
   Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Merge Join
         Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
         Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
         ->  Sort
               Output: xc_groupby_tab1.val
               Sort Key: xc_groupby_tab1.val
               ->  Seq Scan on public.xc_groupby_tab1
                     Output: xc_groupby_tab1.val
         ->  Sort
               Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
               Sort Key: xc_groupby_tab2.val
               ->  Seq Scan on public.xc_groupby_tab2
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(16 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2 order by 1;
 ?column? 
----------
        2
        5
        6
        7
(4 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2 order by 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  HashAggregate
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         Group Key: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
         ->  Merge Join
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 HashAggregate
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   Group Key: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
   ->  Merge Join
         Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
         Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
         ->  Sort
               Output: xc_groupby_tab1.val
               Sort Key: xc_groupby_tab1.val
               ->  Seq Scan on public.xc_groupby_tab1
                     Output: xc_groupby_tab1.val
         ->  Sort
               Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
               Sort Key: xc_groupby_tab2.val
               ->  Seq Scan on public.xc_groupby_tab2
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(16 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by val2;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by val2;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Sort
   Output: ((((count(*) + sum(val)))::numeric + avg(val))), val2
   Sort Key: xc_groupby_tab1.val2
   ->  HashAggregate
         Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashAggregate
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2, val
(5 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 2 * val2;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 2 * val2;
                    QUERY PLAN                    
--------------------------------------------------
 Sort
   Output: (sum(val)), (avg(val)), ((2 * val2))
   Sort Key: ((2 * xc_groupby_tab1.val2))
   ->  HashAggregate
         Output: sum(val), avg(val), ((2 * val2))
         Group Key: (2 * xc_groupby_tab1.val2)
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (2 * val2), val
(8 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                 QUERY PLAN                 
--------------------------------------------
 HashAggregate
   Output: sum(val), avg(val), ((2 * val2))
   Group Key: (2 * xc_groupby_tab1.val2)
   ->  Seq Scan on public.xc_groupby_tab1
         Output: (2 * val2), val
(5 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)); 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: a, (count(a))
   Sort Key: xc_groupby_def.a
   ->  HashAggregate
         Output: a, count(a)
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by a order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (avg(a)), a
   Sort Key: (avg(xc_groupby_def.a))
   ->  HashAggregate
         Output: avg(a), a
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: avg(a), a
   Group Key: xc_groupby_def.a
   ->  Seq Scan on public.xc_groupby_def
         Output: a
(5 rows)

select avg(a) from xc_groupby_def group by b order by 1;
        avg         
--------------------
 4.0000000000000000
 4.5000000000000000
 6.2000000000000000
                   
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (avg(a)), b
   Sort Key: (avg(xc_groupby_def.a))
   ->  HashAggregate
         Output: avg(a), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: avg(a), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b, a
(5 rows)

select sum(a) from xc_groupby_def group by b order by 1;
 sum 
-----
   8
  18
  31
    
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (sum(a)), b
   Sort Key: (sum(xc_groupby_def.a))
   ->  HashAggregate
         Output: sum(a), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: sum(a), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b, a
(5 rows)

select count(*) from xc_groupby_def group by b order by 1;
 count 
-------
     1
     3
     4
     5
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (count(*)), b
   Sort Key: (count(*))
   ->  HashAggregate
         Output: count(*), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b
(5 rows)

select count(*) from xc_groupby_def where a is not null group by a order by 1;
 count 
-------
     1
     1
     1
     1
     1
     1
     1
     1
     1
     2
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a order by 1;
                      QUERY PLAN                      
------------------------------------------------------
 Sort
   Output: (count(*)), a
   Sort Key: (count(*))
   ->  HashAggregate
         Output: count(*), a
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
               Filter: (xc_groupby_def.a IS NOT NULL)
(9 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                   QUERY PLAN                   
------------------------------------------------
 HashAggregate
   Output: count(*), a
   Group Key: xc_groupby_def.a
   ->  Seq Scan on public.xc_groupby_def
         Output: a
         Filter: (xc_groupby_def.a IS NOT NULL)
(6 rows)

select * from (select b from xc_groupby_def group by b) q order by q.b;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select b from xc_groupby_def group by b) q order by q.b;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: xc_groupby_def.b
   Sort Key: xc_groupby_def.b
   ->  HashAggregate
         Output: xc_groupby_def.b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: xc_groupby_def.b
(8 rows)

select * from (select b,count(b) from xc_groupby_def group by b) q order by q.b;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select b,count(b) from xc_groupby_def group by b) q order by q.b;
                        QUERY PLAN                         
-----------------------------------------------------------
 Sort
   Output: xc_groupby_def.b, (count(xc_groupby_def.b))
   Sort Key: xc_groupby_def.b
   ->  HashAggregate
         Output: xc_groupby_def.b, count(xc_groupby_def.b)
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: xc_groupby_def.b
(8 rows)

select count(*) from xc_groupby_def where b is null group by b order by 1;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                    QUERY PLAN                    
--------------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
               Filter: (xc_groupby_def.b IS NULL)
(9 rows)

create table xc_groupby_g(a int, b float, c numeric);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(a), a
   Group Key: xc_groupby_g.a
   ->  Seq Scan on public.xc_groupby_g
         Output: a
(5 rows)

select sum(b) from xc_groupby_g group by b order by 1;
 sum 
-----
 2.3
 4.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (sum(b)), b
   Sort Key: (sum(xc_groupby_g.b))
   ->  HashAggregate
         Output: sum(b), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b
(8 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(b), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b
(5 rows)

select sum(c) from xc_groupby_g group by b order by 1;
 sum 
-----
 5.2
 6.4
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (sum(c)), b
   Sort Key: (sum(xc_groupby_g.c))
   ->  HashAggregate
         Output: sum(c), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, c
(8 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(c), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b, c
(5 rows)

select avg(a) from xc_groupby_g group by b order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(a)), b
   Sort Key: (avg(xc_groupby_g.a))
   ->  HashAggregate
         Output: avg(a), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: avg(a), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b, a
(5 rows)

select avg(b) from xc_groupby_g group by c order by 1;
 avg 
-----
 2.1
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(b)), c
   Sort Key: (avg(xc_groupby_g.b))
   ->  HashAggregate
         Output: avg(b), c
         Group Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c, b
(8 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: avg(b), c
   Group Key: xc_groupby_g.c
   ->  Seq Scan on public.xc_groupby_g
         Output: c, b
(5 rows)

select avg(c) from xc_groupby_g group by c order by 1;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(c)), c
   Sort Key: (avg(xc_groupby_g.c))
   ->  HashAggregate
         Output: avg(c), c
         Group Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c
(8 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: avg(c), c
   Group Key: xc_groupby_g.c
   ->  Seq Scan on public.xc_groupby_g
         Output: c
(5 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
-- Combination 2, enable_hashagg on and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int) distribute by replication;
create table xc_groupby_tab2 (val int, val2 int) distribute by replication;
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2 order by 1, 2;
 count | sum |        avg         |      ?column?      | val2 
-------+-----+--------------------+--------------------+------
     2 |   8 | 4.0000000000000000 |                  4 |    2
     3 |   6 | 2.0000000000000000 |                  2 |    1
     3 |  11 | 3.6666666666666667 | 3.6666666666666665 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2 order by 1, 2;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), (sum(val)), (avg(val)), (((sum(val))::double precision / (count(*))::double precision)), val2
   Sort Key: (count(*)), (sum(xc_groupby_tab1.val))
   ->  HashAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2, val
(5 rows)

-- joins and group by
select * from (select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2 c1, xc_groupby_tab2.val2 c2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2) q order by q.c1, q.c2;
 count | sum |         avg         |     ?column?      | c1 | c2 
-------+-----+---------------------+-------------------+----+----
     9 |  78 |  8.6666666666666667 | 8.666666666666666 |  1 |  1
     6 |  96 | 16.0000000000000000 |                16 |  2 |  2
     3 |     |                     |                   |  3 |   
     3 |     |                     |                   |    |  4
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2 c1, xc_groupby_tab2.val2 c2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2) q order by q.c1, q.c2;
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), (sum((xc_groupby_tab1.val * xc_groupby_tab2.val))), (avg((xc_groupby_tab1.val * xc_groupby_tab2.val))), (((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision)), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   Sort Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  HashAggregate
         Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
         Group Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
         ->  Merge Full Join
               Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
               Merge Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
               ->  Sort
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
                     Sort Key: xc_groupby_tab1.val2
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               ->  Sort
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     Sort Key: xc_groupby_tab2.val2
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(19 rows)

-- aggregates over aggregates
select * from (select sum(y) sum from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x) q order by q.sum;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select * from (select sum(y) sum from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x) q order by q.sum;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort
   Output: q.sum
   Sort Key: q.sum
   ->  Subquery Scan on q
         Output: q.sum
         ->  HashAggregate
               Output: sum(q1.y), q1.x
               Group Key: q1.x
               ->  Subquery Scan on q1
                     Output: q1.x, q1.y
                     ->  HashAggregate
                           Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                           Group Key: xc_groupby_tab1.val2
                           ->  Seq Scan on public.xc_groupby_tab1
                                 Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
(15 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2 order by 1;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2 order by 1;
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Output: val2
   Sort Key: xc_groupby_tab1.val2
   ->  HashAggregate
         Output: val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2
(8 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                QUERY PLAN                
------------------------------------------
 HashAggregate
   Output: val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2
(5 rows)

select * from (select val + val2 sum from xc_groupby_tab1 group by val + val2) q order by q.sum;
 sum 
-----
   2
   3
   4
   7
   8
   9
(6 rows)

explain (verbose true, costs false, nodes false) select * from (select val + val2 sum from xc_groupby_tab1 group by val + val2) q order by q.sum;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  HashAggregate
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         Group Key: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
(8 rows)

select * from (select val + val2, val, val2 from xc_groupby_tab1 group by val, val2) q order by q.val, q.val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        4 |   1 |    3
        3 |   2 |    1
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select * from (select val + val2, val, val2 from xc_groupby_tab1 group by val, val2) q order by q.val, q.val2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
   Sort Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  HashAggregate
         Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2), xc_groupby_tab1.val, xc_groupby_tab1.val2
         Group Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
(8 rows)

select * from (select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2) q order by q.val, q.val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        6 |   2 |    4
        5 |   3 |    2
        7 |   3 |    4
        5 |   4 |    1
        6 |   4 |    2
(6 rows)

explain (verbose true, costs false, nodes false) select * from (select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2) q order by q.val, q.val2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   Sort Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  HashAggregate
         Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
         Group Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Merge Join
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

select * from (select xc_groupby_tab1.val + xc_groupby_tab2.val2 sum from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2) q order by q.sum;
 sum 
-----
   2
   5
   6
   7
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select xc_groupby_tab1.val + xc_groupby_tab2.val2 sum from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2) q order by q.sum;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  HashAggregate
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         Group Key: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
         ->  Merge Join
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by 1;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by 1;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort
   Output: ((((count(*) + sum(val)))::numeric + avg(val))), val2
   Sort Key: ((((count(*) + sum(xc_groupby_tab1.val)))::numeric + avg(xc_groupby_tab1.val)))
   ->  HashAggregate
         Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
         Group Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashAggregate
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   Group Key: xc_groupby_tab1.val2
   ->  Seq Scan on public.xc_groupby_tab1
         Output: val2, val
(5 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 1, 2;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 1, 2;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Output: (sum(val)), (avg(val)), ((2 * val2))
   Sort Key: (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val))
   ->  HashAggregate
         Output: sum(val), avg(val), ((2 * val2))
         Group Key: (2 * xc_groupby_tab1.val2)
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (2 * val2), val
(8 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                 QUERY PLAN                 
--------------------------------------------
 HashAggregate
   Output: sum(val), avg(val), ((2 * val2))
   Group Key: (2 * xc_groupby_tab1.val2)
   ->  Seq Scan on public.xc_groupby_tab1
         Output: (2 * val2), val
(5 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)) distribute by replication; 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: a, (count(a))
   Sort Key: xc_groupby_def.a
   ->  HashAggregate
         Output: a, count(a)
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by a order by a; 
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a order by a;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (avg(a)), a
   Sort Key: xc_groupby_def.a
   ->  HashAggregate
         Output: avg(a), a
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a; 
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: avg(a), a
   Group Key: xc_groupby_def.a
   ->  Seq Scan on public.xc_groupby_def
         Output: a
(5 rows)

select avg(a) from xc_groupby_def group by a order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (avg(a)), a
   Sort Key: (avg(xc_groupby_def.a))
   ->  HashAggregate
         Output: avg(a), a
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: avg(a), a
   Group Key: xc_groupby_def.a
   ->  Seq Scan on public.xc_groupby_def
         Output: a
(5 rows)

select avg(a) from xc_groupby_def group by b order by 1;
        avg         
--------------------
 4.0000000000000000
 4.5000000000000000
 6.2000000000000000
                   
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (avg(a)), b
   Sort Key: (avg(xc_groupby_def.a))
   ->  HashAggregate
         Output: avg(a), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: avg(a), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b, a
(5 rows)

select sum(a) from xc_groupby_def group by b order by 1;
 sum 
-----
   8
  18
  31
    
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b order by 1;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (sum(a)), b
   Sort Key: (sum(xc_groupby_def.a))
   ->  HashAggregate
         Output: sum(a), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: sum(a), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b, a
(5 rows)

select count(*) from xc_groupby_def group by b order by b;
 count 
-------
     1
     5
     4
     3
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b order by b;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: (count(*)), b
   Sort Key: xc_groupby_def.b
   ->  HashAggregate
         Output: count(*), b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
               QUERY PLAN                
-----------------------------------------
 HashAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Seq Scan on public.xc_groupby_def
         Output: b
(5 rows)

select count(*) from xc_groupby_def where a is not null group by a order by 1;
 count 
-------
     1
     1
     1
     1
     1
     1
     1
     1
     1
     2
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a order by 1;
                      QUERY PLAN                      
------------------------------------------------------
 Sort
   Output: (count(*)), a
   Sort Key: (count(*))
   ->  HashAggregate
         Output: count(*), a
         Group Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
               Filter: (xc_groupby_def.a IS NOT NULL)
(9 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                   QUERY PLAN                   
------------------------------------------------
 HashAggregate
   Output: count(*), a
   Group Key: xc_groupby_def.a
   ->  Seq Scan on public.xc_groupby_def
         Output: a
         Filter: (xc_groupby_def.a IS NOT NULL)
(6 rows)

select * from (select b from xc_groupby_def group by b) q order by q.b;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select b from xc_groupby_def group by b) q order by q.b;
                  QUERY PLAN                   
-----------------------------------------------
 Sort
   Output: xc_groupby_def.b
   Sort Key: xc_groupby_def.b
   ->  HashAggregate
         Output: xc_groupby_def.b
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: xc_groupby_def.b
(8 rows)

select * from (select b,count(b) from xc_groupby_def group by b) q order by q.b;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain (verbose true, costs false, nodes false) select * from (select b,count(b) from xc_groupby_def group by b) q order by q.b;
                        QUERY PLAN                         
-----------------------------------------------------------
 Sort
   Output: xc_groupby_def.b, (count(xc_groupby_def.b))
   Sort Key: xc_groupby_def.b
   ->  HashAggregate
         Output: xc_groupby_def.b, count(xc_groupby_def.b)
         Group Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: xc_groupby_def.b
(8 rows)

select count(*) from xc_groupby_def where b is null group by b;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                    QUERY PLAN                    
--------------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
               Filter: (xc_groupby_def.b IS NULL)
(9 rows)

create table xc_groupby_g(a int, b float, c numeric) distribute by replication;
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(a), a
   Group Key: xc_groupby_g.a
   ->  Seq Scan on public.xc_groupby_g
         Output: a
(5 rows)

select sum(b) from xc_groupby_g group by b order by 1;
 sum 
-----
 2.3
 4.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (sum(b)), b
   Sort Key: (sum(xc_groupby_g.b))
   ->  HashAggregate
         Output: sum(b), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b
(8 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(b), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b
(5 rows)

select sum(c) from xc_groupby_g group by b order by 1;
 sum 
-----
 5.2
 6.4
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (sum(c)), b
   Sort Key: (sum(xc_groupby_g.c))
   ->  HashAggregate
         Output: sum(c), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, c
(8 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: sum(c), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b, c
(5 rows)

select avg(a) from xc_groupby_g group by b order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b order by 1;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(a)), b
   Sort Key: (avg(xc_groupby_g.a))
   ->  HashAggregate
         Output: avg(a), b
         Group Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, a
(8 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: avg(a), b
   Group Key: xc_groupby_g.b
   ->  Seq Scan on public.xc_groupby_g
         Output: b, a
(5 rows)

select avg(b) from xc_groupby_g group by c order by c;
 avg 
-----
 2.1
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c order by c;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(b)), c
   Sort Key: xc_groupby_g.c
   ->  HashAggregate
         Output: avg(b), c
         Group Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c, b
(8 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: avg(b), c
   Group Key: xc_groupby_g.c
   ->  Seq Scan on public.xc_groupby_g
         Output: c, b
(5 rows)

select avg(c) from xc_groupby_g group by c order by c;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c order by c;
                 QUERY PLAN                  
---------------------------------------------
 Sort
   Output: (avg(c)), c
   Sort Key: xc_groupby_g.c
   ->  HashAggregate
         Output: avg(c), c
         Group Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c
(8 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c;
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Output: avg(c), c
   Group Key: xc_groupby_g.c
   ->  Seq Scan on public.xc_groupby_g
         Output: c
(5 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
reset enable_hashagg;
-- Combination 3 enable_hashagg off and distributed tables
set enable_hashagg to off;
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int);
create table xc_groupby_tab2 (val int, val2 int);
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2 order by 1, 2;
 count | sum |        avg         |      ?column?      | val2 
-------+-----+--------------------+--------------------+------
     2 |   8 | 4.0000000000000000 |                  4 |    2
     3 |   6 | 2.0000000000000000 |                  2 |    1
     3 |  11 | 3.6666666666666667 | 3.6666666666666665 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2 order by 1, 2;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), (sum(val)), (avg(val)), (((sum(val))::double precision / (count(*))::double precision)), val2
   Sort Key: (count(*)), (sum(xc_groupby_tab1.val))
   ->  GroupAggregate
         Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
         Group Key: xc_groupby_tab1.val2
         ->  Sort
               Output: val2, val
               Sort Key: xc_groupby_tab1.val2
               ->  Seq Scan on public.xc_groupby_tab1
                     Output: val2, val
(11 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2, val
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2 order by count(*), 6;
 count | sum |         avg         |     ?column?      | val2 | val2 
-------+-----+---------------------+-------------------+------+------
     3 |     |                     |                   |      |    4
     3 |     |                     |                   |    3 |     
     6 |  96 | 16.0000000000000000 |                16 |    2 |    2
     9 |  78 |  8.6666666666666667 | 8.666666666666666 |    1 |    1
(4 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Sort
         Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
         Sort Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
         ->  Merge Full Join
               Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
               Merge Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
               ->  Sort
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
                     Sort Key: xc_groupby_tab1.val2
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               ->  Sort
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     Sort Key: xc_groupby_tab2.val2
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(19 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x order by 1;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum(q1.y), q1.x
   Group Key: q1.x
   ->  Sort
         Output: q1.x, q1.y
         Sort Key: q1.x
         ->  Subquery Scan on q1
               Output: q1.x, q1.y
               ->  GroupAggregate
                     Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                     Group Key: xc_groupby_tab1.val2
                     ->  Sort
                           Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
                           Sort Key: xc_groupby_tab1.val2
                           ->  Seq Scan on public.xc_groupby_tab1
                                 Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
(16 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2 order by 1;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2 order by 1;
                   QUERY PLAN                   
------------------------------------------------
 Group
   Output: val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2
(8 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                   QUERY PLAN                   
------------------------------------------------
 Group
   Output: val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2
(8 rows)

select val + val2 from xc_groupby_tab1 group by val + val2 order by 1;
 ?column? 
----------
        2
        3
        4
        7
        8
        9
(6 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2 order by 1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Group
   Output: ((val + val2))
   Group Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Sort
         Output: ((val + val2))
         Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (val + val2)
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Group
   Output: ((val + val2))
   Group Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Sort
         Output: ((val + val2))
         Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (val + val2)
(8 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2 order by 1, 2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        3 |   2 |    1
        4 |   1 |    3
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2 order by 1, 2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: ((val + val2)), val, val2
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val
   ->  Group
         Output: (val + val2), val, val2
         Group Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Sort
               Output: val, val2
               Sort Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
               ->  Seq Scan on public.xc_groupby_tab1
                     Output: val, val2
(11 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                         QUERY PLAN                          
-------------------------------------------------------------
 Group
   Output: (val + val2), val, val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Sort
         Output: val, val2
         Sort Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val, val2
(8 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2 order by 1, 2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        5 |   3 |    2
        5 |   4 |    1
        6 |   2 |    4
        6 |   4 |    2
        7 |   3 |    4
(6 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2 order by 1, 2;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val
   ->  Group
         Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
         Group Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Sort
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
               Sort Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
               ->  Merge Join
                     Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
                     Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
                     ->  Sort
                           Output: xc_groupby_tab1.val
                           Sort Key: xc_groupby_tab1.val
                           ->  Seq Scan on public.xc_groupby_tab1
                                 Output: xc_groupby_tab1.val
                     ->  Sort
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                           Sort Key: xc_groupby_tab2.val
                           ->  Seq Scan on public.xc_groupby_tab2
                                 Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(22 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Group
   Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Sort
         Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
         Sort Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Merge Join
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2 order by 1;
 ?column? 
----------
        2
        5
        6
        7
(4 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2 order by 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   Group Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Sort
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Merge Join
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   Group Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Sort
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Merge Join
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by 1;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by 1;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort
   Output: ((((count(*) + sum(val)))::numeric + avg(val))), val2
   Sort Key: ((((count(*) + sum(xc_groupby_tab1.val)))::numeric + avg(xc_groupby_tab1.val)))
   ->  GroupAggregate
         Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
         Group Key: xc_groupby_tab1.val2
         ->  Sort
               Output: val2, val
               Sort Key: xc_groupby_tab1.val2
               ->  Seq Scan on public.xc_groupby_tab1
                     Output: val2, val
(11 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                          QUERY PLAN                           
---------------------------------------------------------------
 GroupAggregate
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2, val
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 3;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 3;
                   QUERY PLAN                   
------------------------------------------------
 GroupAggregate
   Output: sum(val), avg(val), ((2 * val2))
   Group Key: ((2 * xc_groupby_tab1.val2))
   ->  Sort
         Output: ((2 * val2)), val
         Sort Key: ((2 * xc_groupby_tab1.val2))
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (2 * val2), val
(8 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                   QUERY PLAN                   
------------------------------------------------
 GroupAggregate
   Output: sum(val), avg(val), ((2 * val2))
   Group Key: ((2 * xc_groupby_tab1.val2))
   ->  Sort
         Output: ((2 * val2)), val
         Sort Key: ((2 * xc_groupby_tab1.val2))
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (2 * val2), val
(8 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)); 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: a, count(a)
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by a order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a order by 1;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Output: (avg(a)), a
   Sort Key: (avg(xc_groupby_def.a))
   ->  GroupAggregate
         Output: avg(a), a
         Group Key: xc_groupby_def.a
         ->  Sort
               Output: a
               Sort Key: xc_groupby_def.a
               ->  Seq Scan on public.xc_groupby_def
                     Output: a
(11 rows)

select avg(a) from xc_groupby_def group by b order by 1;
        avg         
--------------------
 4.0000000000000000
 4.5000000000000000
 6.2000000000000000
                   
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: avg(a), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

select sum(a) from xc_groupby_def group by b order by 1;
 sum 
-----
   8
  18
  31
    
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: sum(a), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

select count(*) from xc_groupby_def group by b order by 1;
 count 
-------
     1
     3
     4
     5
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select count(*) from xc_groupby_def where a is not null group by a order by 1;
 count 
-------
     1
     1
     1
     1
     1
     1
     1
     1
     1
     2
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                      QUERY PLAN                      
------------------------------------------------------
 GroupAggregate
   Output: count(*), a
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
               Filter: (xc_groupby_def.a IS NOT NULL)
(9 rows)

select b from xc_groupby_def group by b order by 1;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain (verbose true, costs false, nodes false) select b from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 Group
   Output: b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select b,count(b) from xc_groupby_def group by b order by 1;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain (verbose true, costs false, nodes false) select b,count(b) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: b, count(b)
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select count(*) from xc_groupby_def where b is null group by b order by 1;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                    QUERY PLAN                    
--------------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
               Filter: (xc_groupby_def.b IS NULL)
(9 rows)

create table xc_groupby_g(a int, b float, c numeric);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a order by 1;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(a), a
   Group Key: xc_groupby_g.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_g.a
         ->  Seq Scan on public.xc_groupby_g
               Output: a
(8 rows)

select sum(b) from xc_groupby_g group by b order by 1;
 sum 
-----
 2.3
 4.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(b), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b
(8 rows)

select sum(c) from xc_groupby_g group by b order by 1;
 sum 
-----
 5.2
 6.4
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(c), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b, c
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, c
(8 rows)

select avg(a) from xc_groupby_g group by b order by 1;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(a), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, a
(8 rows)

select avg(b) from xc_groupby_g group by c order by 1;
 avg 
-----
 2.1
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(b), c
   Group Key: xc_groupby_g.c
   ->  Sort
         Output: c, b
         Sort Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c, b
(8 rows)

select avg(c) from xc_groupby_g group by c order by 1;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(c), c
   Group Key: xc_groupby_g.c
   ->  Sort
         Output: c
         Sort Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c
(8 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
-- Combination 4 enable_hashagg off and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int) distribute by replication;
create table xc_groupby_tab2 (val int, val2 int) distribute by replication;
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
 count | sum |        avg         |      ?column?      | val2 
-------+-----+--------------------+--------------------+------
     3 |   6 | 2.0000000000000000 |                  2 |    1
     2 |   8 | 4.0000000000000000 |                  4 |    2
     3 |  11 | 3.6666666666666667 | 3.6666666666666665 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2, val
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2 order by count(*), 6;
 count | sum |         avg         |     ?column?      | val2 | val2 
-------+-----+---------------------+-------------------+------+------
     3 |     |                     |                   |      |    4
     3 |     |                     |                   |    3 |     
     6 |  96 | 16.0000000000000000 |                16 |    2 |    2
     9 |  78 |  8.6666666666666667 | 8.666666666666666 |    1 |    1
(4 rows)

explain (verbose true, costs false, nodes false) select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Sort
         Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
         Sort Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
         ->  Merge Full Join
               Output: xc_groupby_tab1.val2, xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val
               Merge Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
               ->  Sort
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
                     Sort Key: xc_groupby_tab1.val2
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               ->  Sort
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     Sort Key: xc_groupby_tab2.val2
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(19 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x order by 1;
 sum 
-----
   8
  17
(2 rows)

explain (verbose true, costs false, nodes false) select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum(q1.y), q1.x
   Group Key: q1.x
   ->  Sort
         Output: q1.x, q1.y
         Sort Key: q1.x
         ->  Subquery Scan on q1
               Output: q1.x, q1.y
               ->  GroupAggregate
                     Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
                     Group Key: xc_groupby_tab1.val2
                     ->  Sort
                           Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
                           Sort Key: xc_groupby_tab1.val2
                           ->  Seq Scan on public.xc_groupby_tab1
                                 Output: xc_groupby_tab1.val2, xc_groupby_tab1.val
(16 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2 order by 1;
 val2 
------
    1
    2
    3
(3 rows)

explain (verbose true, costs false, nodes false) select val2 from xc_groupby_tab1 group by val2;
                   QUERY PLAN                   
------------------------------------------------
 Group
   Output: val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2
(8 rows)

select val + val2 from xc_groupby_tab1 group by val + val2 order by 1;
 ?column? 
----------
        2
        3
        4
        7
        8
        9
(6 rows)

explain (verbose true, costs false, nodes false) select val + val2 from xc_groupby_tab1 group by val + val2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Group
   Output: ((val + val2))
   Group Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Sort
         Output: ((val + val2))
         Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (val + val2)
(8 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        4 |   1 |    3
        3 |   2 |    1
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain (verbose true, costs false, nodes false) select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                         QUERY PLAN                          
-------------------------------------------------------------
 Group
   Output: (val + val2), val, val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Sort
         Output: val, val2
         Sort Key: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val, val2
(8 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2 order by 1;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        5 |   3 |    2
        5 |   4 |    1
        6 |   2 |    4
        6 |   4 |    2
        7 |   3 |    4
(6 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Group
   Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
   Group Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Sort
         Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
         Sort Key: xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Merge Join
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val2
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2 order by 1;
 ?column? 
----------
        2
        5
        6
        7
(4 rows)

explain (verbose true, costs false, nodes false) select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Group
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   Group Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Sort
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         Sort Key: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Merge Join
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
               Merge Cond: (xc_groupby_tab1.val = xc_groupby_tab2.val)
               ->  Sort
                     Output: xc_groupby_tab1.val
                     Sort Key: xc_groupby_tab1.val
                     ->  Seq Scan on public.xc_groupby_tab1
                           Output: xc_groupby_tab1.val
               ->  Sort
                     Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
                     Sort Key: xc_groupby_tab2.val
                     ->  Seq Scan on public.xc_groupby_tab2
                           Output: xc_groupby_tab2.val2, xc_groupby_tab2.val
(19 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2 order by 1;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain (verbose true, costs false, nodes false) select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                          QUERY PLAN                           
---------------------------------------------------------------
 GroupAggregate
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   Group Key: xc_groupby_tab1.val2
   ->  Sort
         Output: val2, val
         Sort Key: xc_groupby_tab1.val2
         ->  Seq Scan on public.xc_groupby_tab1
               Output: val2, val
(8 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2 order by 1;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain (verbose true, costs false, nodes false) select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                   QUERY PLAN                   
------------------------------------------------
 GroupAggregate
   Output: sum(val), avg(val), ((2 * val2))
   Group Key: ((2 * xc_groupby_tab1.val2))
   ->  Sort
         Output: ((2 * val2)), val
         Sort Key: ((2 * xc_groupby_tab1.val2))
         ->  Seq Scan on public.xc_groupby_tab1
               Output: (2 * val2), val
(8 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)) distribute by replication; 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain (verbose true, costs false, nodes false) select a,count(a) from xc_groupby_def group by a order by a;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: a, count(a)
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by a; 
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a; 
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: avg(a), a
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by a;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by a;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: avg(a), a
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
(8 rows)

select avg(a) from xc_groupby_def group by b order by 1;
        avg         
--------------------
 4.0000000000000000
 4.5000000000000000
 6.2000000000000000
                   
(4 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: avg(a), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

select sum(a) from xc_groupby_def group by b order by 1;
 sum 
-----
   8
  18
  31
    
(4 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: sum(a), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b, a
(8 rows)

select count(*) from xc_groupby_def group by b;
 count 
-------
     1
     5
     4
     3
(4 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select count(*) from xc_groupby_def where a is not null group by a;
 count 
-------
     1
     2
     1
     1
     1
     1
     1
     1
     1
     1
(10 rows)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where a is not null group by a;
                      QUERY PLAN                      
------------------------------------------------------
 GroupAggregate
   Output: count(*), a
   Group Key: xc_groupby_def.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Seq Scan on public.xc_groupby_def
               Output: a
               Filter: (xc_groupby_def.a IS NOT NULL)
(9 rows)

select b from xc_groupby_def group by b order by 1;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain (verbose true, costs false, nodes false) select b from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 Group
   Output: b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select b,count(b) from xc_groupby_def group by b order by 1;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain (verbose true, costs false, nodes false) select b,count(b) from xc_groupby_def group by b;
                  QUERY PLAN                   
-----------------------------------------------
 GroupAggregate
   Output: b, count(b)
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
(8 rows)

select count(*) from xc_groupby_def where b is null group by b;
 count 
-------
     3
(1 row)

explain (verbose true, costs false, nodes false) select count(*) from xc_groupby_def where b is null group by b;
                    QUERY PLAN                    
--------------------------------------------------
 GroupAggregate
   Output: count(*), b
   Group Key: xc_groupby_def.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_def.b
         ->  Seq Scan on public.xc_groupby_def
               Output: b
               Filter: (xc_groupby_def.b IS NULL)
(9 rows)

create table xc_groupby_g(a int, b float, c numeric) distribute by replication;
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(a) from xc_groupby_g group by a;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(a), a
   Group Key: xc_groupby_g.a
   ->  Sort
         Output: a
         Sort Key: xc_groupby_g.a
         ->  Seq Scan on public.xc_groupby_g
               Output: a
(8 rows)

select sum(b) from xc_groupby_g group by b;
 sum 
-----
 4.2
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select sum(b) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(b), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b
(8 rows)

select sum(c) from xc_groupby_g group by b;
 sum 
-----
 6.4
 5.2
(2 rows)

explain (verbose true, costs false, nodes false) select sum(c) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: sum(c), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b, c
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, c
(8 rows)

select avg(a) from xc_groupby_g group by b;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(a) from xc_groupby_g group by b;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(a), b
   Group Key: xc_groupby_g.b
   ->  Sort
         Output: b, a
         Sort Key: xc_groupby_g.b
         ->  Seq Scan on public.xc_groupby_g
               Output: b, a
(8 rows)

select avg(b) from xc_groupby_g group by c;
 avg 
-----
 2.1
 2.3
(2 rows)

explain (verbose true, costs false, nodes false) select avg(b) from xc_groupby_g group by c;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(b), c
   Group Key: xc_groupby_g.c
   ->  Sort
         Output: c, b
         Sort Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c, b
(8 rows)

select avg(c) from xc_groupby_g group by c;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain (verbose true, costs false, nodes false) select avg(c) from xc_groupby_g group by c;
                 QUERY PLAN                  
---------------------------------------------
 GroupAggregate
   Output: avg(c), c
   Group Key: xc_groupby_g.c
   ->  Sort
         Output: c
         Sort Key: xc_groupby_g.c
         ->  Seq Scan on public.xc_groupby_g
               Output: c
(8 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
reset enable_hashagg;
reset enable_fast_query_shipping;
