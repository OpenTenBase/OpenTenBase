--
-- UPDATE syntax tests
--
CREATE TABLE update_test (
    a   INT DEFAULT 10,
    b   INT,
    c   TEXT
) DISTRIBUTE BY REPLICATION;
CREATE TABLE upsert_test (
    a   INT PRIMARY KEY,
    b   TEXT
) DISTRIBUTE BY REPLICATION;
INSERT INTO update_test VALUES (5, 10, 'foo');
INSERT INTO update_test(b, a) VALUES (15, 10);
SELECT * FROM update_test ORDER BY a, b, c;
 a  | b  |  c  
----+----+-----
  5 | 10 | foo
 10 | 15 | 
(2 rows)

UPDATE update_test SET a = DEFAULT, b = DEFAULT;
SELECT * FROM update_test  ORDER BY a, b, c;
 a  | b |  c  
----+---+-----
 10 |   | foo
 10 |   | 
(2 rows)

-- aliases for the UPDATE target table
UPDATE update_test AS t SET b = 10 WHERE t.a = 10;
SELECT * FROM update_test  ORDER BY a, b, c;
 a  | b  |  c  
----+----+-----
 10 | 10 | foo
 10 | 10 | 
(2 rows)

UPDATE update_test t SET b = t.b + 10 WHERE t.a = 10;
SELECT * FROM update_test  ORDER BY a, b, c;
 a  | b  |  c  
----+----+-----
 10 | 20 | foo
 10 | 20 | 
(2 rows)

--
-- Test VALUES in FROM
--
UPDATE update_test SET a=v.i FROM (VALUES(100, 20)) AS v(i, j)
  WHERE update_test.b = v.j;
SELECT * FROM update_test  ORDER BY a, b, c;
  a  | b  |  c  
-----+----+-----
 100 | 20 | foo
 100 | 20 | 
(2 rows)

-- fail, wrong data type:
UPDATE update_test SET a = v.* FROM (VALUES(100, 20)) AS v(i, j)
  WHERE update_test.b = v.j;
ERROR:  column "a" is of type integer but expression is of type record
LINE 1: UPDATE update_test SET a = v.* FROM (VALUES(100, 20)) AS v(i...
                                   ^
HINT:  You will need to rewrite or cast the expression.
--
-- Test multiple-set-clause syntax
--
INSERT INTO update_test SELECT a,b+1,c FROM update_test;
SELECT * FROM update_test;
  a  | b  |  c  
-----+----+-----
 100 | 20 | foo
 100 | 20 | 
 100 | 21 | foo
 100 | 21 | 
(4 rows)

UPDATE update_test SET (c,b,a) = ('bugle', b+11, DEFAULT) WHERE c = 'foo';
SELECT * FROM update_test  ORDER BY a, b, c;
  a  | b  |   c   
-----+----+-------
  10 | 31 | bugle
  10 | 32 | bugle
 100 | 20 | 
 100 | 21 | 
(4 rows)

UPDATE update_test SET (c,b) = ('car', a+b), a = a + 1 WHERE a = 10;
SELECT * FROM update_test  ORDER BY a, b, c;
  a  | b  |  c  
-----+----+-----
  11 | 41 | car
  11 | 42 | car
 100 | 20 | 
 100 | 21 | 
(4 rows)

-- fail, multi assignment to same column:
UPDATE update_test SET (c,b) = ('car', a+b), b = a + 1 WHERE a = 10;
ERROR:  multiple assignments to same column "b"
-- uncorrelated sub-select:
UPDATE update_test
  SET (b,a) = (select a,b from update_test where b = 41 and c = 'car')
  WHERE a = 100 AND b = 20;
SELECT * FROM update_test order by 1;
  a  | b  |  c  
-----+----+-----
  11 | 41 | car
  11 | 42 | car
  41 | 11 | 
 100 | 21 | 
(4 rows)

-- correlated sub-select:
UPDATE update_test o
  SET (b,a) = (select a+1,b from update_test i
               where i.a=o.a and i.b=o.b and i.c is not distinct from o.c);
SELECT * FROM update_test order by 1;
 a  |  b  |  c  
----+-----+-----
 11 |  42 | 
 21 | 101 | 
 41 |  12 | car
 42 |  12 | car
(4 rows)

-- fail, multiple rows supplied:
UPDATE update_test SET (b,a) = (select a+1,b from update_test);
ERROR:  more than one row returned by a subquery used as an expression
-- set to null if no rows supplied:
UPDATE update_test SET (b,a) = (select a+1,b from update_test where a = 1000)
  WHERE a = 11;
SELECT * FROM update_test order by 1;
 a  |  b  |  c  
----+-----+-----
 21 | 101 | 
 41 |  12 | car
 42 |  12 | car
    |     | 
(4 rows)

-- *-expansion should work in this context:
UPDATE update_test SET (a,b) = ROW(v.*) FROM (VALUES(21, 100)) AS v(i, j)
  WHERE update_test.a = v.i;
-- you might expect this to work, but syntactically it's not a RowExpr:
UPDATE update_test SET (a,b) = (v.*) FROM (VALUES(21, 101)) AS v(i, j)
  WHERE update_test.a = v.i;
ERROR:  source for a multiple-column UPDATE item must be a sub-SELECT or ROW() expression
LINE 1: UPDATE update_test SET (a,b) = (v.*) FROM (VALUES(21, 101)) ...
                                        ^
-- if an alias for the target table is specified, don't allow references
-- to the original table name
UPDATE update_test AS t SET b = update_test.b + 10 WHERE t.a = 10;
ERROR:  invalid reference to FROM-clause entry for table "update_test"
LINE 1: UPDATE update_test AS t SET b = update_test.b + 10 WHERE t.a...
                                        ^
HINT:  Perhaps you meant to reference the table alias "t".
-- Make sure that we can update to a TOASTed value.
UPDATE update_test SET c = repeat('x', 10000) WHERE c = 'car';
SELECT a, b, char_length(c) FROM update_test ORDER BY a;
 a  |  b  | char_length 
----+-----+-------------
 21 | 100 |            
 41 |  12 |       10000
 42 |  12 |       10000
    |     |            
(4 rows)

-- Check multi-assignment with a Result node to handle a one-time filter.
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE update_test t
  SET (a, b) = (SELECT b, a FROM update_test s WHERE s.a = t.a)
  WHERE CURRENT_USER = SESSION_USER;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Update on public.update_test t
   ->  Result
         Output: s.b, s.a, t.shardid, t.ctid, s.ctid, s.xc_node_id
         One-Time Filter: (CURRENT_USER = SESSION_USER)
         ->  Hash Left Scalar Join
               Output: t.shardid, t.ctid, s.b, s.a, s.ctid, s.xc_node_id
               Hash Cond: (t.a = s.a)
               ->  Seq Scan on public.update_test t
                     Output: t.shardid, t.ctid, t.a
               ->  Hash
                     Output: s.b, s.a, s.ctid, s.xc_node_id
                     ->  Seq Scan on public.update_test s
                           Output: s.b, s.a, s.ctid, s.xc_node_id
(13 rows)

UPDATE update_test t
  SET (a, b) = (SELECT b, a FROM update_test s WHERE s.a = t.a)
  WHERE CURRENT_USER = SESSION_USER;
SELECT a, b, char_length(c) FROM update_test;
  a  | b  | char_length 
-----+----+-------------
     |    |            
 100 | 21 |            
  12 | 41 |       10000
  12 | 42 |       10000
(4 rows)

-- Test ON CONFLICT DO UPDATE
INSERT INTO upsert_test VALUES(1, 'Boo');
-- uncorrelated  sub-select:
WITH aaa AS (SELECT 1 AS a, 'Foo' AS b) INSERT INTO upsert_test
  VALUES (1, 'Bar') ON CONFLICT(a)
  DO UPDATE SET (b, a) = (SELECT b, a FROM aaa) RETURNING *;
 a |  b  
---+-----
 1 | Foo
(1 row)

-- correlated sub-select:
INSERT INTO upsert_test VALUES (1, 'Baz') ON CONFLICT(a)
  DO UPDATE SET (b, a) = (SELECT b || ', Correlated', a from upsert_test i WHERE i.a = upsert_test.a)
  RETURNING *;
 a |        b        
---+-----------------
 1 | Foo, Correlated
(1 row)

-- correlated sub-select (EXCLUDED.* alias):
INSERT INTO upsert_test VALUES (1, 'Bat') ON CONFLICT(a)
  DO UPDATE SET (b, a) = (SELECT b || ', Excluded', a from upsert_test i WHERE i.a = excluded.a)
  RETURNING *;
 a |             b             
---+---------------------------
 1 | Foo, Correlated, Excluded
(1 row)

DROP TABLE update_test;
DROP TABLE upsert_test;
---------------------------
-- UPDATE with row movement
---------------------------
-- When a partitioned table receives an UPDATE to the partitioned key and the
-- new values no longer meet the partition's bound, the row must be moved to
-- the correct partition for the new partition key (if one exists). We must
-- also ensure that updatable views on partitioned tables properly enforce any
-- WITH CHECK OPTION that is defined. The situation with triggers in this case
-- also requires thorough testing as partition key updates causing row
-- movement convert UPDATEs into DELETE+INSERT.
CREATE TABLE range_parted (
	a text,
	b bigint,
	c numeric,
	d int,
	e varchar
) PARTITION BY RANGE (a, b);
-- Create partitions intentionally in descending bound order, so as to test
-- that update-row-movement works with the leaf partitions not in bound order.
CREATE TABLE part_b_20_b_30 (a text, b bigint, c numeric, d int, e varchar);
ALTER TABLE range_parted ATTACH PARTITION part_b_20_b_30 FOR VALUES FROM ('b', 20) TO ('b', 30);
CREATE TABLE part_b_10_b_20 (a text, b bigint, c numeric, d int, e varchar) PARTITION BY RANGE (c);
CREATE TABLE part_b_1_b_10 PARTITION OF range_parted FOR VALUES FROM ('b', 1) TO ('b', 10);
ALTER TABLE range_parted ATTACH PARTITION part_b_10_b_20 FOR VALUES FROM ('b', 10) TO ('b', 20);
CREATE TABLE part_a_10_a_20 PARTITION OF range_parted FOR VALUES FROM ('a', 10) TO ('a', 20);
CREATE TABLE part_a_1_a_10 PARTITION OF range_parted FOR VALUES FROM ('a', 1) TO ('a', 10);
-- Check that partition-key UPDATE works sanely on a partitioned table that
-- does not have any child partitions.
UPDATE part_b_10_b_20 set b = b - 6;
-- Create some more partitions following the above pattern of descending bound
-- order, but let's make the situation a bit more complex by having the
-- attribute numbers of the columns vary from their parent partition.
CREATE TABLE part_c_100_200 (a text, b bigint, c numeric, d int, e varchar) PARTITION BY range (abs(d));
CREATE TABLE part_d_1_15 PARTITION OF part_c_100_200 FOR VALUES FROM (1) TO (15);
CREATE TABLE part_d_15_20 PARTITION OF part_c_100_200 FOR VALUES FROM (15) TO (20);
ALTER TABLE part_b_10_b_20 ATTACH PARTITION part_c_100_200 FOR VALUES FROM (100) TO (200);
CREATE TABLE part_c_1_100 (a text, b bigint, c numeric, d int, e varchar);
ALTER TABLE part_b_10_b_20 ATTACH PARTITION part_c_1_100 FOR VALUES FROM (1) TO (100);
\set init_range_parted 'truncate range_parted; insert into range_parted VALUES (''a'', 1, 1, 1), (''a'', 10, 200, 1), (''b'', 12, 96, 1), (''b'', 13, 97, 2), (''b'', 15, 105, 16), (''b'', 17, 105, 19)'
\set show_data 'select tableoid::regclass::text COLLATE "C" partname, * from range_parted ORDER BY 1, 2, 3, 4, 5, 6'
:init_range_parted;
:show_data;
    partname    | a | b  |  c  | d  | e 
----------------+---+----+-----+----+---
 part_a_10_a_20 | a | 10 | 200 |  1 | 
 part_a_1_a_10  | a |  1 |   1 |  1 | 
 part_c_1_100   | b | 12 |  96 |  1 | 
 part_c_1_100   | b | 13 |  97 |  2 | 
 part_d_15_20   | b | 15 | 105 | 16 | 
 part_d_15_20   | b | 17 | 105 | 19 | 
(6 rows)

-- The order of subplans should be in bound order
EXPLAIN (costs off) UPDATE range_parted set c = c - 50 WHERE c > 97;
                QUERY PLAN                 
-------------------------------------------
 Update on range_parted
   Update on part_a_1_a_10 range_parted
   Update on part_a_10_a_20 range_parted
   Update on part_b_1_b_10 range_parted
   Update on part_c_1_100 range_parted
   Update on part_d_1_15 range_parted
   Update on part_d_15_20 range_parted
   Update on part_b_20_b_30 range_parted
   ->  PartIterator
         ->  Seq Scan on range_parted
               Filter: (c > '97'::numeric)
(11 rows)

-- fail, row movement happens only within the partition subtree.
UPDATE part_c_100_200 set c = c - 20, d = c WHERE c = 105;
ERROR:  new row for relation "part_c_100_200" violates partition constraint
DETAIL:  Failing row contains (b, 15, 85, 105, null).
-- fail, no partition key update, so no attempt to move tuple,
-- but "a = 'a'" violates partition constraint enforced by root partition)
UPDATE part_b_10_b_20 set a = 'a';
ERROR:  new row for relation "part_c_1_100" violates partition constraint
DETAIL:  Failing row contains (a, 12, 96, 1, null).
-- ok, partition key update, no constraint violation
UPDATE range_parted set d = d - 10 WHERE d > 10;
-- ok, no partition key update, no constraint violation
UPDATE range_parted set e = d;
-- No row found
UPDATE part_c_1_100 set c = c + 20 WHERE c = 98;
:show_data;
    partname    | a | b  |  c  | d | e 
----------------+---+----+-----+---+---
 part_a_10_a_20 | a | 10 | 200 | 1 | 1
 part_a_1_a_10  | a |  1 |   1 | 1 | 1
 part_c_1_100   | b | 12 |  96 | 1 | 1
 part_c_1_100   | b | 13 |  97 | 2 | 2
 part_d_1_15    | b | 15 | 105 | 6 | 6
 part_d_1_15    | b | 17 | 105 | 9 | 9
(6 rows)

-- Common table needed for multiple test scenarios.
CREATE TABLE mintab(c1 int);
INSERT into mintab VALUES (120);
-- update partition key using updatable view.
CREATE VIEW upview AS SELECT * FROM range_parted WHERE (select c > c1 FROM mintab) WITH CHECK OPTION;
-- ok
UPDATE upview set c = 199 WHERE b = 4;
-- fail, check option violation
UPDATE upview set c = 120 WHERE b = 4;
-- fail, row movement with check option violation
UPDATE upview set a = 'b', b = 15, c = 120 WHERE b = 4;
-- ok, row movement, check option passes
UPDATE upview set a = 'b', b = 15 WHERE b = 4;
:show_data;
    partname    | a | b  |  c  | d | e 
----------------+---+----+-----+---+---
 part_a_10_a_20 | a | 10 | 200 | 1 | 1
 part_a_1_a_10  | a |  1 |   1 | 1 | 1
 part_c_1_100   | b | 12 |  96 | 1 | 1
 part_c_1_100   | b | 13 |  97 | 2 | 2
 part_d_1_15    | b | 15 | 105 | 6 | 6
 part_d_1_15    | b | 17 | 105 | 9 | 9
(6 rows)

-- cleanup
DROP VIEW upview;
-- RETURNING having whole-row vars.
:init_range_parted;
UPDATE range_parted set c = 95 WHERE a = 'b' and b > 10 and c < 100 returning (range_parted), *;
 range_parted | a | b  | c  | d | e 
--------------+---+----+----+---+---
 (b,12,95,1,) | b | 12 | 95 | 1 | 
 (b,13,95,2,) | b | 13 | 95 | 2 | 
(2 rows)

:show_data;
    partname    | a | b  |  c  | d  | e 
----------------+---+----+-----+----+---
 part_a_10_a_20 | a | 10 | 200 |  1 | 
 part_a_1_a_10  | a |  1 |   1 |  1 | 
 part_c_1_100   | b | 12 |  95 |  1 | 
 part_c_1_100   | b | 13 |  95 |  2 | 
 part_d_15_20   | b | 15 | 105 | 16 | 
 part_d_15_20   | b | 17 | 105 | 19 | 
(6 rows)

-- Transition tables with update row movement
:init_range_parted;
CREATE FUNCTION trans_updatetrigfunc() RETURNS trigger LANGUAGE plpgsql AS
$$
  begin
    raise notice 'trigger = %, old table = %, new table = %',
                 TG_NAME,
                 (select string_agg(old_table::text, ', ' ORDER BY a) FROM old_table),
                 (select string_agg(new_table::text, ', ' ORDER BY a) FROM new_table);
    return null;
  end;
$$;
CREATE TRIGGER trans_updatetrig
  AFTER UPDATE ON range_parted REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table
  FOR EACH STATEMENT EXECUTE PROCEDURE trans_updatetrigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
UPDATE range_parted set c = (case when c = 96 then 110 else c + 1 end ) WHERE a = 'b' and b > 10 and c >= 96;
:show_data;
    partname    | a | b  |  c  | d  | e 
----------------+---+----+-----+----+---
 part_a_10_a_20 | a | 10 | 200 |  1 | 
 part_a_1_a_10  | a |  1 |   1 |  1 | 
 part_c_1_100   | b | 13 |  98 |  2 | 
 part_d_15_20   | b | 15 | 106 | 16 | 
 part_d_15_20   | b | 17 | 106 | 19 | 
 part_d_1_15    | b | 12 | 110 |  1 | 
(6 rows)

:init_range_parted;
-- Enabling OLD TABLE capture for both DELETE as well as UPDATE stmt triggers
-- should not cause DELETEd rows to be captured twice. Similar thing for
-- INSERT triggers and inserted rows.
CREATE TRIGGER trans_deletetrig
  AFTER DELETE ON range_parted REFERENCING OLD TABLE AS old_table
  FOR EACH STATEMENT EXECUTE PROCEDURE trans_updatetrigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
CREATE TRIGGER trans_inserttrig
  AFTER INSERT ON range_parted REFERENCING NEW TABLE AS new_table
  FOR EACH STATEMENT EXECUTE PROCEDURE trans_updatetrigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
UPDATE range_parted set c = c + 50 WHERE a = 'b' and b > 10 and c >= 96;
:show_data;
    partname    | a | b  |  c  | d  | e 
----------------+---+----+-----+----+---
 part_a_10_a_20 | a | 10 | 200 |  1 | 
 part_a_1_a_10  | a |  1 |   1 |  1 | 
 part_d_15_20   | b | 15 | 155 | 16 | 
 part_d_15_20   | b | 17 | 155 | 19 | 
 part_d_1_15    | b | 12 | 146 |  1 | 
 part_d_1_15    | b | 13 | 147 |  2 | 
(6 rows)

DROP TRIGGER trans_deletetrig ON range_parted;
ERROR:  trigger "trans_deletetrig" for table "range_parted" does not exist
DROP TRIGGER trans_inserttrig ON range_parted;
ERROR:  trigger "trans_inserttrig" for table "range_parted" does not exist
-- Don't drop trans_updatetrig yet. It is required below.
-- Test with transition tuple conversion happening for rows moved into the
-- new partition. This requires a trigger that references transition table
-- (we already have trans_updatetrig). For inserted rows, the conversion
-- is not usually needed, because the original tuple is already compatible with
-- the desired transition tuple format. But conversion happens when there is a
-- BR trigger because the trigger can change the inserted row. So install a
-- BR triggers on those child partitions where the rows will be moved.
CREATE FUNCTION func_parted_mod_b() RETURNS trigger AS $$
BEGIN
   NEW.b = NEW.b + 1;
   return NEW;
END $$ language plpgsql;
CREATE TRIGGER trig_c1_100 BEFORE UPDATE OR INSERT ON part_c_1_100
   FOR EACH ROW EXECUTE PROCEDURE func_parted_mod_b();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
CREATE TRIGGER trig_d1_15 BEFORE UPDATE OR INSERT ON part_d_1_15
   FOR EACH ROW EXECUTE PROCEDURE func_parted_mod_b();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
CREATE TRIGGER trig_d15_20 BEFORE UPDATE OR INSERT ON part_d_15_20
   FOR EACH ROW EXECUTE PROCEDURE func_parted_mod_b();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
:init_range_parted;
UPDATE range_parted set c = (case when c = 96 then 110 else c + 1 end) WHERE a = 'b' and b > 10 and c >= 96;
:show_data;
    partname    | a | b  |  c  | d  | e 
----------------+---+----+-----+----+---
 part_a_10_a_20 | a | 10 | 200 |  1 | 
 part_a_1_a_10  | a |  1 |   1 |  1 | 
 part_c_1_100   | b | 13 |  98 |  2 | 
 part_d_15_20   | b | 15 | 106 | 16 | 
 part_d_15_20   | b | 17 | 106 | 19 | 
 part_d_1_15    | b | 12 | 110 |  1 | 
(6 rows)

:init_range_parted;
UPDATE range_parted set c = c + 50 WHERE a = 'b' and b > 10 and c >= 96;
:show_data;
    partname    | a | b  |  c  | d  | e 
----------------+---+----+-----+----+---
 part_a_10_a_20 | a | 10 | 200 |  1 | 
 part_a_1_a_10  | a |  1 |   1 |  1 | 
 part_d_15_20   | b | 15 | 155 | 16 | 
 part_d_15_20   | b | 17 | 155 | 19 | 
 part_d_1_15    | b | 12 | 146 |  1 | 
 part_d_1_15    | b | 13 | 147 |  2 | 
(6 rows)

-- Case where per-partition tuple conversion map array is allocated, but the
-- map is not required for the particular tuple that is routed, thanks to
-- matching table attributes of the partition and the target table.
:init_range_parted;
UPDATE range_parted set b = 15 WHERE b = 1;
:show_data;
    partname    | a | b  |  c  | d  | e 
----------------+---+----+-----+----+---
 part_a_10_a_20 | a | 10 | 200 |  1 | 
 part_a_10_a_20 | a | 15 |   1 |  1 | 
 part_c_1_100   | b | 12 |  96 |  1 | 
 part_c_1_100   | b | 13 |  97 |  2 | 
 part_d_15_20   | b | 15 | 105 | 16 | 
 part_d_15_20   | b | 17 | 105 | 19 | 
(6 rows)

DROP TRIGGER trans_updatetrig ON range_parted;
ERROR:  trigger "trans_updatetrig" for table "range_parted" does not exist
DROP TRIGGER trig_c1_100 ON part_c_1_100;
ERROR:  trigger "trig_c1_100" for table "part_c_1_100" does not exist
DROP TRIGGER trig_d1_15 ON part_d_1_15;
ERROR:  trigger "trig_d1_15" for table "part_d_1_15" does not exist
DROP TRIGGER trig_d15_20 ON part_d_15_20;
ERROR:  trigger "trig_d15_20" for table "part_d_15_20" does not exist
DROP FUNCTION func_parted_mod_b();
-- RLS policies with update-row-movement
-----------------------------------------
ALTER TABLE range_parted ENABLE ROW LEVEL SECURITY;
CREATE USER regress_range_parted_user;
GRANT ALL ON range_parted, mintab TO regress_range_parted_user;
CREATE POLICY seeall ON range_parted AS PERMISSIVE FOR SELECT USING (true);
CREATE POLICY policy_range_parted ON range_parted for UPDATE USING (true) WITH CHECK (c % 2 = 0);
:init_range_parted;
SET SESSION AUTHORIZATION regress_range_parted_user;
-- This should fail with RLS violation error while moving row from
-- part_a_10_a_20 to part_d_1_15, because we are setting 'c' to an odd number.
UPDATE range_parted set a = 'b', c = 151 WHERE a = 'a' and c = 200;
ERROR:  new row violates row-level security policy for table "range_parted"
RESET SESSION AUTHORIZATION;
-- Create a trigger on part_d_1_15
CREATE FUNCTION func_d_1_15() RETURNS trigger AS $$
BEGIN
   NEW.c = NEW.c + 1; -- Make even numbers odd, or vice versa
   return NEW;
END $$ LANGUAGE plpgsql;
CREATE TRIGGER trig_d_1_15 BEFORE INSERT ON part_d_1_15
   FOR EACH ROW EXECUTE PROCEDURE func_d_1_15();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
:init_range_parted;
SET SESSION AUTHORIZATION regress_range_parted_user;
-- Here, RLS checks should succeed while moving row from part_a_10_a_20 to
-- part_d_1_15. Even though the UPDATE is setting 'c' to an odd number, the
-- trigger at the destination partition again makes it an even number.
UPDATE range_parted set a = 'b', c = 151 WHERE a = 'a' and c = 200;
ERROR:  new row violates row-level security policy for table "range_parted"
RESET SESSION AUTHORIZATION;
:init_range_parted;
SET SESSION AUTHORIZATION regress_range_parted_user;
-- This should fail with RLS violation error. Even though the UPDATE is setting
-- 'c' to an even number, the trigger at the destination partition again makes
-- it an odd number.
UPDATE range_parted set a = 'b', c = 150 WHERE a = 'a' and c = 200;
-- Cleanup
RESET SESSION AUTHORIZATION;
DROP TRIGGER trig_d_1_15 ON part_d_1_15;
ERROR:  trigger "trig_d_1_15" for table "part_d_1_15" does not exist
DROP FUNCTION func_d_1_15();
-- Policy expression contains SubPlan
RESET SESSION AUTHORIZATION;
:init_range_parted;
CREATE POLICY policy_range_parted_subplan on range_parted
    AS RESTRICTIVE for UPDATE USING (true)
    WITH CHECK ((SELECT range_parted.c <= c1 FROM mintab));
SET SESSION AUTHORIZATION regress_range_parted_user;
-- fail, mintab has row with c1 = 120
UPDATE range_parted set a = 'b', c = 122 WHERE a = 'a' and c = 200;
ERROR:  new row violates row-level security policy "policy_range_parted_subplan" for table "range_parted"
-- ok
UPDATE range_parted set a = 'b', c = 120 WHERE a = 'a' and c = 200;
-- RLS policy expression contains whole row.
RESET SESSION AUTHORIZATION;
:init_range_parted;
CREATE POLICY policy_range_parted_wholerow on range_parted AS RESTRICTIVE for UPDATE USING (true)
   WITH CHECK (range_parted = row('b', 10, 112, 1, NULL)::range_parted);
SET SESSION AUTHORIZATION regress_range_parted_user;
-- ok, should pass the RLS check
UPDATE range_parted set a = 'b', c = 112 WHERE a = 'a' and c = 200;
RESET SESSION AUTHORIZATION;
:init_range_parted;
SET SESSION AUTHORIZATION regress_range_parted_user;
-- fail, the whole row RLS check should fail
UPDATE range_parted set a = 'b', c = 116 WHERE a = 'a' and c = 200;
ERROR:  new row violates row-level security policy "policy_range_parted_wholerow" for table "range_parted"
-- Cleanup
RESET SESSION AUTHORIZATION;
DROP POLICY policy_range_parted ON range_parted;
DROP POLICY policy_range_parted_subplan ON range_parted;
DROP POLICY policy_range_parted_wholerow ON range_parted;
REVOKE ALL ON range_parted, mintab FROM regress_range_parted_user;
DROP USER regress_range_parted_user;
DROP TABLE mintab;
-- statement triggers with update row movement
---------------------------------------------------
:init_range_parted;
CREATE FUNCTION trigfunc() returns trigger language plpgsql as
$$
  begin
    raise notice 'trigger = % fired on table % during %',
                 TG_NAME, TG_TABLE_NAME, TG_OP;
    return null;
  end;
$$;
-- Triggers on root partition
CREATE TRIGGER parent_delete_trig
  AFTER DELETE ON range_parted for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
CREATE TRIGGER parent_update_trig
  AFTER UPDATE ON range_parted for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
CREATE TRIGGER parent_insert_trig
  AFTER INSERT ON range_parted for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
-- Triggers on leaf partition part_c_1_100
CREATE TRIGGER c1_delete_trig
  AFTER DELETE ON part_c_1_100 for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
CREATE TRIGGER c1_update_trig
  AFTER UPDATE ON part_c_1_100 for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
CREATE TRIGGER c1_insert_trig
  AFTER INSERT ON part_c_1_100 for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
-- Triggers on leaf partition part_d_1_15
CREATE TRIGGER d1_delete_trig
  AFTER DELETE ON part_d_1_15 for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
CREATE TRIGGER d1_update_trig
  AFTER UPDATE ON part_d_1_15 for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
CREATE TRIGGER d1_insert_trig
  AFTER INSERT ON part_d_1_15 for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
-- Triggers on leaf partition part_d_15_20
CREATE TRIGGER d15_delete_trig
  AFTER DELETE ON part_d_15_20 for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
CREATE TRIGGER d15_update_trig
  AFTER UPDATE ON part_d_15_20 for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
CREATE TRIGGER d15_insert_trig
  AFTER INSERT ON part_d_15_20 for each statement execute procedure trigfunc();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
-- Move all rows from part_c_100_200 to part_c_1_100. None of the delete or
-- insert statement triggers should be fired.
UPDATE range_parted set c = c - 50 WHERE c > 97;
:show_data;
    partname    | a | b  |  c  | d  | e 
----------------+---+----+-----+----+---
 part_a_10_a_20 | a | 10 | 150 |  1 | 
 part_a_1_a_10  | a |  1 |   1 |  1 | 
 part_c_1_100   | b | 12 |  96 |  1 | 
 part_c_1_100   | b | 13 |  97 |  2 | 
 part_c_1_100   | b | 15 |  55 | 16 | 
 part_c_1_100   | b | 17 |  55 | 19 | 
(6 rows)

DROP TRIGGER parent_delete_trig ON range_parted;
ERROR:  trigger "parent_delete_trig" for table "range_parted" does not exist
DROP TRIGGER parent_update_trig ON range_parted;
ERROR:  trigger "parent_update_trig" for table "range_parted" does not exist
DROP TRIGGER parent_insert_trig ON range_parted;
ERROR:  trigger "parent_insert_trig" for table "range_parted" does not exist
DROP TRIGGER c1_delete_trig ON part_c_1_100;
ERROR:  trigger "c1_delete_trig" for table "part_c_1_100" does not exist
DROP TRIGGER c1_update_trig ON part_c_1_100;
ERROR:  trigger "c1_update_trig" for table "part_c_1_100" does not exist
DROP TRIGGER c1_insert_trig ON part_c_1_100;
ERROR:  trigger "c1_insert_trig" for table "part_c_1_100" does not exist
DROP TRIGGER d1_delete_trig ON part_d_1_15;
ERROR:  trigger "d1_delete_trig" for table "part_d_1_15" does not exist
DROP TRIGGER d1_update_trig ON part_d_1_15;
ERROR:  trigger "d1_update_trig" for table "part_d_1_15" does not exist
DROP TRIGGER d1_insert_trig ON part_d_1_15;
ERROR:  trigger "d1_insert_trig" for table "part_d_1_15" does not exist
DROP TRIGGER d15_delete_trig ON part_d_15_20;
ERROR:  trigger "d15_delete_trig" for table "part_d_15_20" does not exist
DROP TRIGGER d15_update_trig ON part_d_15_20;
ERROR:  trigger "d15_update_trig" for table "part_d_15_20" does not exist
DROP TRIGGER d15_insert_trig ON part_d_15_20;
ERROR:  trigger "d15_insert_trig" for table "part_d_15_20" does not exist
-- Creating default partition for range
:init_range_parted;
create table part_def partition of range_parted default;
\d+ part_def
                                       Table "public.part_def"
 Column |       Type        | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+-------------------+-----------+----------+---------+----------+--------------+-------------
 a      | text              |           |          |         | extended |              | 
 b      | bigint            |           |          |         | plain    |              | 
 c      | numeric           |           |          |         | main     |              | 
 d      | integer           |           |          |         | plain    |              | 
 e      | character varying |           |          |         | extended |              | 
Partition of: range_parted DEFAULT
Partition constraint: (NOT ((a IS NOT NULL) AND (b IS NOT NULL) AND (((a = 'a'::text) AND (b >= '1'::bigint) AND (b < '10'::bigint)) OR ((a = 'a'::text) AND (b >= '10'::bigint) AND (b < '20'::bigint)) OR ((a = 'b'::text) AND (b >= '1'::bigint) AND (b < '10'::bigint)) OR ((a = 'b'::text) AND (b >= '10'::bigint) AND (b < '20'::bigint)) OR ((a = 'b'::text) AND (b >= '20'::bigint) AND (b < '30'::bigint)))))
Distribute By: HASH(a)
Location Nodes: ALL DATANODES

insert into range_parted values ('c', 9);
-- ok
update part_def set a = 'd' where a = 'c';
-- fail
update part_def set a = 'a' where a = 'd';
ERROR:  new row for relation "part_def" violates partition constraint
DETAIL:  Failing row contains (a, 9, null, null, null).
:show_data;
    partname    | a | b  |  c  | d  | e 
----------------+---+----+-----+----+---
 part_a_10_a_20 | a | 10 | 200 |  1 | 
 part_a_1_a_10  | a |  1 |   1 |  1 | 
 part_c_1_100   | b | 12 |  96 |  1 | 
 part_c_1_100   | b | 13 |  97 |  2 | 
 part_d_15_20   | b | 15 | 105 | 16 | 
 part_d_15_20   | b | 17 | 105 | 19 | 
 part_def       | d |  9 |     |    | 
(7 rows)

-- Update row movement from non-default to default partition.
-- fail, default partition is not under part_a_10_a_20;
UPDATE part_a_10_a_20 set a = 'ad' WHERE a = 'a';
ERROR:  new row for relation "part_a_10_a_20" violates partition constraint
DETAIL:  Failing row contains (ad, 10, 200, 1, null).
-- ok
UPDATE range_parted set a = 'ad' WHERE a = 'a';
UPDATE range_parted set a = 'bd' WHERE a = 'b';
:show_data;
 partname | a  | b  |  c  | d  | e 
----------+----+----+-----+----+---
 part_def | ad |  1 |   1 |  1 | 
 part_def | ad | 10 | 200 |  1 | 
 part_def | bd | 12 |  96 |  1 | 
 part_def | bd | 13 |  97 |  2 | 
 part_def | bd | 15 | 105 | 16 | 
 part_def | bd | 17 | 105 | 19 | 
 part_def | d  |  9 |     |    | 
(7 rows)

-- Update row movement from default to non-default partitions.
-- ok
UPDATE range_parted set a = 'a' WHERE a = 'ad';
UPDATE range_parted set a = 'b' WHERE a = 'bd';
:show_data;
    partname    | a | b  |  c  | d  | e 
----------------+---+----+-----+----+---
 part_a_10_a_20 | a | 10 | 200 |  1 | 
 part_a_1_a_10  | a |  1 |   1 |  1 | 
 part_c_1_100   | b | 12 |  96 |  1 | 
 part_c_1_100   | b | 13 |  97 |  2 | 
 part_d_15_20   | b | 15 | 105 | 16 | 
 part_d_15_20   | b | 17 | 105 | 19 | 
 part_def       | d |  9 |     |    | 
(7 rows)

-- Cleanup: range_parted no longer needed.
DROP TABLE range_parted;
CREATE TABLE list_parted (
	a text,
	b int
) PARTITION BY list (a);
CREATE TABLE list_part1  PARTITION OF list_parted for VALUES in ('a', 'b');
CREATE TABLE list_default PARTITION OF list_parted default;
INSERT into list_part1 VALUES ('a', 1);
INSERT into list_default VALUES ('d', 10);
-- fail
UPDATE list_default set a = 'a' WHERE a = 'd';
ERROR:  new row for relation "list_default" violates partition constraint
DETAIL:  Failing row contains (a, 10).
-- ok
UPDATE list_default set a = 'x' WHERE a = 'd';
DROP TABLE list_parted;
--------------
-- Some more update-partition-key test scenarios below. This time use list
-- partitions.
--------------
-- Setup for list partitions
CREATE TABLE list_parted (a numeric, b int, c int8) PARTITION BY list (a);
CREATE TABLE sub_parted PARTITION OF list_parted for VALUES in (1) PARTITION BY list (b);
CREATE TABLE sub_part1(b int, c int8, a numeric);
ALTER TABLE sub_parted ATTACH PARTITION sub_part1 for VALUES in (1);
ERROR:  table "sub_part1" contains column "a" at position 3, but parent "sub_parted" has it at position 1
DETAIL:  Postgres-XL requires attribute positions to match
HINT:  Check for column ordering and dropped columns, if any
CREATE TABLE sub_part2(b int, c int8, a numeric);
ALTER TABLE sub_parted ATTACH PARTITION sub_part2 for VALUES in (2);
ERROR:  table "sub_part2" contains column "a" at position 3, but parent "sub_parted" has it at position 1
DETAIL:  Postgres-XL requires attribute positions to match
HINT:  Check for column ordering and dropped columns, if any
CREATE TABLE list_part1(a numeric, b int, c int8);
ALTER TABLE list_parted ATTACH PARTITION list_part1 for VALUES in (2,3);
INSERT into list_parted VALUES (2,5,50);
INSERT into list_parted VALUES (3,6,60);
INSERT into sub_parted VALUES (1,1,60);
ERROR:  no partition of relation "sub_parted" found for row
DETAIL:  Partition key of the failing row contains (b) = (1).
INSERT into sub_parted VALUES (1,2,10);
ERROR:  no partition of relation "sub_parted" found for row
DETAIL:  Partition key of the failing row contains (b) = (2).
-- Test partition constraint violation when intermediate ancestor is used and
-- constraint is inherited from upper root.
UPDATE sub_parted set a = 2 WHERE c = 10;
-- Test update-partition-key, where the unpruned partitions do not have their
-- partition keys updated.
SELECT tableoid::regclass::text, * FROM list_parted WHERE a = 2 ORDER BY 1;
  tableoid  | a | b | c  
------------+---+---+----
 list_part1 | 2 | 5 | 50
(1 row)

UPDATE list_parted set b = c + a WHERE a = 2;
SELECT tableoid::regclass::text, * FROM list_parted WHERE a = 2 ORDER BY 1;
  tableoid  | a | b  | c  
------------+---+----+----
 list_part1 | 2 | 52 | 50
(1 row)

-- Test the case where BR UPDATE triggers change the partition key.
CREATE FUNCTION func_parted_mod_b() returns trigger as $$
BEGIN
   NEW.b = 2; -- This is changing partition key column.
   return NEW;
END $$ LANGUAGE plpgsql;
CREATE TRIGGER parted_mod_b before update on sub_part1
   for each row execute procedure func_parted_mod_b();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4;
  tableoid  | a | b  | c  
------------+---+----+----
 list_part1 | 2 | 52 | 50
 list_part1 | 3 |  6 | 60
(2 rows)

-- This should do the tuple routing even though there is no explicit
-- partition-key update, because there is a trigger on sub_part1.
UPDATE list_parted set c = 70 WHERE b  = 1;
SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4;
  tableoid  | a | b  | c  
------------+---+----+----
 list_part1 | 2 | 52 | 50
 list_part1 | 3 |  6 | 60
(2 rows)

DROP TRIGGER parted_mod_b ON sub_part1;
ERROR:  trigger "parted_mod_b" for table "sub_part1" does not exist
-- If BR DELETE trigger prevented DELETE from happening, we should also skip
-- the INSERT if that delete is part of UPDATE=>DELETE+INSERT.
CREATE OR REPLACE FUNCTION func_parted_mod_b() returns trigger as $$
BEGIN
   raise notice 'Trigger: Got OLD row %, but returning NULL', OLD;
   return NULL;
END $$ LANGUAGE plpgsql;
CREATE TRIGGER trig_skip_delete before delete on sub_part2
   for each row execute procedure func_parted_mod_b();
ERROR:  Postgres-XL does not support TRIGGER yet
DETAIL:  The feature is not currently supported
UPDATE list_parted set b = 1 WHERE c = 70;
SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4;
  tableoid  | a | b  | c  
------------+---+----+----
 list_part1 | 2 | 52 | 50
 list_part1 | 3 |  6 | 60
(2 rows)

-- Drop the trigger. Now the row should be moved.
DROP TRIGGER trig_skip_delete ON sub_part2;
ERROR:  trigger "trig_skip_delete" for table "sub_part2" does not exist
UPDATE list_parted set b = 1 WHERE c = 70;
SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4;
  tableoid  | a | b  | c  
------------+---+----+----
 list_part1 | 2 | 52 | 50
 list_part1 | 3 |  6 | 60
(2 rows)

DROP FUNCTION func_parted_mod_b();
-- UPDATE partition-key with FROM clause. If join produces multiple output
-- rows for the same row to be modified, we should tuple-route the row only
-- once. There should not be any rows inserted.
CREATE TABLE non_parted (id int);
INSERT into non_parted VALUES (1), (1), (1), (2), (2), (2), (3), (3), (3);
UPDATE list_parted t1 set a = 2 FROM non_parted t2 WHERE t1.a = t2.id and a = 1;
SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4;
  tableoid  | a | b  | c  
------------+---+----+----
 list_part1 | 2 | 52 | 50
 list_part1 | 3 |  6 | 60
(2 rows)

DROP TABLE non_parted;
-- Cleanup: list_parted no longer needed.
DROP TABLE list_parted;
-- create custom operator class and hash function, for the same reason
-- explained in alter_table.sql
create or replace function dummy_hashint4(a int4, seed int8) returns int8 as
$$ begin return (a + seed); end; $$ language 'plpgsql' immutable;
create operator class custom_opclass for type int4 using hash as
operator 1 = , function 2 dummy_hashint4(int4, int8);
create table hash_parted (
	a int,
	b int
) partition by hash (a custom_opclass, b custom_opclass);
create table hpart1 partition of hash_parted for values with (modulus 2, remainder 1);
create table hpart2 partition of hash_parted for values with (modulus 4, remainder 2);
create table hpart3 partition of hash_parted for values with (modulus 8, remainder 0);
create table hpart4 partition of hash_parted for values with (modulus 8, remainder 4);
insert into hpart1 values (1, 1);
insert into hpart2 values (2, 5);
insert into hpart4 values (3, 4);
-- fail
update hpart1 set a = 3, b=4 where a = 1;
ERROR:  new row for relation "hpart1" violates partition constraint
DETAIL:  Failing row contains (3, 4).
-- ok, row movement
update hash_parted set b = b - 1 where b = 1;
-- ok
update hash_parted set b = b + 8 where b = 1;
-- cleanup
drop table hash_parted;
drop operator class custom_opclass using hash;
drop function dummy_hashint4(a int4, seed int8);
-- test update pull up
create table test1 (                                         
    c11 integer,                                           
    c12 integer,                                                 
    c13 integer,                                                  
    c14 integer,                                                     
    c15 integer                                                       
);
create table test2 (                                         
    c21 integer,                                           
    c22 integer,                                                 
    c23 integer,                                                  
    c24 integer,                                                     
    c25 integer                                                       
);
create table test3 (                                         
    c31 bigint,                                           
    c32 bigint,                                                 
    c33 bigint,                                                  
    c34 bigint,                                                     
    c35 bigint                                                       
);
create table test4 (                                         
    c41 char(10),                                           
    c42 char(10),                                                 
    c43 char(10),                                                  
    c44 char(10),                                                     
    c45 char(10)                                                       
);
create table test5 (
    c51 char(10),
    c52 char(20),
    c53 char(30),
    c54 char(40),
    c55 char(50)
);
insert into test1
select  i,i,i,i,i
from generate_series(1, 10) as i;
insert into test2
select  i,i,i+1,i,i
from generate_series(1, 10) as i;
insert into test3
select  i,i,i+1,i,i
from generate_series(1, 10) as i;
insert into test4
select  i,i,i+1,i,i
from generate_series(1, 10) as i;
insert into test5
select  i,i,i+1,i,i
from generate_series(1, 10) as i;
explain (costs off) update test1
set c13=(select test2.c23 from test2
         where test1.c12=test2.c22
           and exists(select 1 from test3
                      where c32=c22));
                      QUERY PLAN                       
-------------------------------------------------------
 Update on test1
   ->  Seq Scan on test1
         SubPlan 1
           ->  Nested Loop
                 ->  HashAggregate
                       Group Key: test3.c32
                       ->  Seq Scan on test3
                             Filter: (c32 = test1.c12)
                 ->  Seq Scan on test2
                       Filter: (c22 = test1.c12)
(10 rows)

                      
explain (costs off) update test1
set c13=(select (select 1 from test3 where c32=c22)
         from test2
         where test1.c12=test2.c22);
                      QUERY PLAN                       
-------------------------------------------------------
 Update on test1
   ->  Seq Scan on test1
         SubPlan 1
           ->  Hash Left Scalar Join
                 Hash Cond: (test2.c22 = test3.c32)
                 ->  Seq Scan on test2
                       Filter: (test1.c12 = c22)
                 ->  Hash
                       ->  Seq Scan on test3
                             Filter: (c32 = test1.c12)
(10 rows)

explain (costs off) update test1
set c13=(select c22
         from (select * from test2 where c12=c22) t2
         where test1.c12=t2.c22);
                QUERY PLAN                 
-------------------------------------------
 Update on test1
   ->  Seq Scan on test1
         SubPlan 1
           ->  Seq Scan on test2
                 Filter: (c22 = test1.c12)
(5 rows)

explain (costs off) update test1
set (c13, c14)= (select c23, c24
                 from test2 where c12=c22);
                 QUERY PLAN                 
--------------------------------------------
 Update on test1
   ->  Hash Left Scalar Join
         Hash Cond: (test1.c12 = test2.c22)
         ->  Seq Scan on test1
         ->  Hash
               ->  Seq Scan on test2
(6 rows)

explain (costs off) update test1
set (c13)= (select c23
            from test2 where c12=c22);
                 QUERY PLAN                 
--------------------------------------------
 Update on test1
   ->  Hash Left Scalar Join
         Hash Cond: (test1.c12 = test2.c22)
         ->  Seq Scan on test1
         ->  Hash
               ->  Seq Scan on test2
(6 rows)

explain (costs off) update test3
set (c33, c34)= (select c23, c24
                 from test2 where c32=c22);
                 QUERY PLAN                 
--------------------------------------------
 Update on test3
   ->  Hash Left Scalar Join
         Hash Cond: (test3.c32 = test2.c22)
         ->  Seq Scan on test3
         ->  Hash
               ->  Seq Scan on test2
(6 rows)

explain (costs off) update test1
set (c12)=(select c22 from test2 where c13=c23), 
    (c14)=(select c24 from test2 where c13=c23);
                    QUERY PLAN                    
--------------------------------------------------
 Update on test1
   ->  Hash Left Scalar Join
         Hash Cond: (test1.c13 = test2_1.c23)
         ->  Hash Left Scalar Join
               Hash Cond: (test1.c13 = test2.c23)
               ->  Seq Scan on test1
               ->  Hash
                     ->  Seq Scan on test2
         ->  Hash
               ->  Seq Scan on test2 test2_1
(10 rows)

explain (costs off) update test1
set (c12)=(select c22 from test2 where c13=c23),
    (c14,c15)=(select c24,c25 from test2 where c13=c23);
                    QUERY PLAN                    
--------------------------------------------------
 Update on test1
   ->  Hash Left Scalar Join
         Hash Cond: (test1.c13 = test2_1.c23)
         ->  Hash Left Scalar Join
               Hash Cond: (test1.c13 = test2.c23)
               ->  Seq Scan on test1
               ->  Hash
                     ->  Seq Scan on test2
         ->  Hash
               ->  Seq Scan on test2 test2_1
(10 rows)

explain (costs off) update test1
set (c14,c15)=(select c24,c25 from test2 where c13=c23),
    (c12)=(select c22 from test2);
                 QUERY PLAN                 
--------------------------------------------
 Update on test1
   InitPlan 1 (returns $0)
     ->  Seq Scan on test2 test2_1
   ->  Hash Left Scalar Join
         Hash Cond: (test1.c13 = test2.c23)
         ->  Seq Scan on test1
         ->  Hash
               ->  Seq Scan on test2
(8 rows)

explain (costs off, nodes off)
update test4
set c42=(select c52||'u' from test5
                where c43=c53);
                 QUERY PLAN                 
--------------------------------------------
 Update on test4
   ->  Hash Left Scalar Join
         Hash Cond: (test4.c43 = test5.c53)
         ->  Seq Scan on test4
         ->  Hash
               ->  Seq Scan on test5
(6 rows)

explain (costs off, nodes off)
update test4
set c42=(select c54 from test5
                where c43=c53);
                 QUERY PLAN                 
--------------------------------------------
 Update on test4
   ->  Hash Left Scalar Join
         Hash Cond: (test4.c43 = test5.c53)
         ->  Seq Scan on test4
         ->  Hash
               ->  Seq Scan on test5
(6 rows)

explain (costs off, nodes off)
update test4
set (c42)=(select c52||'u' from test5
                where c43=c53);
                 QUERY PLAN                 
--------------------------------------------
 Update on test4
   ->  Hash Left Scalar Join
         Hash Cond: (test4.c43 = test5.c53)
         ->  Seq Scan on test4
         ->  Hash
               ->  Seq Scan on test5
(6 rows)

explain (costs off, nodes off)
update test4
set (c42, c44)=(select c52||'u', c55 from test5
                where c43=c53);
                 QUERY PLAN                 
--------------------------------------------
 Update on test4
   ->  Hash Left Scalar Join
         Hash Cond: (test4.c43 = test5.c53)
         ->  Seq Scan on test4
         ->  Hash
               ->  Seq Scan on test5
(6 rows)

explain (costs off, nodes off)
update test4
set (c42, c44)=(select c52||c53, c55 from test5
                where c43=c53);
                 QUERY PLAN                 
--------------------------------------------
 Update on test4
   ->  Hash Left Scalar Join
         Hash Cond: (test4.c43 = test5.c53)
         ->  Seq Scan on test4
         ->  Hash
               ->  Seq Scan on test5
(6 rows)

drop table test1;
drop table test2;
drop table test3;
drop table test4;
drop table test5;
create table t1(f11 int, f12 int) distribute by replication;
create table t2(f21 int, f22 int);
explain (costs off) update t1 set f11=t2.f21 from t2 where f11=t2.f21;
              QUERY PLAN               
---------------------------------------
 Update on t1
   ->  Merge Join
         Merge Cond: (t1.f11 = t2.f21)
         ->  Sort
               Sort Key: t1.f11
               ->  Seq Scan on t1
         ->  Sort
               Sort Key: t2.f21
               ->  Seq Scan on t2
(9 rows)

explain (costs off) update t2 set f22=t1.f12 from t1 where f21=t1.f11;
              QUERY PLAN               
---------------------------------------
 Update on t2
   ->  Merge Join
         Merge Cond: (t2.f21 = t1.f11)
         ->  Sort
               Sort Key: t2.f21
               ->  Seq Scan on t2
         ->  Sort
               Sort Key: t1.f11
               ->  Seq Scan on t1
(9 rows)

drop table t1;
drop table t2;
DROP TABLE IF EXISTS test11;
NOTICE:  table "test11" does not exist, skipping
create table test11(id int primary key, f2 int, name varchar(10)) distribute by shard(id);
insert into test11 values(3, 2, 'test1');
DROP TABLE IF EXISTS test22;
NOTICE:  table "test22" does not exist, skipping
create table test22(id int, f2 int primary key, name varchar(10)) distribute by shard(f2);
insert into test22 values(2, 3, 'test2');
EXPLAIN (VERBOSE on, COSTS off)
MERGE INTO test11 t
USING (
select * from test22
) t2 ON (t.id = t2.f2)
WHEN MATCHED THEN UPDATE SET t.name = t2.name;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Merge on public.test11 t
   ->  Hash Join
         Output: t.id, t.f2, t.name, t.shardid, t.ctid, test22.f2, test22.name, test22.ctid, test22.xc_node_id
         Inner Unique: true
         Hash Cond: (t.id = test22.f2)
         ->  Seq Scan on public.test11 t
               Output: t.id, t.f2, t.name, t.shardid, t.ctid
         ->  Hash
               Output: test22.f2, test22.name, test22.ctid, test22.xc_node_id
               ->  Seq Scan on public.test22
                     Output: test22.f2, test22.name, test22.ctid, test22.xc_node_id
(11 rows)

select * from test11 order by id;
 id | f2 | name  
----+----+-------
  3 |  2 | test1
(1 row)

MERGE INTO test11 t
USING (
select * from test22
) t2 ON (t.id = t2.f2)
WHEN MATCHED THEN UPDATE SET t.name = t2.name;
select * from test11 order by id;
 id | f2 | name  
----+----+-------
  3 |  2 | test2
(1 row)

DROP TABLE IF EXISTS test11;
create table test11(id int primary key, f2 int, name varchar(10)) distribute by shard(id);
insert into test11 values(2, 2, 'test1');
insert into test11 values(3, 2, 'test1');
DROP TABLE IF EXISTS test22;
create table test22(id int, f2 int primary key, name varchar(10)) distribute by shard(f2);
insert into test22 values(2, 3, 'test2');
EXPLAIN (VERBOSE on, COSTS off)
MERGE INTO test11 t
USING (
select * from test22
) t2 ON (t.id = t2.f2)
WHEN MATCHED THEN UPDATE SET t.name = t2.name
WHEN NOT MATCHED THEN INSERT VALUES(t2.id, t2.f2, t2.name);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Merge on public.test11 t
   ->  Hash Left Join
         Output: t.id, t.f2, t.name, t.shardid, t.ctid, test22.f2, test22.name, test22.id, test22.ctid, test22.xc_node_id
         Inner Unique: true
         Hash Cond: (test22.f2 = t.id)
         ->  Seq Scan on public.test22
               Output: test22.f2, test22.name, test22.id, test22.ctid, test22.xc_node_id
         ->  Hash
               Output: t.id, t.f2, t.name, t.shardid, t.ctid
               ->  Seq Scan on public.test11 t
                     Output: t.id, t.f2, t.name, t.shardid, t.ctid
(11 rows)

select * from test11 order by id;
 id | f2 | name  
----+----+-------
  2 |  2 | test1
  3 |  2 | test1
(2 rows)

MERGE INTO test11 t
USING (
select * from test22
) t2 ON (t.id = t2.f2)
WHEN MATCHED THEN UPDATE SET t.name = t2.name
WHEN NOT MATCHED THEN INSERT VALUES(t2.id, t2.f2, t2.name);
select * from test11 order by id;
 id | f2 | name  
----+----+-------
  2 |  2 | test1
  3 |  2 | test2
(2 rows)

DROP TABLE IF EXISTS test11;
create table test11(id int primary key, f2 int, name varchar(10)) distribute by shard(id);
insert into test11 values(1, 1, 'test1');
insert into test11 values(3, 2, 'test1');
DROP TABLE IF EXISTS test22;
create table test22(id int, f2 int primary key, name varchar(10)) distribute by shard(f2);
insert into test22 values(0, 0, 'test2');
insert into test22 values(2, 3, 'test2');
EXPLAIN (VERBOSE on, COSTS off)
MERGE INTO test11 t
USING (
select * from test22
) t2 ON (t.id = t2.f2)
WHEN MATCHED THEN UPDATE SET t.name = t2.name 
WHEN NOT MATCHED THEN INSERT VALUES(id + 2, f2, name);
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Merge on public.test11 t
   ->  Hash Left Join
         Output: t.id, t.f2, t.name, t.shardid, t.ctid, test22.f2, test22.name, test22.id, test22.ctid, test22.xc_node_id
         Inner Unique: true
         Hash Cond: (test22.f2 = t.id)
         ->  Seq Scan on public.test22
               Output: test22.f2, test22.name, test22.id, test22.ctid, test22.xc_node_id
         ->  Hash
               Output: t.id, t.f2, t.name, t.shardid, t.ctid
               ->  Seq Scan on public.test11 t
                     Output: t.id, t.f2, t.name, t.shardid, t.ctid
(11 rows)

MERGE INTO test11 t
USING (
select * from test22
) t2 ON (t.id = t2.f2)
WHEN MATCHED THEN UPDATE SET t.name = t2.name 
WHEN NOT MATCHED THEN INSERT VALUES(id + 2, f2, name);
select * from test11 order by id;
 id | f2 | name  
----+----+-------
  1 |  1 | test1
  2 |  0 | test2
  3 |  2 | test2
(3 rows)

DROP TABLE IF EXISTS test11;
DROP TABLE IF EXISTS test22;
------------------------
-- Test combocid bug
------------------------
CREATE TABLE exchange20230221(a int, b int, c int) DISTRIBUTE BY SHARD(a);
BEGIN;
    INSERT INTO exchange20230221 VALUES(101, 0, 1);
    INSERT INTO exchange20230221 VALUES(102, 0, 1);
    INSERT INTO exchange20230221 VALUES(103, 0, 1);
    INSERT INTO exchange20230221 VALUES(104, 0, 1);
    UPDATE exchange20230221 tt SET b =
    (
        SELECT SUM(C) FROM exchange20230221 WHERE tt.a >= exchange20230221.b
    );
    SELECT CTID, * FROM exchange20230221 ORDER BY a;
 ctid  |  a  | b | c 
-------+-----+---+---
 (0,5) | 101 | 4 | 1
 (0,6) | 102 | 4 | 1
 (0,7) | 103 | 4 | 1
 (0,8) | 104 | 4 | 1
(4 rows)

    UPDATE exchange20230221 tt SET b =
    (
        SELECT SUM(C) FROM exchange20230221 WHERE tt.a >= exchange20230221.b
    );
    SELECT CTID, * FROM exchange20230221 ORDER BY a;
  ctid  |  a  | b | c 
--------+-----+---+---
 (0,9)  | 101 | 4 | 1
 (0,10) | 102 | 4 | 1
 (0,11) | 103 | 4 | 1
 (0,12) | 104 | 4 | 1
(4 rows)

    UPDATE exchange20230221 tt SET b =
    (
        SELECT SUM(C) FROM exchange20230221 WHERE tt.a >= exchange20230221.b
    );
    SELECT CTID, * FROM exchange20230221 ORDER BY a;
  ctid  |  a  | b | c 
--------+-----+---+---
 (0,13) | 101 | 4 | 1
 (0,14) | 102 | 4 | 1
 (0,15) | 103 | 4 | 1
 (0,16) | 104 | 4 | 1
(4 rows)

END;
SELECT CTID, * FROM exchange20230221 ORDER BY A;
  ctid  |  a  | b | c 
--------+-----+---+---
 (0,13) | 101 | 4 | 1
 (0,14) | 102 | 4 | 1
 (0,15) | 103 | 4 | 1
 (0,16) | 104 | 4 | 1
(4 rows)

EXPLAIN UPDATE exchange20230221 TT SET b =
(
        SELECT SUM(C) FROM exchange20230221 WHERE tt.a >= exchange20230221.b
);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Update on exchange20230221 tt  (cost=0.00..34242.85 rows=0 width=0)
   ->  Seq Scan on exchange20230221 tt  (cost=0.00..34242.85 rows=1270 width=14)
         SubPlan 1
           ->  Aggregate  (cost=26.93..26.94 rows=1 width=8)
                 ->  Seq Scan on exchange20230221  (cost=0.00..25.88 rows=423 width=4)
                       Filter: (tt.a >= b)
(6 rows)

